# Compiler tools only have the major and minor version in their name
if(CMAKE_CXX_COMPILER_VERSION MATCHES "^([0-9]+).([0-9]+)")
  set(CLR_CMAKE_COMPILER_TOOL_VERSION "${CMAKE_MATCH_1}.${CMAKE_MATCH_2}")
else()
  set(CLR_CMAKE_COMPILER_TOOL_VERSION ${CMAKE_CXX_COMPILER_VERSION})
endif()

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  if(APPLE)
    set(LLVM_PREFIX "")
  else()
    set(LLVM_PREFIX "llvm-")
  endif()
  function(locate_llvm_exec exec var)
    find_program(EXEC_LOCATION
     NAMES "${LLVM_PREFIX}${exec}-${CLR_CMAKE_COMPILER_TOOL_VERSION}" "${LLVM_PREFIX}${exec}")
    if (EXEC_LOCATION STREQUAL "EXEC_LOCATION-NOTFOUND")
      message(FATAL_ERROR "Unable to find llvm tool for: ${exec}.")
    endif()
    set(${var} ${EXEC_LOCATION} PARENT_SCOPE)
  endfunction()
  locate_llvm_exec(ar CMAKE_AR)
  locate_llvm_exec(link CMAKE_LINKER)
  locate_llvm_exec(nm CMAKE_NM)
  if(NOT APPLE)
    locate_llvm_exec(objdump CMAKE_OBJDUMP)
  endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  if(CMAKE_CROSSCOMPILING)
    set(GCC_PREFIX "${CMAKE_CXX_COMPILER_TARGET}-")
  else()
    set(GCC_PREFIX "")
  endif()

  function(locate_gcc_exec exec var)
    string(TOUPPER exec EXEC_UPPERCASE)
    if(NOT "$ENV{CLR_${EXEC_UPPERCASE}}" STREQUAL "")
      set(${var} "$ENV{CLR_${EXEC_UPPERCASE}}" PARENT_SCOPE)
      return()
    endif()

    find_program(EXEC_LOCATION
      NAMES "${GCC_PREFIX}${exec}-${CLR_CMAKE_COMPILER_TOOL_VERSION}" "${GCC_PREFIX}${exec}")
    if (EXEC_LOCATION STREQUAL "EXEC_LOCATION-NOTFOUND")
      message(FATAL_ERROR "Unable to find gcc tool for: ${exec}.")
    endif()
    set(${var} ${EXEC_LOCATION} PARENT_SCOPE)
  endfunction()
  locate_gcc_exec(ar CMAKE_AR)
  locate_gcc_exec(link CMAKE_LINKER)
  locate_gcc_exec(nm CMAKE_NM)
  if(NOT APPLE)
    locate_gcc_exec(objdump CMAKE_OBJDUMP)
  endif()
  locate_gcc_exec(objcopy CMAKE_OBJCOPY)
  locate_gcc_exec(ranlib CMAKE_RANLIB)
endif()
