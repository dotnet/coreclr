<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" 
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- NuGet package restore sources. -->
  <PropertyGroup>
    <RestoreSources Condition="'$(DotNetBuildOffline)' != 'true'">
      https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json;
      https://dotnet.myget.org/F/sourcelink/api/v3/index.json;
      https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json;
      https://dotnet.myget.org/F/dotnet-core/api/v3/index.json;
      https://api.nuget.org/v3/index.json;
      $(RestoreSources)
    </RestoreSources>
  </PropertyGroup>


  <PropertyGroup>
    <TargetFramework>netcoreapp1.0</TargetFramework>
    <EnableDefaultItems>false</EnableDefaultItems>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
    <BaseIntermediateOutputPath>$(ToolsDir)/$(BuildToolsPackageVersion)</BaseIntermediateOutputPath>
    <PackageTargetFallback>$(PackageTargetFallback);netframework</PackageTargetFallback>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)dependencies.props" />

  <ItemGroup>
    <!-- This is needed to generate the DAC table -->
    <PackageReference Include="microsoft.dotnet.buildtools.coreclr" Version="1.0.4-prerelease" />
    <PackageReference Include="$(BuildToolsPackage)" Version="$(BuildToolsPackageVersion)" />
    <PackageReference Include="$(FeedTasksPackage)" Version="$(FeedTasksPackageVersion)" />
    <PackageReference Include="$(PublishSymbolsPackage)" Version="$(PublishSymbolsPackageVersion)" />
    <PackageReference Include="$(ILLinkTasksPackage)" Version="$(ILLinkTasksPackageVersion)" />

    <!-- Include the SourceLink packages. We should hook these in our VC++ generation. -->
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="$(MicrosoftSourceLinkVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
    <PackageReference Include="Microsoft.SourceLink.Vsts.Git" Version="$(MicrosoftSourceLinkVersion)" PrivateAssets="all" IsImplicitlyDefined="true" />
  </ItemGroup>

  <Target Name="InitTools" AfterTargets="Restore">

    <PropertyGroup>
      <ToolsDir>$(RepoRoot)Tools</ToolsDir>
      <BuildToolsSemaphore>$(ToolsDir)/$(BuildToolsPackageVersion).init-tools.completed</BuildToolsSemaphore>
      <PackagesDir>$(NuGetPackageRoot)/</PackagesDir>
      <BuildToolsPackageDir>$(PackagesDir)$(BuildToolsPackage)/$(BuildToolsPackageVersion)/lib/</BuildToolsPackageDir>
      <CmdExt>cmd</CmdExt>
      <CmdExt Condition="'$(OS)' != 'Windows_NT'">sh</CmdExt>
      <DotNetRoot Condition="'$(DotNetRoot)' == ''">$(RepoRoot).dotnet\</DotNetRoot>
      <DotNetCmd>$(DotNetRoot)dotnet</DotNetCmd>
      <DotNetCmd Condition="'$(OS)' == 'Windows_NT'">$(DotNetCmd).exe</DotNetCmd>
      <!-- The ILAsm hiccup should be fixed by changing our projects to SDK style projects. This is needed for the arcade transition -->
      <InitToolsCmdLine>(set ILASMCOMPILER_VERSION=$(MicrosoftNETCoreILAsmPackageVersion)) &amp; $(BuildToolsPackageDir)init-tools.$(CmdExt) $(RepoRoot) $(DotNETCmd) $(ToolsDir) $(PackagesDir)</InitToolsCmdLine>
    </PropertyGroup>

    <Message Importance="High" Text="Running init-tools scripts in buildtools" Condition="!Exists('$(BuildToolsSemaphore)')"/>
    <Exec Condition="!Exists('$(BuildToolsSemaphore)')" Command="$(InitToolsCmdLine) &gt; $(RepoRoot)init-tools.log" />
    <Message Importance="High" Text="Buildtools initialized" />

    <Touch Files="$(BuildToolsSemaphore)" AlwaysCreate="true" />
    <OnError ExecuteTargets="DumpInitToolsLog" />
  </Target>

  <Target Name="DumpInitToolsLog">
    <Message Text="Init-tools failed dumping log file $(RepoRoot)init-tools.log" />
    <Message Condition="Exists('$(RepoRoot)init-tools.log')" Text="$([System.IO.File]::ReadAllText('$(RepoRoot)init-tools.log'))" />
  </Target>

</Project>
