<?xml version="1.0" encoding="utf-8"?>
<Project>
  <PropertyGroup>
    <NativeVersionFile Condition="'$(OS)' == 'Windows_NT'">$(__RootArtifactsDir)\obj\_version.h</NativeVersionFile>
    <NativeVersionFile Condition="'$(OS)' != 'Windows_NT'">$(__RootArtifactsDir)/obj/_version.c</NativeVersionFile>
    <_BuildNativeArgs>$(ArchGroup) $(ConfigurationGroup) $(OSGroup) outconfig $(Configuration)</_BuildNativeArgs>
    <SemanticVersioningV1>true</SemanticVersioningV1>
  </PropertyGroup>

  <PropertyGroup>
    <EnableSourceControlManagerQueries>false</EnableSourceControlManagerQueries>
  </PropertyGroup>


  <Target Name="GenerateSourceRevisionId">

    <Exec Command="git describe --all HEAD 2>&amp;1" StandardOutputImportance="Low" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" ConsoleToMSBuild="true" Condition="'$(RawGitBranchName)' == ''">
      <Output TaskParameter="ConsoleOutput" PropertyName="RawGitBranchName" />
    </Exec>

    <PropertyGroup Condition="'$(LatestCommit)' != ''">
      <LatestCommitExitCode>0</LatestCommitExitCode>
    </PropertyGroup>

    <!-- Get the latest commit hash -->
    <Exec Command="git rev-parse HEAD 2>&amp;1" StandardOutputImportance="Low" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" ConsoleToMSBuild="true" Condition="'$(LatestCommit)' == ''">
      <Output TaskParameter="ConsoleOutput" PropertyName="LatestCommit" />
      <Output TaskParameter="ExitCode" PropertyName="LatestCommitExitCode" />
    </Exec>

    <!-- We shouldn't fail the build if we can't retreive the commit hash, so in this case just set it to N/A -->
    <PropertyGroup Condition="'$(LatestCommitExitCode)'!='0'">
      <LatestCommit>N/A</LatestCommit>
    </PropertyGroup>

    <!-- If things match expected patterns, create $(GitBranchName) from $(RawGitBranchName) -->
    <Message Text="GIT Branch Name as seen by git describe: '$(RawGitBranchName)'" />
    <PropertyGroup Condition="$(RawGitBranchName.StartsWith('heads/'))">
      <GitBranchName>$(RawGitBranchName.SubString(6))</GitBranchName>
    </PropertyGroup>
    <PropertyGroup Condition="$(RawGitBranchName.StartsWith('remotes/origin/'))">
      <GitBranchName>$(RawGitBranchName.SubString(15))</GitBranchName>
    </PropertyGroup>
    <Message Text="GIT Branch Name: '$(GitBranchName)'" />

    <!-- The GitHubOwnerName is the name of the entity that 'owns' a particular github repository (e.g the 'dotnet in https://github/dotnet/coreclr) -->
    <!-- we assume by default that these build tools are used by the 'dotnet' group.  This can be overridden. -->
    <PropertyGroup Condition="'$(GitHubOwnerName)' == ''">
      <GitHubOwnerName>dotnet</GitHubOwnerName>
    </PropertyGroup>

    <!-- The GitHubRepositoryUrl is formed out of the simple GitHubRepositoryName (e.g. coreclr or corefx) -->
    <PropertyGroup Condition="'$(GitHubOwnerName)' != '' AND '$(GitHubRepositoryName)' != '' AND '$(GitHubRepositoryUrl)' == ''">
      <GitHubRepositoryUrl>https://github.com/$(GitHubOwnerName)/$(GitHubRepositoryName)</GitHubRepositoryUrl>
    </PropertyGroup>

    <PropertyGroup>
      <LatestCommitExitCode/>
    </PropertyGroup>

    <!-- Get Username -->
    <PropertyGroup>
      <VersionUserName Condition="'$(VersionUserName)' == ''">$(USERNAME)</VersionUserName>
    </PropertyGroup>

    <Exec Command="whoami" Condition="'$(VersionUserName)' == ''" StandardOutputImportance="Low" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="VersionUserName" />
    </Exec>

    <!-- Get Hostname -->
    <PropertyGroup>
      <VersionHostName Condition="'$(VersionHostName)' == ''">$(COMPUTERNAME)</VersionHostName>
    </PropertyGroup>

    <Exec Command="hostname" Condition="'$(RunningOnUnix)'=='true' AND '$(VersionHostName)'==''" StandardOutputImportance="Low" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="VersionHostName" />
    </Exec>

    <!-- Set SourceRevisionId (which is added to the end of the informational version) -->
    <!-- This string has additional information as well (like the GIT commit URL) -->
    <!-- and has the general form @Name1: Value1 @Name2: Value2  ... which makes it easy to parse -->
    <PropertyGroup Condition="'$(SourceRevisionId)' == ''">
      <!-- Set the @BuiltBy key-value pair -->
      <SourceRevisionId Condition="'$(VersionUserName)' != '' AND '$(VersionHostName)' != ''">$(SourceRevisionId) %40BuiltBy: $(VersionUserName)-$(VersionHostName)</SourceRevisionId>
      <!-- Set the @Branch key-value pair -->
      <SourceRevisionId Condition="'$(GitBranchName)' != ''">$(SourceRevisionId) %40Branch: $(GitBranchName)</SourceRevisionId>
      <!-- Set the @SrcCode key-value pair -->
        <SourceRevisionId Condition="'$(GitHubRepositoryUrl)' != '' AND '$(LatestCommit)' != 'N/A'">$(SourceRevisionId) %40SrcCode: $(GitHubRepositoryUrl)/tree/$(LatestCommit)</SourceRevisionId>
      <!-- If that does not work, try setting the @Commit key-value pair -->
          <SourceRevisionId Condition="'$(GitHubRepositoryUrl)' == '' AND '$(LatestCommit)' != 'N/A'">$(SourceRevisionId) %40Commit: $(LatestCommit)</SourceRevisionId>
      <VersionUserName/>
      <VersionHostName/>
    </PropertyGroup>
  </Target>

  <Target Name="InitializeSourceControlInformationFromSourceControlManager"
          DependsOnTargets="GenerateSourceRevisionId"/>
  
</Project>
