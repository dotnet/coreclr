parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osIdentifier: ''
  readyToRun: true
  helixQueues: ''
  crossrootfsDir: ''

### Test job

### Each test job depends on a corresponding build job with the same
### buildConfig and archType.

jobs:
- template: xplat-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osIdentifier: ${{ parameters.osIdentifier }}

    # Compute job name from template parameters
    name: ${{ format('perfbuild_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Perf {0} {1} {2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}

    crossrootfsDir: ${{ parameters.crossrootfsDir }}

    variables:
    - ${{ if eq(variables['System.TeamProject'], 'public') }}:
      - name: BenchviewRunType
        value: private
      - name: BenchviewCommitName
        value: '.NET Performance - $(BenchviewRunType) - $(Build.SourceBranch) $(System.PullRequest.PullRequestNumber)'
      # for public runs we want to generate data (--generate-benchview-data ) but don't upload it (missing --upload-to-benchview-container)
      - name: BenchviewArguments
        value: '--generate-benchview-data --benchview-submission-name "$(BenchviewCommitName)" --benchview-machinepool perfsnake --benchview-run-type $(BenchviewRunType)'
      - name: Creator
        value: dotnet-performance
      - name: HelixApiAccessToken
        value: ''
      - name: HelixPreCommand
        value: ''
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - name: BenchviewRunType
        value: rolling
      - name: BenchviewCommitName
        value: '.NET Performance - $(BenchviewRunType) - $(Build.SourceBranch) $(Build.SourceVersion)'
      # for private runs we want to generate data (--generate-benchview-data ) and upload it (--upload-to-benchview-container specifies where)
      - name: BenchviewArguments
        value: '--generate-benchview-data --benchview-submission-name "$(BenchviewCommitName)" --benchview-machinepool perfsnake --benchview-run-type $(BenchviewRunType) --upload-to-benchview-container $(_Category)'
      - name: Creator
        value: ''
      - ${{ if eq(parameters.osName, 'windows') }}:
        - name: HelixPreCommand
          value: 'set "BV_UPLOAD_SAS_TOKEN=$(BenchviewUploadToken)"'
      - ${{ if ne(parameters.osName, 'windows') }}:
        - name: HelixPreCommand
          value: 'export BV_UPLOAD_SAS_TOKEN="$(BenchviewUploadTokenLinux)"'
      - group: DotNet-HelixApi-Access
      - group: dotnet-benchview

    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - name: productPath
        value: $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - name: corerootParentPath
        value: $(Build.SourcesDirectory)/bin/tests/$(osGroup).$(archType).$(buildConfigUpper)/Tests
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - name: productPath
        value: $(Build.SourcesDirectory)\bin\Product\$(osGroup).$(archType).$(buildConfigUpper)
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - name: corerootParentPath
        value: $(Build.SourcesDirectory)\bin\tests\$(osGroup).$(archType).$(buildConfigUpper)\Tests

    - name: commonArguments
      value: '--filter *Adams* --incremental no --architecture $(archType) -f netcoreapp3.0 --bdn-arguments="--allCategories CoreClr" --dotnet-compilation-mode Tiered'

    # Test job depends on the corresponding build job
    dependsOn: ${{ format('build_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}

    # Run all steps in the container.
    # Note that the containers are resources defined in azure-pipelines.yml
    containerName: ${{ parameters.containerName }}

    timeoutInMinutes: 480

    steps:

    # Clone the performance repo
    - script: git clone --branch master --depth 1 --quiet https://github.com/dotnet/performance $(corerootParentPath)/perf
      displayName: Clone dotnet/performance

    # Download product build from pipeline artifact storage
    - task: DownloadPipelineArtifact@0
      displayName: Download product build pipeline artifact
      inputs:
        artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        targetPath: $(productPath)

    # Create Core_Root
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - script: ./build-test.sh $(buildConfig) $(archType) $(crossArg) generatelayoutonly
        displayName: Create Core_Root
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      # TODO: add generatelayoutonly to build-test.cmd.
      - script: build-test.cmd $(buildConfig) $(archType)
        displayName: Create Core_Root

    # TODO: Crossgen the framework

    # Send everything to Helix
    - template: /eng/common/templates/steps/send-to-helix.yml
      parameters:
        HelixSource: 'pr/dotnet/coreclr/$(Build.SourceBranch)'
        HelixType: 'test/performance/'
        HelixAccessToken: $(HelixApiAccessToken)
        HelixTargetQueues: ${{ join(' ', parameters.helixQueues) }}
        HelixPreCommands: $(HelixPreCommand)
        Creator: $(Creator)
        WorkItemTimeout: 4:00 # 4 hours
        WorkItemDirectory: '$(corerootParentPath)/perf'
        CorrelationPayloadDirectory: '$(corerootParentPath)/Core_Root'
        ${{ if eq(parameters.osName, 'Windows_NT') }}:
          WorkItemCommand: 'py -3  %HELIX_WORKITEM_PAYLOAD%\scripts\benchmarks_ci.py $(commonArguments) --corerun %HELIX_CORRELATION_PAYLOAD%\corerun.exe'
        ${{ if ne(parameters.osName, 'Windows_NT') }}:
          WorkItemCommand: 'python3 $HELIX_WORKITEM_PAYLOAD/scripts/benchmarks_ci.py $(commonArguments) --corerun $HELIX_CORRELATION_PAYLOAD/corerun'

    # Publish Logs
    - task: PublishPipelineArtifact@0
      displayName: Publish Logs
      inputs:
        artifactName: ${{ format('testbuild_{0}_{1}_{2}_perf_Logs', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        targetPath: $(corerootParentPath)/perf/Logs
      continueOnError: true
      condition: always()

