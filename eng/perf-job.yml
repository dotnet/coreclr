parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osIdentifier: ''
  readyToRun: true
  helixQueues: ''
  crossrootfsDir: ''

### Test job

### Each test job depends on a corresponding build job with the same
### buildConfig and archType.

jobs:
- template: xplat-job.yml
  parameters:
    buildConfig: ${{ parameters.buildConfig }}
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osIdentifier: ${{ parameters.osIdentifier }}

    # Compute job name from template parameters
    name: ${{ format('perfbuild_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
    displayName: ${{ format('Perf {0} {1} {2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}

    crossrootfsDir: ${{ parameters.crossrootfsDir }}

    variables:
    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - group: DotNet-HelixApi-Access

    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - name: productPath
      - value: $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - name: productPath
      - value: $(Build.SourcesDirectory)\bin\Product\$(osGroup).$(archType).$(buildConfigUpper)

    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - name: corerootParentPath
      - value: $(Build.SourcesDirectory)/bin/tests/$(osGroup).$(archType).$(buildConfigUpper)/Tests
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - name: corerootParentPath
      - value: $(Build.SourcesDirectory)\bin\tests\$(osGroup).$(archType).$(buildConfigUpper)\Tests

    - name: benchviewArguments
    - value: '--benchview-submission-name "test-russellk" --benchview-machine-pool perfsnake --benchview-run-time Private --upload-to-benchview-container coreclr'

    - name: commonArguments
    - value: '--filter "Burgers*" --incremental no --architecture $archType -f netcoreapp3.0 --bdn-arguments="--allCategories CoreClr" --dotnet-compilation-mode Tiered --generate-benchview-data $(benchviewArguments)'

    # Test job depends on the corresponding build job
    dependsOn: ${{ format('build_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}

    # Run all steps in the container.
    # Note that the containers are resources defined in azure-pipelines.yml
    containerName: ${{ parameters.containerName }}

    timeoutInMinutes: 480

    steps:

    # Clone the performance repo
    - script: git clone --branch master --depth 1 --quiet https://github.com/dotnet/performance $(corerootParentPath)/perf
      displayName: Clone dotnet/performance

    # Download product build from pipeline artifact storage
    - task: DownloadPipelineArtifact@0
      displayName: Download product build pipeline artifact
      inputs:
        artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        targetPath: $(productPath)

    # Create Core_Root
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - script: ./build-test.sh $(buildConfig) $(archType) $(crossArg) generatelayoutonly
        displayName: Create Core_Root
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      # TODO: add generatelayoutonly to build-test.cmd
      - script: build-test.cmd $(buildConfig) $(archType)
        displayName: Create Core_Root

    # TODO: Crossgen the framework

    # Send everything to Helix
    - template: /eng/common/templates/steps/send-to-helix.yml
      parameters:
        HelixSource: 'pr/dotnet/coreclr/$(Build.SourceBranch)'
        HelixType: 'test/performance_$(_BuildConfig)/'
        HelixAccessToken: $(HelixApiAccessToken)
        HelixTargetQueues: ${{ parameters.helixQueues }}
        HelixPreCommands: ''
        Creator: $(Build.DefinitionName)
        WorkItemTimeout: 4:00 # 4 hours
        WorkItemDirectory: '$(corerootParentPath)/Core_Root'
        CorrelationPayloadDirectory: '$(corerootParentPath)/perf'
        ${{ if eq(parameters.osName, 'Windows_NT') }}:
          WorkItemCommand: 'py -3  %HELIX_CORRELATION_PAYLOAD%\scripts\benchmarks_ci.py $(commonArguments) --corerun %HELIX_WORKITEM_PAYLOAD%\corerun.exe'
        ${{ if ne(parameters.osName, 'Windows_NT') }}:
          WorkItemCommand: 'python3 $HELIX_CORRELATION_PAYLOAD/scripts/benchmarks_ci.py $(commonArguments) --corerun  $HELIX_WORKITEM_PAYLOAD/corerun'

    # Publish Logs
    - task: PublishPipelineArtifact@0
      displayName: Publish Logs
      inputs:
        artifactName: ${{ format('testbuild_{0}_{1}_{2}_perf_Logs', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        targetPath: $(corerootParentPath)/perf/Logs
      continueOnError: true
      condition: always()

