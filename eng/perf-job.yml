parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osIdentifier: ''
  readyToRun: true
  helixQueues: ''
  crossrootfsDir: ''

### Test job

### Each test job depends on a corresponding build job with the same
### buildConfig and archType.

jobs:
- template: /eng/common/templates/job/performance.yml
  parameters:
    # Compute job name from template parameters
    jobName: ${{ format('perfbuild_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
    pool: Hosted VS2017

    # Test job depends on the corresponding build job
    dependsOn: ${{ format('build_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}

    # Run all steps in the container.
    # Note that the containers are resources defined in azure-pipelines.yml
    container: ${{ parameters.containerName }}

    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      extraSetupArguments: --corerootdirectory $(corerootParentPath)/Core_Root --architecture ${{ parameters.archType }}
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      extraSetupArguments: -CoreRootDirectory $(corerootParentPath)\Core_Root -Architecture ${{ parameters.archType }}

    variables:
      - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - name: productPath
        value: $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - name: corerootParentPath
        value: $(Build.SourcesDirectory)/bin/tests/$(osGroup).$(archType).$(buildConfigUpper)/Tests
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - name: productPath
        value: $(Build.SourcesDirectory)\bin\Product\$(osGroup).$(archType).$(buildConfigUpper)
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      - name: corerootParentPath
        value: $(Build.SourcesDirectory)\bin\tests\$(osGroup).$(archType).$(buildConfigUpper)\Tests
    steps:

    # Download product build from pipeline artifact storage
    - task: DownloadPipelineArtifact@0
      displayName: Download product build pipeline artifact
      inputs:
        artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        targetPath: $(productPath)

    # Create Core_Root
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - script: ./build-test.sh $(buildConfig) $(archType) $(crossArg) generatelayoutonly
        displayName: Create Core_Root
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      # TODO: add generatelayoutonly to build-test.cmd.
      - script: build-test.cmd $(buildConfig) $(archType)
        displayName: Create Core_Root

    # TODO: Crossgen the framework