parameters:
  buildConfig: ''
  archType: ''
  osGroup: ''
  osIdentifier: ''
  readyToRun: true
  helixQueues: ''
  container: ''
  crossrootfsDir: ''

### Test job

### Each test job depends on a corresponding build job with the same
### buildConfig and archType.

jobs:
- template: /eng/common/templates/job/performance.yml
  parameters:
    # Compute job name from template parameters
    jobName: ${{ format('perfbuild_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
    pool: 
      # Public Linux Build Pool
      ${{ if and(eq(parameters.osGroup, 'Linux'), eq(variables['System.TeamProject'], 'public')) }}:
        name:  NetCorePublic-Pool
        queue: BuildPool.Ubuntu.1604.Amd64.Open
      # Public Windows Build Pool
      ${{ if and(eq(parameters.osGroup, 'Windows_NT'), eq(variables['System.TeamProject'], 'public')) }}:
        name: NetCorePublic-Pool
        queue: BuildPool.Windows.10.Amd64.VS2017.Open
    archType: ${{ parameters.archType }}
    osGroup: ${{ parameters.osGroup }}
    osIdentifier: ${{ parameters.osIdentifier }}

    # Test job depends on the corresponding build job
    dependsOn: ${{ format('build_{0}_{1}_{2}', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}

    # Run all steps in the container.
    # Note that the containers are resources defined in azure-pipelines.yml
    ${{ if ne(parameters.container, '') }}:
      ${{ if eq(parameters.container.registry, 'mcr') }}:
        container: ${{ format('{0}:{1}', 'mcr.microsoft.com/dotnet-buildtools/prereqs', parameters.container.image) }}
      ${{ if ne(parameters.container.registry, 'mcr') }}:
        container: ${{ format('{0}:{1}', parameters.container.registry, parameters.container.image) }}
      
    extraSetupArguments: $(setupArguments)

    variables:
      - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
        - name: productPath
          value: $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).Release
        - name: corerootParentPath
          value: $(productPath)/Tests
        - name: setupArguments
          value: --corerootdirectory $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)/Core_Root --architecture $(archType)
      - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
        - name: productPath
          value: $(Build.SourcesDirectory)\bin\Product\$(osGroup).$(archType).Release
        - name: corerootParentPath
          value: $(productPath)\Tests
        - name: setupArguments
          value: -CoreRootDirectory $(Build.SourcesDirectory)\bin\Product\$(osGroup).$(archType).$(buildConfigUpper)\Tests\Core_Root -Architecture $(archType)
    steps:

    # Download product build
    - task: DownloadBuildArtifacts@0
      displayName: Download product build
      inputs:
        buildType: current
        downloadType: single
        artifactName: ${{ format('{0}_{1}_{2}_build', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        downloadPath: $(System.ArtifactsDirectory)

    # Populate Product directory
    - task: CopyFiles@2
      displayName: Populate Product directory
      inputs:
        sourceFolder: $(System.ArtifactsDirectory)/${{ format('{0}_{1}_{2}_build', parameters.osIdentifier, parameters.archType, parameters.buildConfig) }}
        contents: '**'
        targetFolder: $(Build.SourcesDirectory)/bin/Product/$(osGroup).$(archType).$(buildConfigUpper)

    
    # Create Core_Root
    - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
      - script: ./build-test.sh $(buildConfig) $(archType) $(crossArg) generatelayoutonly
        displayName: Create Core_Root
    - ${{ if eq(parameters.osGroup, 'Windows_NT') }}:
      # TODO: add generatelayoutonly to build-test.cmd.
      - script: build-test.cmd $(buildConfig) $(archType) skipmanaged skipnative
        displayName: Create Core_Root

    # TODO: Crossgen the framework