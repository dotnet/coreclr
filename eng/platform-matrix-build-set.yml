parameters:
  jobTemplate: ''
  buildConfig: ''
  platforms: []
  # platformGroup is a named collection of platforms. Allowed values:
  # 'all' - all platforms
  # 'gcstress' - platforms that support running under GCStress0x3 and GCStress0xC scenarios
  platformGroup: ''
  # helixQueueGroup is a named collection of Helix Queues. If specified, it determines which Helix queues are
  # used, instead of the usual criteria. Allowed values:
  # 'pr' - the queues used for a pull request for the platform. Typically a small set.
  # 'ci' - the queues used for a CI (post-merge) test run.
  # 'all' - the queues used for non-PR, non-CI test runs, e.g., Manual or Scheduled runs. Typically this is all available queues.
  # 'corefx' - the queues used for a corefx test run.
  helixQueueGroup: 'pr'
  ignoreDependencyOnBuildJobs: false
  jobParameters: {}
  osArchCombos: {}

jobs:
- template: /eng/platform-matrix-build-os-per-arch.yml
  parameters:
    jobTemplate: ${{ parameters.jobTemplate }}
    buildConfig: ${{ parameters.buildConfig }}
    platforms: ${{ parameters.platforms }}
    platformGroup: ${{ parameters.platformGroup }}
    helixQueueGroup: ${{ parameters.helixQueueGroup }}
    ignoreDependencyOnBuildJobs: ${{ parameters.ignoreDependencyOnBuildJobs }}
    jobParameters: ${{ parameters.jobParameters }}
    osArchCombos: ${{ parameters.osArchCombos }}

    # OS to build managed test artifacts on for each architecture
    managedBuildOSPerArch:
      # Currently we only build X86 on Windows
      x86:
        group: ''
        id: ''

      # Identify OS to use for building managed components of X64 *nix tests
      x64:
        ${{ if eq(parameters.osArchCombos['osxX64'], true) }}:
          group: 'OSX'
          id: 'OSX'
        ${{ if and(ne(parameters.osArchCombos['osxX64'], true), eq(parameters.osArchCombos['linuxX64'], true)) }}:
          group: 'Linux'
          id: 'Linux'
        ${{ if and(ne(parameters.osArchCombos['osxX64'], true), ne(parameters.osArchCombos['linuxX64'], true), eq(parameters.osArchCombos['linuxMuslX64'], true)) }}:
          group: 'Linux'
          id: 'Linux_musl'
        ${{ if and(ne(parameters.osArchCombos['osxX64'], true), ne(parameters.osArchCombos['linuxX64'], true), ne(parameters.osArchCombos['linuxMuslX64'], true), eq(parameters.osArchCombos['linuxMuslX64'], true)) }}:
          group: 'Linux'
          id: 'Linux_rhel6'
        ${{ if and(ne(parameters.osArchCombos['osxX64'], true), ne(parameters.osArchCombos['linuxX64'], true), ne(parameters.osArchCombos['linuxMuslX64'], true), ne(parameters.osArchCombos['linuxMuslX64'], true)) }}:
          group: ''
          id: ''

      # Identify OS to use for building managed components of ARM32 *nix tests
      arm:
        ${{ if eq(parameters.buildLinuxArm, true) }}:
          group: 'Linux'
          id: 'Linux'
        ${{ if ne(parameters.buildLinuxArm, true) }}:
          group: ''
          id: ''

      # Identify OS to use for building managed components of ARM64 *nix tests
      arm64:
        ${{ if eq(parameters.osArchCombos['linuxArm64'], true) }}:
          group: 'Linux'
          id: 'Linux'
        ${{ if and(ne(parameters.osArchCombos['linuxArm64'], true), eq(parameters.osArchCombos['linuxMuslArm64'], true)) }}:
          group: 'Linux'
          id: 'Linux_musl'
        ${{ if and(ne(parameters.osArchCombos['linuxArm64'], true), ne(parameters.osArchCombos['linuxMuslArm64'], true)) }}:
          group: ''
          id: ''
