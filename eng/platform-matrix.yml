parameters:
  jobTemplate: ''
  buildConfig: ''
  platforms: []
  # platformGroup is a named collection of platforms. Allowed values:
  # 'all' - all platforms
  # 'gcstress' - platforms that support running under GCStress0x3 and GCStress0xC scenarios
  platformGroup: ''
  # helixQueueGroup is a named collection of Helix Queues. If specified, it determines which Helix queues are
  # used, instead of the usual criteria. Allowed values:
  # 'pr' - the queues used for a pull request for the platform. Typically a small set.
  # 'ci' - the queues used for a CI (post-merge) test run.
  # 'all' - the queues used for non-PR, non-CI test runs, e.g., Manual or Scheduled runs. Typically this is all available queues.
  # 'corefx' - the queues used for a corefx test run.
  helixQueueGroup: 'pr'
  ignoreDependencyOnBuildJobs: false
  jobParameters: {}

jobs:
- template: /eng/platform-matrix-build-os-per-arch.yml
  parameters:
    jobTemplate: ${{ parameters.jobTemplate }}
    buildConfig: ${{ parameters.buildConfig }}
    platforms: ${{ parameters.platforms }}
    platformGroup: ${{ parameters.platformGroup }}
    helixQueueGroup: ${{ parameters.helixQueueGroup }}
    ignoreDependencyOnBuildJobs: ${{ parameters.ignoreDependencyOnBuildJobs }}
    jobParameters: ${{ parameters.jobParameters }}

    variables:
    - name: groupAll
      value: ${{ in(parameters.platformGroup, 'all') }}

    - name: groupAllOrGcStress
      value: ${{ in(parameters.platformGroup, 'all', 'gcstress') }}

    # Boolean flags defining which OS / architecture combos to generate

    - name: linuxArm
      value: ${{ or(containsValue(parameters.platforms, 'Linux_arm'), variables.groupAllOrGcStress) }}

    - name: linuxArm64
      value: ${{ or(containsValue(parameters.platforms, 'Linux_arm64'), variables.groupAll) }}

    - name: linuxMuslX64
      value: ${{ or(containsValue(parameters.platforms, 'Linux_musl_x64'), variables.groupAll) }}

    - name: linuxMuslArm64
      value: ${{ or(containsValue(parameters.platforms, 'Linux_musl_arm64'), variables.groupAll) }}

    - name: linuxRHel6X64
      value: ${{ or(containsValue(parameters.platforms, 'Linux_rhel6_x64'), variables.groupAll) }}

    - name: linuxX64
      value: ${{ or(containsValue(parameters.platforms, 'Linux_x64'), variables.groupAllOrGcStress) }}

    - name: osxX64
      value: ${{ or(containsValue(parameters.platforms, 'OSX_x64'), variables.groupAll) }}

    - name: windowsX64
      value: ${{ or(containsValue(parameters.platforms, 'Windows_NT_x64'), variables.groupAllOrGcStress) }}

    - name: windowsX86
      value: ${{ or(containsValue(parameters.platforms, 'Windows_NT_x86'), variables.groupAllOrGcStress) }}

    - name: windowsArm
      value: ${{ or(containsValue(parameters.platforms, 'Windows_NT_arm'), variables.groupAll) }}

    - name: windowsArm64
      value: ${{ or(containsValue(parameters.platforms, 'Windows_NT_arm64'), variables.groupAll) }}

    # Identify OS to use for building managed components of X86 *nix tests
    # Currently no-op as we only build X86 on Windows

    - name: x86UnixManagedBuildOSGroup
      value: ''

    - name: x86UnixManagedBuildOSArchitecture
      value: ''

    # Identify OS to use for building managed components of X64 *nix tests

    - name: x64UnixManagedBuildOSGroup
      value: ''

    - name: x64UnixManagedBuildOSArchitecture
      value: ''

    - ${{ if eq(variables.linuxRHel6X64, true) }}:

      - name: x64UnixManagedBuildOSGroup
        value: 'Linux'
  
      - name: x64UnixManagedBuildOSArchitecture
        value: 'Linux_rhel6'

    - ${{ if eq(variables.linuxMuslX64, true) }}:

      - name: x64UnixManagedBuildOSGroup
        value: 'Linux'
  
      - name: x64UnixManagedBuildOSArchitecture
        value: 'Linux_musl'

    - ${{ if eq(variables.linuxX64, true) }}:

      - name: x64UnixManagedBuildOSGroup
        value: 'Linux'
  
      - name: x64UnixManagedBuildOSArchitecture
        value: 'Linux'

    - ${{ if eq(variables.osxX64, true) }}:

      - name: x64UnixManagedBuildOSGroup
        value: 'OSX'
  
      - name: x64UnixManagedBuildOSArchitecture
        value: 'OSX'

    # Identify OS to use for building managed components of ARM32 *nix tests

    - name: armUnixManagedBuildOSGroup
      value: ''

    - name: armUnixManagedBuildOSArchitecture
      value: ''

    - ${{ if eq(variables.linuxArm, true) }}:

      - name: armUnixManagedBuildOSGroup
        value: 'Linux'
  
      - name: armUnixManagedBuildOSArchitecture
        value: 'Linux'

    # Identify OS to use for building managed components of ARM64 *nix tests

    - name: arm64UnixManagedBuildOSGroup
      value: ''

    - name: arm64UnixManagedBuildOSArchitecture
      value: ''

    - ${{ if eq(variables.linuxMuslArm64, true) }}:

      - name: arm64UnixManagedBuildOSGroup
        value: 'Linux'
  
      - name: arm64UnixManagedBuildOSArchitecture
        value: 'Linux_musl'
  
    - ${{ if eq(variables.linuxArm64, true) }}:

      - name: arm64UnixManagedBuildOSGroup
        value: 'Linux'
  
      - name: arm64UnixManagedBuildOSArchitecture
        value: 'Linux'
