<Project DefaultTargets="PublishTestAssets">

  <!-- Publishing should always use Arcade -->
  <PropertyGroup>
    <ArcadeBuild>true</ArcadeBuild>
  </PropertyGroup>

  <Import Project="..\Directory.Build.props" />

  <Import Project="$(NuGetPackageRoot)microsoft.dotnet.build.tasks.feed\$(MicrosoftDotNetBuildTasksFeedVersion)\build\Microsoft.DotNet.Build.Tasks.Feed.targets" />
  
  <Import Project="..\Directory.Build.targets" />

  <PropertyGroup>
    <!-- Set the TargetFramework just to make the SDK happy -->
    <TargetFramework>netcoreapp3.0</TargetFramework>
  </PropertyGroup>

  <PropertyGroup>
    <AssetManifestDir>$(RootBinDir)tests\$(BuildOS).$(BuildArch).$(BuildType)\bin\nativeassets</AssetManifestDir>
    <AssetManifestFileName>coreclr-native-test-assets.$(BuildOS).$(BuildArch).xml</AssetManifestFileName>
    <!-- Create a temporary directory to store the generated asset manifest by the task -->
    <TempWorkingDirectory>$(ArtifactsLogDir)\..\AssetsTmpDir\$([System.Guid]::NewGuid())</TempWorkingDirectory>
    <NativeAssetsZipPath>$(TempWorkingDirectory)/zip/coreclr-native-test-assets.$(OSGroup).$(BuildArch).zip</NativeAssetsZipPath>
    <AssetManifestPath>$(TempWorkingDirectory)\$(AssetManifestFileName)</AssetManifestPath>
  </PropertyGroup>

  <Target Name="PublishTestAssets">
    <Error Text="The ExpectedFeedUrl property wasn't supplied." Condition="'$(ExpectedFeedUrl)' == ''" />
    <Error Text="FilesToPublishPattern property wasn't supplied." Condition="'$(FilesToPublishPattern)' == ''" />

    <PropertyGroup>
      <_TestAssetVersion>$(PackageVersion)-$(VersionSuffix)</_TestAssetVersion>
      <_FileRelativePathBase>coreclr-native-test-assets/$(_TestAssetVersion)/</_FileRelativePathBase>
    </PropertyGroup>

    <ItemGroup>
      <NativeTestAssets Include="$(FilesToPublishPattern)" />
    </ItemGroup>

    <Error Condition="'@(NativeTestAssets)' == ''" Text="No files to push." />

    <RemoveDir Directories="$(TempWorkingDirectory)/nativeassets" Condition="Exists('$(TempWorkingDirectory)/nativeassets')" />

    <MakeDir Directories="$(TempWorkingDirectory)/nativeassets;$(TempWorkingDirectory)/zip" />

    <Copy SourceFiles="@(NativeTestAssets)" DestinationFolder="$(TempWorkingDirectory)/nativeassets" />

    <ZipDirectory SourceDirectory="$(TempWorkingDirectory)/nativeassets" DestinationFile="$(NativeAssetsZipPath)" />

    <ItemGroup>
      <ItemsToPush Remove="@(ItemsToPush)" />
      <ItemsToPush Include="$(NativeAssetsZipPath)">
        <RelativeBlobPath>$(_FileRelativePathBase)%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPush>
    </ItemGroup>

    <PushToBlobFeed
      AccountKey="$(AccountKey)"
      ItemsToPush="@(ItemsToPush)"
      ExpectedFeedUrl="$(ExpectedFeedUrl)"
      ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
      ManifestBranch="$(BUILD_SOURCEBRANCH)"
      ManifestBuildId="$(BUILD_BUILDNUMBER)"
      ManifestCommit="$(BUILD_SOURCEVERSION)"
      PublishFlatContainer="true"
      AssetManifestPath="$(AssetManifestPath)"
      Overwrite="true"
    />

    <ItemGroup>
      <ManifestToPush Remove="@(ManifestToPush)" />
      <ManifestToPush Include="$(AssetManifestFilePath)">
        <RelativeBlobPath>$(_FileRelativePathBase)$(AssetManifestFileName)</RelativeBlobPath>
      </ManifestToPush>
    </ItemGroup>

    <Message Importance="High" Text="PublishTestAssets: $(_FileRelativePathBase)$(AssetManifestFileName)" />

    <PushToBlobFeed ExpectedFeedUrl="$(ExpectedFeedUrl)"
                    AccountKey="$(AccountKey)"
                    ItemsToPush="@(ManifestToPush)"
                    PublishFlatContainer="true"
                    ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
                    ManifestBranch="$(BUILD_SOURCEBRANCH)"
                    ManifestBuildId="$(BUILD_BUILDNUMBER)"
                    ManifestCommit="$(BUILD_SOURCEVERSION)"
                    AssetManifestPath="$(AssetManifestDir)ManifestUpload.xml"
                    Overwrite="true" />
  </Target>
</Project>
