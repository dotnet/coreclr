<!--
***********************************************************************************************
Sdk.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Remaining Work:
    1) Inject CreateReadyToRunImages at correct entrypoint in the build. Related to https://github.com/dotnet/sdk/issues/2583
  -->
    <PropertyGroup>
      <_IntermediateReadyToRunDirName Condition=" '$(_IntermediateReadyToRunDirName)' == '' ">ReadyToRun</_IntermediateReadyToRunDirName>
      <_IntermediateReadyToRunDir Condition=" '$(_IntermediateReadyToRunDir)' == '' ">$(IntermediateOutputPath)$(_IntermediateReadyToRunDirName)</_IntermediateReadyToRunDir>
      <_IntermediateReadyToRunDir>$([System.IO.Path]::GetFullPath($(_IntermediateReadyToRunDir)))</_IntermediateReadyToRunDir>

      <_ReadyToRunOutputDir>$([System.IO.Path]::Combine($(_IntermediateReadyToRunDir),"Output"))</_ReadyToRunOutputDir>
    </PropertyGroup>

  <Target Name="CreateReadyToRunImages"
          BeforeTargets="ComputeFilesToPublish"
          DependsOnTargets="_CheckForUnsupportedReadyToRunCompilation;
                            _ComputeCrossGenInputs;
                            _InitializeCrossgenProps;
                            _RunCrossgenOnInputs;
                            _PublishCrossgenOutputs"
          Condition="'$(ShouldCreateReadyToRunImages)' == 'true'">
  </Target>

  <Target Name="_CheckForUnsupportedReadyToRunCompilation"
          Condition="'$(ShouldCreateReadyToRunImages)' == 'true'">

    <!-- TODO: Add this message as a resource string to the NET SDK so it can be localized -->
    <NETSdkError Condition="'3.0' > '$(_TargetFrameworkVersionWithoutV)'"
        FormattedText="Creating ReadyToRun images is only supported for .NET Core 3.0 and above" />

    <NETSdkError Condition="'$(RuntimeIdentifier)' ==''"
                 ResourceName="RuntimeIdentifierWasNotSpecified"/>

    <NETSdkError Condition="'$(TargetFramework)' ==''"
                 ResourceName="AtLeastOneTargetFrameworkMustBeSpecified"/>

    <!-- Determine whether the host OS platform-architecture supports compilation to the desired RuntimeIdentifier -->
    <PropertyGroup>
      <_OSPlatform Condition="$([MSBuild]::IsOSPlatform('windows'))">win</_OSPlatform>
      <_OSPlatform Condition="$([MSBuild]::IsOSPlatform('osx'))">osx</_OSPlatform>
      <_OSPlatform Condition="$([MSBuild]::IsOSPlatform('linux'))">linux</_OSPlatform>
      <_OSArchitecture>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)</_OSArchitecture>

      <_UnsupportedReadyToRunCompilation>false</_UnsupportedReadyToRunCompilation>
      <_UnsupportedReadyToRunCompilation Condition="'$(_OSPlatform)' == 'win' and !$(RuntimeIdentifier.StartsWith('win'))">true</_UnsupportedReadyToRunCompilation>
      <_UnsupportedReadyToRunCompilation Condition="'$(_OSPlatform)' == 'osx' and !$(RuntimeIdentifier.StartsWith('osx'))">true</_UnsupportedReadyToRunCompilation>
      <!-- TODO: Allow cross-compilation to work for CrossGen in supported scenarios -->
      <_UnsupportedReadyToRunCompilation Condition="'$(_OSArchitecture)' != '$(PlatformTarget)'">true</_UnsupportedReadyToRunCompilation>
    </PropertyGroup>

    <!-- TODO: Add this message as a resource string to the NET SDK so it can be localized -->
    <NETSdkError Condition="'$(_UnsupportedReadyToRunCompilation)' == 'true'"
        FormattedText="Creating ReadyToRun images is not supported for the RuntimeIdentifier $(RuntimeIdentifier) on the host OS $(_OSPlatform)-$(_OSArchitecture.ToLower())" />
  </Target>

  <Target Name="_ComputeCrossGenInputs">
    <ItemGroup>
      <_CrossGenInputAssemblies Include="@(IntermediateAssembly)" />
      <!-- If we want to crossgen other IL assemblies, we must filter out the native assemblies -->
      <!-- <_CrossGenInputAssemblies Include="@(ResolvedAssembliesToPublish)" Condition="'%(ResolvedAssembliesToPublish.AssetType)' == 'runtime'" /> -->

      <_CrossGenReferenceAssemblies Include="@(IntermediateAssembly)" />
      <_CrossGenReferenceAssemblies Include="@(ResolvedAssembliesToPublish)" />
    </ItemGroup>
  </Target>

  <Target Name="_InitializeCrossgenProps">
    <!-- Get the coreclr path -->
    <ItemGroup>
      <_CoreclrResolvedPath Include="@(ResolvedAssembliesToPublish)"
                                             Condition="'%(ResolvedAssembliesToPublish.Filename)'=='coreclr'" />
      <_CoreclrResolvedPath Include="@(ResolvedAssembliesToPublish)"
                                             Condition="'%(ResolvedAssembliesToPublish.Filename)'=='libcoreclr'" />
      <_JitResolvedPath Include="@(ResolvedAssembliesToPublish)"
                                             Condition="'%(ResolvedAssembliesToPublish.Filename)'=='clrjit'" />
      <_JitResolvedPath Include="@(ResolvedAssembliesToPublish)"
                                             Condition="'%(ResolvedAssembliesToPublish.Filename)'=='libclrjit'" />
      <_SystemPrivateCoreLibResolvedPath Include="@(ResolvedAssembliesToPublish)"
                                             Condition="'%(ResolvedAssembliesToPublish.Filename)'=='System.Private.CoreLib'" />
      <_MicrosoftDiaSymReaderNativePath Include="@(ResolvedAssembliesToPublish)"
                                             Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(ResolvedAssembliesToPublish.Filename)', '^Microsoft\.DiaSymReader\.Native\.'))" />
    </ItemGroup>

    <!-- Check that there is one unique assembly for several sensitive assemblies -->
    <NETSdkError Condition="'@(_CoreclrResolvedPath->Count())' &gt; 1"
                 ResourceName="MultipleFilesResolved"
                 FormatArguments="coreclr" />

    <NETSdkError Condition="'@(_CoreclrResolvedPath)'== ''"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="coreclr" />

    <NETSdkError Condition="'@(_JitResolvedPath->Count())' &gt; 1"
                 ResourceName="MultipleFilesResolved"
                 FormatArguments="jit" />

    <NETSdkError Condition="'@(_JitResolvedPath)'== ''"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="jit" />

    <NETSdkError Condition="'@(_SystemPrivateCoreLibResolvedPath->Count())' &gt; 1"
                 ResourceName="MultipleFilesResolved"
                 FormatArguments="System.Private.CoreLib" />

    <NETSdkError Condition="'@(_SystemPrivateCoreLibResolvedPath)'== ''"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="System.Private.CoreLib" />

    <NETSdkError Condition="'@(_MicrosoftDiaSymReaderNativePath->Count())' &gt; 1"
                 ResourceName="MultipleFilesResolved"
                 FormatArguments="Microsoft.DiaSymReader.Native" />

    <NETSdkError Condition="'@(_MicrosoftDiaSymReaderNativePath)'== ''"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="Microsoft.DiaSymReader.Native" />

    <!-- Get the crossgen and jit path-->
    <PropertyGroup>
      <_CoreclrPath>@(_CoreclrResolvedPath)</_CoreclrPath>
      <JitPath>@(_JitResolvedPath)</JitPath>
      <DiaSymReaderPath>@(_MicrosoftDiaSymReaderNativePath)</DiaSymReaderPath>
      <_CoreclrDir>$([System.IO.Path]::GetDirectoryName($(_CoreclrPath)))</_CoreclrDir>
      <_CoreclrPkgDir>$([System.IO.Path]::Combine($(_CoreclrDir),"..\..\..\"))</_CoreclrPkgDir>
      <CrossgenDir>$([System.IO.Path]::Combine($(_CoreclrPkgDir),"tools"))</CrossgenDir>
      <!-- TODO override with rid specific tools path for x-arch -->
      <Crossgen>$([System.IO.Path]::Combine($(CrossgenDir),"crossgen"))</Crossgen>
      <Crossgen Condition="'$(OS)' == 'Windows_NT'">$([System.IO.Path]::Combine($(CrossgenDir),"crossgen.exe"))</Crossgen>
    </PropertyGroup>

    <NETSdkError Condition="!Exists($(Crossgen))"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="$(Crossgen)" />
  </Target>

  <Target Name="_RunCrossgenOnInputs">
    <PropertyGroup>
      <_CrossGenPlatformAssemblies>@(_CrossGenReferenceAssemblies)</_CrossGenPlatformAssemblies>
    </PropertyGroup>

    <MakeDir Directories="$(_ReadyToRunOutputDir)"/>

    <ItemGroup>
      <CrossGenInvocations Include="$(MSBuildProjectFullPath)">
        <Properties>
          CrossgenExe=$(Crossgen);
          CrossgenInput=%(_CrossGenInputAssemblies.FullPath);
          CrossGenOutput=$(_ReadyToRunOutputDir)/%(FileName)%(Extension);
          CrossgenOutputDirectory=$(_ReadyToRunOutputDir);
          JitPath=$(JitPath);
          DiaSymReaderPath=$(DiaSymReaderPath);
          CrossGenPlatformAssemblies=$(_CrossGenPlatformAssemblies);
          InputAssemblyName=%(FileName)%(Extension)
        </Properties>
      </CrossGenInvocations>
    </ItemGroup>

    <MSBuild Projects="@(CrossGenInvocations)"
             Targets="InvokeCrossGenForReadyToRun" />
  </Target>

  <Target Name="InvokeCrossGenForReadyToRun"
          Inputs="$(CrossGenInput);$(CrossGenPlatformAssemblies)"
          Outputs="$(CrossGenOutput)">
    <ItemGroup>
      <_CrossGenPlatformAssemblies Include="$(CrossGenPlatformAssemblies)" />
      <__CrossGenPlatformAssembliesPaths Include="@(_CrossGenPlatformAssemblies->'%(RootDir)%(Directory)')" /> 
      <_CrossGenPlatformAssembliesPaths Include="@(__CrossGenPlatformAssembliesPaths->Distinct())" />
    </ItemGroup>

    <PropertyGroup>
      <_PathSeparator>$([System.IO.Path]::PathSeparator)</_PathSeparator>
      <_DirectorySeparatorChar>$([System.IO.Path]::DirectorySeparatorChar)</_DirectorySeparatorChar>
      <_CrossGenPlatformAssembliesPathsProperty>@(_CrossGenPlatformAssembliesPaths, '$(_PathSeparator)')</_CrossGenPlatformAssembliesPathsProperty>
      <!-- Remove the trailing slash so it does not get misinterpreted by Exec -->
      <_CrossGenPlatformAssembliesPathsProperty>$(_CrossGenPlatformAssembliesPathsProperty.TrimEnd('\'))</_CrossGenPlatformAssembliesPathsProperty>

      <CrossGenCommand>$(CrossGenExe) -nologo -readytorun -in $(CrossGenInput) -out $(CrossGenOutput) -jitpath $(JitPath) -platform_assemblies_paths &quot;$(_CrossGenPlatformAssembliesPathsProperty)&quot;</CrossGenCommand>
      <CrossGenCreatePdbCommand>$(CrossGenExe) -nologo -createpdb $(CrossgenOutputDirectory) -diasymreaderpath $(DiaSymReaderPath) -platform_assemblies_paths &quot;$(_CrossGenPlatformAssembliesPathsProperty)&quot; $(CrossgenOutputDirectory)$(_DirectorySeparatorChar)$(InputAssemblyName)</CrossGenCreatePdbCommand>
    </PropertyGroup>

    <Message Text="$(CrossGenCommand)" />
    <Exec Command="$(CrossGenCommand)" />

    <Message Text="$(CrossGenCreatePdbCommand) " />
    <Exec Command="$(CrossGenCreatePdbCommand) " />
  </Target>

  <Target Name="_PublishCrossgenOutputs">
    <!-- Rewrite ResolvedAssembliesToPublish to capture any newly-crossgened ResolvedAssembliesToPublish files, preserving metadata. -->
    <ItemGroup>
      <_CrossGenResolvedAssembliesToPublishCandidates Include="@(ResolvedAssembliesToPublish->'$(_ReadyToRunOutputDir)/%(Filename)%(Extension)')" />
      <_CrossGenResolvedAssembliesToPublish Include="@(_CrossGenResolvedAssembliesToPublishCandidates)" Condition="Exists('%(Identity)')" />

      <ResolvedAssembliesToPublish Remove="@(_CrossGenInputAssemblies)" />
      <ResolvedAssembliesToPublish Include="@(_CrossGenResolvedAssembliesToPublish)" />
    </ItemGroup>

    <!-- Rewrite IntermediateAssembly to capture the newly-crossgened IntermediateAssembly, preserving metadata. -->
    <ItemGroup>
      <_CrossGenIntermediateAssemblyCandidates Include="@(IntermediateAssembly->'$(_ReadyToRunOutputDir)/%(Filename)%(Extension)')" />
      <_CrossGenIntermediateAssembly Include="@(_CrossGenIntermediateAssemblyCandidates)" Condition="Exists('%(Identity)')" />

      <IntermediateAssembly Remove="@(_CrossGenInputAssemblies)" />
      <IntermediateAssembly Include="@(_CrossGenIntermediateAssembly)" />
    </ItemGroup>
  </Target>
</Project>