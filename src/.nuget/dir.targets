<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Add path globs specific to native binaries to exclude unnecessary files from packages. -->
  <Choose>
    <When Condition="$(PackageTargetRuntime.StartsWith('win'))" />
    <When Condition="$(PackageTargetRuntime.StartsWith('osx'))">
      <PropertyGroup>
        <LibraryFileExtension>.dylib</LibraryFileExtension>
        <SymbolFileExtension>.dwarf</SymbolFileExtension>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <LibraryFileExtension>.so</LibraryFileExtension>
        <SymbolFileExtension>.dbg</SymbolFileExtension>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup Condition="'$(SymbolFileExtension)' != ''">
    <AdditionalLibPackageExcludes Include="%2A%2A\%2A$(SymbolFileExtension)"/>
  </ItemGroup>
  <ItemGroup Condition="'$(LibraryFileExtension)' != ''">
    <AdditionalSymbolPackageExcludes Include="%2A%2A\%2A$(LibraryFileExtension)"/>
    <AdditionalSymbolPackageExcludes Include="%2A%2A\%2A.a"/>
    <AdditionalSymbolPackageExcludes Include="%2A%2A\%2A.dll"/>
  </ItemGroup>

  <ItemGroup>
    <NativeWithSymbolFile Include="@(NativeSplittableBinary);
                                   @(NativeBinary);
                                   @(ArchitectureSpecificNativeFile);
                                   @(ArchitectureSpecificNativeFileAndSymbol)">
      <TargetPath>runtimes/$(PackageTargetRuntime)/native</TargetPath>
    </NativeWithSymbolFile>
    <!-- Using lib/netstandard1.0 here.  There is no TFM for this since it is a runtime itself. -->
    <NativeWithSymbolFile Include="@(ArchitectureSpecificLibFile)">
      <TargetPath>runtimes/$(PackageTargetRuntime)/lib/netstandard1.0</TargetPath>
    </NativeWithSymbolFile>
    <NativeWithSymbolFile Include="@(ArchitectureSpecificToolFile)">
      <TargetPath>tools</TargetPath>
    </NativeWithSymbolFile>
  </ItemGroup>

  <ItemGroup Condition="'$(HasCrossTargetComponents)'=='true'">
    <NativeWithSymbolFile Include="@(CrossArchitectureSpecificNativeFileAndSymbol)">
      <TargetPath Condition="'%(TargetPath)'==''">runtimes/$(CrossTargetComponentFolder)_$(PackagePlatform)/native</TargetPath>
    </NativeWithSymbolFile>
    <NativeWithSymbolFile Include="@(CrossArchitectureSpecificToolFile)">
      <TargetPath>tools/$(CrossTargetComponentFolder)_$(PackagePlatform)</TargetPath>
    </NativeWithSymbolFile>
  </ItemGroup>

  <ItemGroup >
    <File Include="@(NativeWithSymbolFile)" />
  </ItemGroup>

  <Target Name="CopyLongNamedBinaries" BeforeTargets="CreatePackage">
    <ItemGroup>
      <LongNameFile Include="@(NativeWithSymbolFile)"
                    Condition="'%(NativeWithSymbolFile.LongName)'=='true'" />

      <!-- Only include long-name DAC/SOS in symbol package. -->
      <AdditionalLibPackageExcludes Include="@(LongNameFile -> '%2A%2A\%(Filename)%(Extension)')" />
    </ItemGroup>

    <Copy SourceFiles="%(CopySourcePath)"
          DestinationFiles="@(LongNameFile)" />
  </Target>

  <Target Name="GetSymbolPackageFiles" BeforeTargets="GetPackageFiles">
    <ItemGroup>
      <!-- On Windows, trim ".dll" before adding ".pdb". -->
      <WindowsNativeFile Include="@(NativeWithSymbolFile)"
                         Condition="'%(NativeWithSymbolFile.Extension)'=='.dll' OR '%(NativeWithSymbolFile.Extension)'=='.exe'" />
      <NativeDllFileWithoutExtension Include="@(WindowsNativeFile -> '%(RootDir)%(Directory)PDB\%(Filename)')" />
      <WindowsSymbolFile Include="@(NativeDllFileWithoutExtension -> '%(Identity).pdb')" />

      <!--
        Search for all xplat symbol file extensions on every xplat native binary. Some binaries have
        no ".so" or ".dylib" extension, so we can't tell which convention its symbol files would
        use. On xplat, the symbol extension is simply appended. 
      -->
      <NonWindowsNativeFile Include="@(NativeWithSymbolFile)"
                            Exclude="@(WindowsNativeFile)" />

      <NonWindowsSymbolFile Include="@(NonWindowsNativeFile -> '%(Identity).dbg')" />
      <NonWindowsSymbolFile Include="@(NonWindowsNativeFile -> '%(Identity).dwarf')" />

      <ExistingWindowsSymbolFile Include="@(WindowsSymbolFile)" Condition="Exists('%(Identity)')" />
      <ExistingNonWindowsSymbolFile Include="@(NonWindowsSymbolFile)" Condition="Exists('%(Identity)') AND '$(SkipPackagingXplatSymbols)'!='true'" />

      <File Include="@(ExistingWindowsSymbolFile);@(ExistingNonWindowsSymbolFile)">
        <IsSymbolFile>true</IsSymbolFile>
      </File>
    </ItemGroup>

    <PropertyGroup>
      <NeedsPlaceholderPdb Condition="'@(ExistingNonWindowsSymbolFile)'!='' AND '@(ExistingWindowsSymbolFile)'==''">true</NeedsPlaceholderPdb>
    </PropertyGroup>

    <ItemGroup>
      <File Include="$(MSBuildThisFileDirectory)\_.pdb"
            Condition="'$(NeedsPlaceholderPdb)'=='true' AND '$(PackageTargetRuntime)'!=''">
        <TargetPath>runtimes/$(PackageTargetRuntime)/native</TargetPath>
        <IsSymbolFile>true</IsSymbolFile>
      </File>
    </ItemGroup>
  </Target>

  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory)\.., dir.targets))\dir.targets" />
</Project>
