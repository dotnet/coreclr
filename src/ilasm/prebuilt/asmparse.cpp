/*
 * Created by Microsoft VCBU Internal YACC from "asmparse.y"
 */

#line 2 "asmparse.y"

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//
// File asmparse.y
//
#include "ilasmpch.h"

#include "grammar_before.cpp"


#line 16 "asmparse.y"

#define UNION 1
typedef union  {
        CorRegTypeAttr classAttr;
        CorMethodAttr methAttr;
        CorFieldAttr fieldAttr;
        CorMethodImpl implAttr;
        CorEventAttr  eventAttr;
        CorPropertyAttr propAttr;
        CorPinvokeMap pinvAttr;
        CorDeclSecurity secAct;
        CorFileFlags fileAttr;
        CorAssemblyFlags asmAttr;
        CorAssemblyFlags asmRefAttr;
        CorTypeAttr exptAttr;
        CorManifestResourceFlags manresAttr;
        double*  float64;
        __int64* int64;
        __int32  int32;
        char*    string;
        BinStr*  binstr;
        Labels*  labels;
        Instr*   instr;         // instruction opcode
        NVPair*  pair;
        pTyParList typarlist;
        mdToken token;
        TypeDefDescr* tdd;
        CustomDescr*  cad;
        unsigned short opcode;
} YYSTYPE;
# define ERROR_ 257 
# define BAD_COMMENT_ 258 
# define BAD_LITERAL_ 259 
# define ID 260 
# define DOTTEDNAME 261 
# define QSTRING 262 
# define SQSTRING 263 
# define INT32 264 
# define INT64 265 
# define FLOAT64 266 
# define HEXBYTE 267 
# define TYPEDEF_T 268 
# define TYPEDEF_M 269 
# define TYPEDEF_F 270 
# define TYPEDEF_TS 271 
# define TYPEDEF_MR 272 
# define TYPEDEF_CA 273 
# define DCOLON 274 
# define ELIPSIS 275 
# define VOID_ 276 
# define BOOL_ 277 
# define CHAR_ 278 
# define UNSIGNED_ 279 
# define INT_ 280 
# define INT8_ 281 
# define INT16_ 282 
# define INT32_ 283 
# define INT64_ 284 
# define FLOAT_ 285 
# define FLOAT32_ 286 
# define FLOAT64_ 287 
# define BYTEARRAY_ 288 
# define UINT_ 289 
# define UINT8_ 290 
# define UINT16_ 291 
# define UINT32_ 292 
# define UINT64_ 293 
# define FLAGS_ 294 
# define CALLCONV_ 295 
# define MDTOKEN_ 296 
# define OBJECT_ 297 
# define STRING_ 298 
# define NULLREF_ 299 
# define DEFAULT_ 300 
# define CDECL_ 301 
# define VARARG_ 302 
# define STDCALL_ 303 
# define THISCALL_ 304 
# define FASTCALL_ 305 
# define CLASS_ 306 
# define TYPEDREF_ 307 
# define UNMANAGED_ 308 
# define FINALLY_ 309 
# define HANDLER_ 310 
# define CATCH_ 311 
# define FILTER_ 312 
# define FAULT_ 313 
# define EXTENDS_ 314 
# define IMPLEMENTS_ 315 
# define TO_ 316 
# define AT_ 317 
# define TLS_ 318 
# define TRUE_ 319 
# define FALSE_ 320 
# define _INTERFACEIMPL 321 
# define VALUE_ 322 
# define VALUETYPE_ 323 
# define NATIVE_ 324 
# define INSTANCE_ 325 
# define SPECIALNAME_ 326 
# define FORWARDER_ 327 
# define STATIC_ 328 
# define PUBLIC_ 329 
# define PRIVATE_ 330 
# define FAMILY_ 331 
# define FINAL_ 332 
# define SYNCHRONIZED_ 333 
# define INTERFACE_ 334 
# define SEALED_ 335 
# define NESTED_ 336 
# define ABSTRACT_ 337 
# define AUTO_ 338 
# define SEQUENTIAL_ 339 
# define EXPLICIT_ 340 
# define ANSI_ 341 
# define UNICODE_ 342 
# define AUTOCHAR_ 343 
# define UTF8_ 344 
# define IMPORT_ 345 
# define ENUM_ 346 
# define VIRTUAL_ 347 
# define NOINLINING_ 348 
# define AGGRESSIVEINLINING_ 349 
# define NOOPTIMIZATION_ 350 
# define UNMANAGEDEXP_ 351 
# define BEFOREFIELDINIT_ 352 
# define STRICT_ 353 
# define RETARGETABLE_ 354 
# define WINDOWSRUNTIME_ 355 
# define NOPLATFORM_ 356 
# define METHOD_ 357 
# define FIELD_ 358 
# define PINNED_ 359 
# define MODREQ_ 360 
# define MODOPT_ 361 
# define SERIALIZABLE_ 362 
# define PROPERTY_ 363 
# define TYPE_ 364 
# define ASSEMBLY_ 365 
# define FAMANDASSEM_ 366 
# define FAMORASSEM_ 367 
# define PRIVATESCOPE_ 368 
# define HIDEBYSIG_ 369 
# define NEWSLOT_ 370 
# define RTSPECIALNAME_ 371 
# define PINVOKEIMPL_ 372 
# define _CTOR 373 
# define _CCTOR 374 
# define LITERAL_ 375 
# define NOTSERIALIZED_ 376 
# define INITONLY_ 377 
# define REQSECOBJ_ 378 
# define CIL_ 379 
# define OPTIL_ 380 
# define MANAGED_ 381 
# define FORWARDREF_ 382 
# define PRESERVESIG_ 383 
# define RUNTIME_ 384 
# define INTERNALCALL_ 385 
# define _IMPORT 386 
# define NOMANGLE_ 387 
# define LASTERR_ 388 
# define WINAPI_ 389 
# define AS_ 390 
# define BESTFIT_ 391 
# define ON_ 392 
# define OFF_ 393 
# define CHARMAPERROR_ 394 
# define INSTR_NONE 395 
# define INSTR_VAR 396 
# define INSTR_I 397 
# define INSTR_I8 398 
# define INSTR_R 399 
# define INSTR_BRTARGET 400 
# define INSTR_METHOD 401 
# define INSTR_FIELD 402 
# define INSTR_TYPE 403 
# define INSTR_STRING 404 
# define INSTR_SIG 405 
# define INSTR_TOK 406 
# define INSTR_SWITCH 407 
# define _CLASS 408 
# define _NAMESPACE 409 
# define _METHOD 410 
# define _FIELD 411 
# define _DATA 412 
# define _THIS 413 
# define _BASE 414 
# define _NESTER 415 
# define _EMITBYTE 416 
# define _TRY 417 
# define _MAXSTACK 418 
# define _LOCALS 419 
# define _ENTRYPOINT 420 
# define _ZEROINIT 421 
# define _EVENT 422 
# define _ADDON 423 
# define _REMOVEON 424 
# define _FIRE 425 
# define _OTHER 426 
# define _PROPERTY 427 
# define _SET 428 
# define _GET 429 
# define _PERMISSION 430 
# define _PERMISSIONSET 431 
# define REQUEST_ 432 
# define DEMAND_ 433 
# define ASSERT_ 434 
# define DENY_ 435 
# define PERMITONLY_ 436 
# define LINKCHECK_ 437 
# define INHERITCHECK_ 438 
# define REQMIN_ 439 
# define REQOPT_ 440 
# define REQREFUSE_ 441 
# define PREJITGRANT_ 442 
# define PREJITDENY_ 443 
# define NONCASDEMAND_ 444 
# define NONCASLINKDEMAND_ 445 
# define NONCASINHERITANCE_ 446 
# define _LINE 447 
# define P_LINE 448 
# define _LANGUAGE 449 
# define _CUSTOM 450 
# define INIT_ 451 
# define _SIZE 452 
# define _PACK 453 
# define _VTABLE 454 
# define _VTFIXUP 455 
# define FROMUNMANAGED_ 456 
# define CALLMOSTDERIVED_ 457 
# define _VTENTRY 458 
# define RETAINAPPDOMAIN_ 459 
# define _FILE 460 
# define NOMETADATA_ 461 
# define _HASH 462 
# define _ASSEMBLY 463 
# define _PUBLICKEY 464 
# define _PUBLICKEYTOKEN 465 
# define ALGORITHM_ 466 
# define _VER 467 
# define _LOCALE 468 
# define EXTERN_ 469 
# define _MRESOURCE 470 
# define _MODULE 471 
# define _EXPORT 472 
# define LEGACY_ 473 
# define LIBRARY_ 474 
# define X86_ 475 
# define IA64_ 476 
# define AMD64_ 477 
# define ARM_ 478 
# define MARSHAL_ 479 
# define CUSTOM_ 480 
# define SYSSTRING_ 481 
# define FIXED_ 482 
# define VARIANT_ 483 
# define CURRENCY_ 484 
# define SYSCHAR_ 485 
# define DECIMAL_ 486 
# define DATE_ 487 
# define BSTR_ 488 
# define TBSTR_ 489 
# define LPSTR_ 490 
# define LPWSTR_ 491 
# define LPTSTR_ 492 
# define OBJECTREF_ 493 
# define IUNKNOWN_ 494 
# define IDISPATCH_ 495 
# define STRUCT_ 496 
# define SAFEARRAY_ 497 
# define BYVALSTR_ 498 
# define LPVOID_ 499 
# define ANY_ 500 
# define ARRAY_ 501 
# define LPSTRUCT_ 502 
# define IIDPARAM_ 503 
# define IN_ 504 
# define OUT_ 505 
# define OPT_ 506 
# define PARAM_ 507 
# define _OVERRIDE 508 
# define WITH_ 509 
# define NULL_ 510 
# define HRESULT_ 511 
# define CARRAY_ 512 
# define USERDEFINED_ 513 
# define RECORD_ 514 
# define FILETIME_ 515 
# define BLOB_ 516 
# define STREAM_ 517 
# define STORAGE_ 518 
# define STREAMED_OBJECT_ 519 
# define STORED_OBJECT_ 520 
# define BLOB_OBJECT_ 521 
# define CF_ 522 
# define CLSID_ 523 
# define VECTOR_ 524 
# define _SUBSYSTEM 525 
# define _CORFLAGS 526 
# define ALIGNMENT_ 527 
# define _IMAGEBASE 528 
# define _STACKRESERVE 529 
# define _TYPEDEF 530 
# define _TEMPLATE 531 
# define _TYPELIST 532 
# define _MSCORLIB 533 
# define P_DEFINE 534 
# define P_UNDEF 535 
# define P_IFDEF 536 
# define P_IFNDEF 537 
# define P_ELSE 538 
# define P_ENDIF 539 
# define P_INCLUDE 540 
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
YYSTYPE yylval, yyval;
#ifndef YYFARDATA
#define	YYFARDATA	/*nothing*/
#endif
#if ! defined YYSTATIC
#define	YYSTATIC	/*nothing*/
#endif
#if ! defined YYCONST
#define	YYCONST	/*nothing*/
#endif
#ifndef	YYACT
#define	YYACT	yyact
#endif
#ifndef	YYPACT
#define	YYPACT	yypact
#endif
#ifndef	YYPGO
#define	YYPGO	yypgo
#endif
#ifndef	YYR1
#define	YYR1	yyr1
#endif
#ifndef	YYR2
#define	YYR2	yyr2
#endif
#ifndef	YYCHK
#define	YYCHK	yychk
#endif
#ifndef	YYDEF
#define	YYDEF	yydef
#endif
#ifndef	YYV
#define	YYV	yyv
#endif
#ifndef	YYS
#define	YYS	yys
#endif
#ifndef	YYLOCAL
#define	YYLOCAL
#endif
#ifndef YYR_T
#define	YYR_T	int
#endif
typedef	YYR_T	yyr_t;
#ifndef YYEXIND_T
#define	YYEXIND_T	unsigned int
#endif
typedef	YYEXIND_T	yyexind_t;
#ifndef YYOPTTIME
#define	YYOPTTIME	0
#endif
# define YYERRCODE 256

#line 2053 "asmparse.y"


#include "grammar_after.cpp"
YYSTATIC YYCONST short yyexca[] = {
#if !(YYOPTTIME)
-1, 1,
#endif
	0, -1,
	-2, 0,
#if !(YYOPTTIME)
-1, 453,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 622,
#endif
	274, 551,
	47, 551,
	-2, 228,
#if !(YYOPTTIME)
-1, 643,
#endif
	40, 309,
	60, 309,
	-2, 551,
#if !(YYOPTTIME)
-1, 664,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 687,
#endif
	274, 551,
	47, 551,
	-2, 512,
#if !(YYOPTTIME)
-1, 804,
#endif
	123, 233,
	-2, 551,
#if !(YYOPTTIME)
-1, 829,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 955,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 988,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 989,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1310,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1311,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1317,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1324,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1449,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1481,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1547,
#endif
	41, 534,
	-2, 310,
#if !(YYOPTTIME)
-1, 1564,
#endif
	41, 534,
	-2, 310,

};

# define YYNPROD 840
#if YYOPTTIME
YYSTATIC YYCONST yyexind_t yyexcaind[] = {
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    4,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    8,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   14,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   24,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   30,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   38,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   42,   46,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   50,   54,    0,    0,    0,    0,    0,   58,    0,    0,
    0,    0,    0,    0,   62,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   70,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   74,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   78
};
#endif
# define YYLAST 4060

YYSTATIC YYCONST short YYFARDATA YYACT[] = {
  700, 1400, 1123,  191,  275, 1469,  659, 1468,  273, 1467,
 1026, 1466,  880,  699,  966,  965,  785,  640,  415,  726,
   73,   75,  221,  754,   26,  879,  968,  625, 1505,  536,
  150,  757,  789,  106,  752,  478,  776,  110,  190, 1136,
 1401, 1067,  107,  691,  853,  604,  661,  153,  214,  777,
    7,   78,   81,  136,  262,    6,  204,  137,  599,   44,
  188,  217,  674,   17,  301,    5,  176,  516,    3, 1244,
   86,  985,   76, 1552, 1196, 1241,  133,  264, 1240, 1115,
 1059, 1113,  219, 1114,   24,  581,  218,   74,   10,   88,
   87,  268,   89,  300,  278,   74,  716,   85,  202,  203,
 1060,  713,  113,  272,  112,   98,   56,  115,  139,  697,
  322,  520,   88,   87,  462,   89,  178,  179,  180,  181,
  933,  934, 1242,  453, 1017,  277,   68,  673,  376,  537,
  591,  225,  305, 1230, 1231,  376,  343, 1228, 1229,  216,
  338, 1023,  361,  360,  265,  277,  376,  368,  359,  366,
  362,  358,  655,  364,  932,  654,  373,  277,  345,  185,
  461, 1556, 1128, 1129,  379, 1029,   98,  745,  746,  747,
  352,   56, 1003, 1028,  353,  696,  695, 1521,  327,  597,
  348,  339,  271,  342,  365,   84,  220,  277,   18,  363,
  277,  779,  357,  780,  352,  346,  417,  258,  353,  418,
  419,  480,  387,  748,  749,  750,  105,  371,  370,  451,
 1266,  452,  615,  369, 1061,  662,  357,  372,   74,  374,
  186,  481,  482,  351,  457,  764,  663,  443,   26,  600,
 1489,  473,  475, 1561,  307, 1480,  484,  502, 1322, 1321,
 1320, 1319,  487,  458,  495,  501, 1265,  351,  269,   74,
  388,  480, 1316,  434,    7,  411, 1202,  491,  826,  493,
  433,  476,  479,  492,  798,  788,  435,   17,  483,  774,
  429,  481,  482,  430,  667,  486,  267,  268, 1236,  108,
  544,  321,   74,  512,  512,  529,  535,  442,   24, 1542,
  541,  436,   10,  935,  936, 1546,  937,  154,  116, 1419,
  711,  474,   88,   87,  549,   89,  485,  499, 1545,  572,
   56,  494,  192,  266,  575,  500,  576,  701,  577, 1353,
   46, 1337,  505,   80,   79,  579,  580,  855,  856,  857,
  470, 1118,  468,  472,  471,  310,  312,  314,  316,  318,
  574,  542,  571, 1543,  545,  573,   88,   87, 1544,   89,
   74,  949,  601,   88,   87,  421,   89,  422,  423,  424,
   88,  600,  606,   89,   88,   87,  595,   89,  613, 1120,
  498,  612,  611,  198, 1512,  569, 1012,  135,  199,  348,
  200,  477,  177,  756,  675,   46,  201,  624,  597,  177,
  742,  437,   18, 1235,  192,  182,  348, 1393,  621, 1130,
  177,  375, 1520,  195,  582,  583, 1504,  506,  964,   88,
   87,  945,   89,  566,  703,  641,  642,  596,  196,  352,
  321,  644,  347,  353,  538,  607,  608,  609,  610,   56,
 1515,  152, 1254,  460,  614,  414,  639,  635,  154,  649,
  650,  357, 1132, 1233,  619,  620,  622,  511,  511,  528,
  534,  755, 1491,   56,  781, 1128, 1129,  665,  878,  651,
  652,  848,  671,  668,   74, 1514,  627,  628,  629, 1452,
  682,  782,  351, 1007,  648, 1005, 1006,  860,  340,  341,
   56, 1339, 1340, 1341,  643,  192,  488,  679, 1490,  744,
  154,  354,  355,  356,   61,   62,   47,   63,  693,  537,
  690,  588,  630,  631,  632,  546,  686,   80,   79,  480,
 1249, 1245, 1246, 1247, 1248,  354,  355,  356,   74, 1416,
  647,  783,  350,  375,   46, 1513,  712,  670,  689,  481,
  482,   74,  680,  702,  454, 1347,   56,  646,   82,   74,
  681,  698,   41,   43,  704,  539, 1343,  527,  724,  721,
  706,  722,  707, 1510,  687, 1243,  645,  543,   72,   74,
   71,  225,   63,  325,  543,   70,   80,   79,  692,  216,
  600,   74,  725,  593,  504,  377,  513,  324,  672,  508,
  509,   49,   50,   51,   52,   53,   54,   55, 1119,  658,
 1508,  710,  731,  676,  677,  678,  367,   80,   79,  715,
   88,   87,  530,  948,  717,   80,   79,  480,  155,  741,
  720,  759, 1506,  198,   74,  348,  727,   69,  199,   67,
  200,  765,  766, 1501,  601,   74,  201,  481,  482,   80,
   79,  639,  730,  800,  784,  854,  177,  258,   88,   98,
   66,   89,   74,  195,  809,  277,   49,   50,   51,   52,
   53,   54,   55,   74, 1441,  751,  592,  799,  196,  525,
 1329,  807,  111, 1439,  770,  771,  772,  816,  813,  517,
  820,  814, 1437,  819,  802,  803,  823,  496,  352,  643,
  829,  790,  353,  763,  824,  817, 1435, 1418,   74,  808,
  542, 1066, 1062, 1063, 1064, 1065, 1409,  834,  835,  787,
  357,   63,  961,  794,   88,   87,  797,   89,  225,  277,
 1328,  524,  827,  825,  526,  847,  216, 1174, 1173, 1172,
 1171,  801, 1408,  804,  858,  810, 1406, 1392, 1143,   56,
  924,  351,  762, 1144,  818,   88,   87,  851,   89,   74,
  354,  355,  356,  938,  939,  861,  822, 1182,   74,  152,
   46,  850, 1143,  156,  157,  158,  852, 1144, 1390,  845,
  382,  383,  384,  385,  601,  951,  833,  770,  277,  362,
  637, 1380,  944,  954,   88,  337,   74,   89,   74, 1143,
  846,  326,  323,  849, 1144,   49,   50,   51,   52,   53,
   54,   55, 1378,  189, 1376,  514,  606,   88,   87, 1374,
   89, 1015,   88,   87, 1014,   89,  987,   88,   87,  967,
   89,  940, 1019,   74, 1372,  773, 1013,  443, 1002, 1011,
  529,  956,  950,   88,   87, 1370,   89,   74,  962, 1368,
 1181, 1366,  693,  693, 1364,   74, 1034,  991, 1024, 1498,
 1361,  957,  277,  434,  960, 1358,   80,   79,  480, 1039,
  433, 1037,  277,  636, 1356,  818,  435, 1352, 1021, 1020,
  429,  348, 1016,  430,  586,  818,  585,  584,  481,  482,
 1018, 1041,  375,  587, 1336, 1035, 1036,  442, 1001, 1010,
 1314,  436,  999, 1009, 1047,   56,  276,  192, 1052,  719,
 1198, 1302,  352, 1032, 1046, 1045,  769,   56, 1044,  616,
  956, 1043,  692,  692,   49,   50,   51,   52,   53,   54,
   55,  669, 1025, 1027,  357,  821,  815,  734,   88,   87,
  818,   89,   88,   87, 1057,   89,  155,   63,   49,   50,
   51,   52,   53,   54,   55,  145,  618,  532,  617,  578,
  533,  565, 1303,   46, 1124,  351,  990, 1300, 1055, 1053,
 1239, 1069, 1127, 1070,  177,   49,   50,   51,   52,   53,
   54,   55, 1134,  993, 1348,  759, 1238, 1126,  926,  348,
  927,  928,  929,  930,  931,  308, 1298, 1121, 1131,  456,
 1140,  437, 1000, 1008,  528,  109,   92, 1296, 1142, 1177,
 1175, 1187,  348, 1396, 1188, 1185, 1186, 1056, 1301,  354,
  355,  356,  958, 1117,  767, 1169,   88,   87,  519,   89,
 1180,   49,   50,   51,   52,   53,   54,   55, 1334, 1179,
 1183,  589,  193, 1167,  152,  194, 1135, 1299, 1184,    1,
 1221, 1133,  591, 1197, 1189, 1190, 1191, 1192, 1297, 1165,
 1178, 1176,  590,  277, 1193, 1194, 1195, 1163,  198,  177,
  943, 1205, 1232,  199, 1204,  200, 1170, 1234, 1417,  986,
   56,  201,   74,  947,  480,  709,  708, 1227, 1226, 1225,
 1224,  156,  157,  158, 1168,  705,  145,  634,  195, 1161,
   88,   87, 1237,   89,  481,  482, 1199,  413, 1159, 1157,
 1166, 1155, 1200,  196, 1201, 1153,  187,  205, 1164, 1220,
  328,  329,  330,  984,  983,  982, 1402,  977,  976,  975,
  974,   46,  972,  973,  105,  277,  981,  980,  979,  978,
   63, 1250, 1151,  971,  969,  332,  522, 1149,  145,  626,
 1162,  626,  520,  791,  513,  521, 1414,  508,  509, 1160,
 1158, 1413, 1156, 1412, 1147,  378, 1154, 1267, 1253, 1271,
 1403, 1273, 1275, 1276, 1223, 1279, 1269, 1281, 1282, 1283,
 1284, 1285, 1286, 1287, 1272, 1289, 1290, 1291, 1292, 1293,
 1294, 1295, 1261, 1152, 1257, 1256, 1304, 1305, 1150, 1307,
 1306, 1145, 1278,  317, 1280,   97, 1050, 1274, 1049, 1277,
  970,  315, 1288,   88,   87, 1148,   89,  837, 1309,  313,
 1315,  155,  743,  666,   49,   50,   51,   52,   53,   54,
   55,  455, 1317,  354,  355,  356,  311,  309,  277,  331,
 1318,  333,  334,  335,  336, 1137,  306,  277,  277,  177,
   45, 1259, 1146,  416,  308,  946, 1330, 1323,  942, 1332,
 1333, 1554,  308,  591,  192,  192,  192,  192,   56, 1033,
  308,  591, 1338, 1342,  192,  192,  192, 1454,  832,  591,
 1453,  995,  996,  997,  998, 1335,  192,  308,  308,  818,
 1344,  591, 1541, 1349,   46,  831, 1142,  308, 1345,  140,
  193,  812,  138,  194,  768,   61,   62,   47,   63,  761,
 1492,  591, 1331,  925,  718,  591,  591,  527, 1382, 1383,
 1384, 1385, 1386, 1387, 1388,  117,  198,  177,  567,  349,
  303,  199,  258,  200,  793, 1566, 1557, 1394, 1395,  201,
 1397, 1555, 1548, 1525, 1399, 1381, 1488, 1346, 1487, 1486,
 1405, 1404, 1456, 1451, 1398, 1410,  195, 1448, 1445, 1444,
  152, 1440,   56, 1438, 1436, 1434,  156,  157,  158,  134,
 1421,  196,  152, 1415, 1411, 1407, 1391, 1389, 1379, 1377,
   49,   50,   51,   52,   53,   54,   55, 1142, 1375, 1326,
 1373, 1371,   49,   50,   51,   52,   53,   54,   55, 1369,
 1367, 1365, 1363,  818,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,  128,  129,  130,  131,  132, 1362,
 1447, 1360, 1359, 1357, 1355, 1354,  258, 1351,  694,  525,
 1350, 1327, 1325, 1457, 1458, 1459, 1446, 1450, 1313, 1312,
 1308, 1258, 1455,  352, 1255,   96, 1564,  353,  104,  103,
  102,  101, 1460,   99,  100,  105, 1222, 1116, 1054, 1473,
 1472, 1471, 1470, 1040,  152,  357, 1038, 1031, 1030,   88,
 1478,   63,   89, 1022,  963,  953, 1483,  952,  941, 1482,
  859,  524,   46,  842,  526, 1500,  841, 1549, 1507, 1509,
 1511, 1495, 1507, 1509, 1511,  839,  351, 1485, 1497, 1509,
  836,  830, 1522, 1519, 1518, 1517, 1516,  828, 1524,  811,
  792,  775,  739,  738, 1503,  737,  736,  735, 1523,  733,
 1499, 1502,  732,  685,   56,  638,  570,  426,  425,   88,
   87,  344,   89,  320,  531, 1547, 1481,  155, 1507, 1509,
 1511,   88,   87,  348,   89,   74, 1477, 1476, 1475,  155,
 1474, 1449, 1443,   56, 1442,   49,   50,   51,   52,   53,
   54,   55, 1433,   88, 1125,  177,   89,  818, 1493, 1526,
 1553, 1432, 1431, 1430, 1551, 1494,   46,  177, 1429,   56,
 1558, 1428, 1427, 1559, 1563, 1550, 1426, 1425,  258, 1424,
  206, 1565, 1423, 1422, 1420, 1302, 1300, 1298, 1560, 1562,
 1128, 1129, 1296, 1324,  245,  246,  247,  248,  249,  250,
  251,  252,  253,  254,  255,  256,  257, 1177, 1175,  450,
 1169,   59, 1167, 1165, 1163,  208,  259,  210,  228,  212,
  213, 1161, 1159,   88,   87, 1157,   89, 1155, 1153,   41,
   43,  155,  876, 1151, 1311, 1310, 1252, 1251,  818,  870,
 1068,  871,  872,  873, 1058, 1051,   61,   62,   47,   63,
 1042,  989,  988,  955,  844,   88,   87,  223,   89,  177,
  843,  840, 1270,  838,  729,  728,  714,  688,  684, 1268,
  683,  222,  156,  157,  158,  664,  633,  603,  602,  864,
  865,  866,  867,  594,  156,  157,  158,  568,  245,  246,
  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
  257,  548,  547,  497,  420,   59,  226,  224,  412,  208,
  259,  210,  228,  212,  213,   88,   56,  386,   89,  319,
  304,  523,  515,   41,   43,  863,  868,  869,   46,  874,
 1540,  518,  875,   49,   50,   51,   52,   53,   54,   55,
   61,   62,   47,   63, 1531,  302,  510,  507,  503,   36,
  184,  223,   93,   33,  354,  355,  356,   46,   97,  469,
 1527,  467,  466,  465,  464,  222,  244,  463,   56, 1536,
  227,  243,  215,  209,  207,  211,  156,  157,  158,   95,
  881,   31,  992,   46, 1537, 1538, 1539, 1004,  994,  440,
  796,  432,  795,  431,  428,  540,  270,   83, 1048,   29,
  226,  224,   57,   34,   25,   16,  263,   15,   14,  261,
   13,  260,   12,   11,    9, 1528, 1529, 1530, 1532, 1533,
 1534, 1535,    8,    4,    2,  234,  242,   49,   50,   51,
   52,   53,   54,   55,  427,  241,  240,  239,  238,  237,
  236,  235,  233,   94,  232,  231,  230,  229,  114,   77,
  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
  255,  256,  257,   42,  753,  657,  656,   59, 1484,  299,
   90,  208,  259,  210,  228,  212,  213,  183, 1141,  758,
  786, 1260,  959, 1139, 1138,   41,   43,  605, 1463, 1462,
 1461, 1479,   38,   30,   58,   32,   59, 1465, 1464, 1203,
 1122,  598,   61,   62,   47,   63,  660,  778,   91, 1071,
  740,   65,   64,  223,   41,   43,  197,  877,   38,   30,
   58,   32,   59,    0,    0,    0,    0,  222,    0,    0,
   46,   61,   62,   47,   63, 1088,    0,    0,   60,   35,
   41,   43,    0,    0,   21,    0,    0,   37,    0,    0,
    0,    0,    0,    0,   39,   40,    0,   61,   62,   47,
   63,    0,  226,  224,   60,   35,    0,    0,    0,    0,
   21,    0,    0,   37,    0,    0,    0,    0,  445,    0,
   39,   40,   46,    0,    0,    0,    0,    0,    0,   49,
   50,   51,   52,   53,   54,   55,    0,    0,   96,    0,
    0,  104,  103,  102,  101,    0,   99,  100,  105,   19,
   20,    0,   22,   23,   48,    0,   27,   28,   49,   50,
   51,   52,   53,   54,   55,  862,    0,    0,    0,    0,
  445,    0,    0,    0,    0,   19,   20,    0,   22,   23,
   48,    0,   27,   28,   49,   50,   51,   52,   53,   54,
   55,  876,    0,    0,    0,    0,    0,    0,  870,    0,
  871,  872,  873,    0,    0,  449,  923,   58,   32,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  446,
    0,    0,    0,    0,  447,    0,    0,   41,   43,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  864,  865,
  866,  867,    0,    0,   61,   62,   47,   63,    0,  438,
  439,    0,    0,    0,    0,    0,    0,  449,    0,   58,
   32,   59,    0,    0,    0,    0,    0,    0,    0,  448,
    0,  446,    0,    0,    0,    0,  447,    0,    0,   41,
   43,    0,    0,    0,  863,  868,  869,    0,  874,    0,
 1099,  875,    0,    0,    0,    0,   61,   62,   47,   63,
    0,  438,  439,    0,  444,  441,    0,    0,    0, 1075,
 1076,    0, 1083, 1097, 1077, 1078, 1079, 1080,    0, 1081,
 1082,  448, 1098, 1084, 1085, 1086, 1087,    0,    0,    0,
    0,   49,   50,   51,   52,   53,   54,   55,    0,    0,
  895,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  922,    0,  444,  441,    0,  887,
  888,    0,  896,  913,  889,  890,  891,  892,    0,  893,
  894,    0,  914,  897,  898,  899,  900,  895,    0,    0,
    0,  146,    0,   49,   50,   51,   52,   53,   54,   55,
    0,  922,    0,    0,    0,    0,  887,  888,    0,  896,
  913,  889,  890,  891,  892,    0,  893,  894,    0,  914,
  897,  898,  899,  900,    0,    0,    0,  911,  876,  915,
    0,    0,  348,    0,  917,  870,    0,  871,  872,  873,
    0,    0,    0,    0,    0,    0,    0, 1219, 1218, 1213,
  919, 1212, 1211, 1210, 1209, 1496, 1207, 1208,  105,    0,
 1217, 1216, 1215, 1214,  911,    0,  915,    0,    0, 1206,
    0,  917,    0,    0,    0,  864,  865,  866,  867,    0,
    0,    0,    0,  920,  984,  983,  982,  919,  977,  976,
  975,  974,    0,  972,  973,  105,    0,  981,  980,  979,
  978,    0,    0,    0,  971,  969,    0,    0,    0,  146,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  920,  863,  868,  869,    0,  874, 1073, 1074,  875, 1089,
 1090, 1091,    0, 1092, 1093,    0,    0, 1094, 1095,    0,
 1096,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1072, 1100, 1101, 1102, 1103, 1104, 1105,
 1106, 1107, 1108, 1109, 1110, 1111, 1112,  152,    0,    0,
    0,  970,    0,  882,    0,  883,  884,  885,  886,  901,
  902,  903,  918,  904,  905,  906,  907,  908,  909,  910,
  912,  916,    0,    0,    0,  921,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  882,    0,  883,  884,  885,  886,  901,  902,  903,  918,
  904,  905,  906,  907,  908,  909,  910,  912,  916,  175,
    0,    0,  921,  151,  148,  163,  161,  170,    0,  164,
  165,  166,  167,    0,  168,  169,    0,    0,  171,  172,
  173,  174,  564,    0,    0,  142,  162,    0,  146,    0,
    0,    0,    0,  352,  141,  147,    0,  769,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  143,  144,  149,    0,  556,  357,  550,  551,  552,  553,
    0,  984,  983,  982,    0,  977,  976,  975,  974,    0,
  972,  973,  105,    0,  981,  980,  979,  978,    0,    0,
    0,  971,  969,    0,    0,  160,  623,    0,    0,    0,
    0,    0,    0,  558,  559,  560,  561,    0,    0,  555,
    0,    0,    0,  562,  563,  554,   88,   87,    0,   89,
    0,    0,    0,    0,  155,    0,    0,  175,    0,    0,
    0,  151,  148,  163,  161,  170,    0,  164,  165,  166,
  167,    0,  168,  169,    0,    0,  171,  172,  173,  174,
    0,    0,  177,  142,  162,    0,   88,   87,  970,   89,
    0,    0,  141,  147,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  143,  144,
  149,    0,    0,    0,    0,  175,    0,    0,    0,    0,
  410,  163,  161,  170,  146,  164,  165,  166,  167,  352,
  168,  169,    0,  353,  171,  172,  173,  174,    0,    0,
    0, 1263,  162,  160,  159,    0,    0,  557,  391,    0,
    0,  357,  408,    0,    0,  389,  390,    0,    0,    0,
  393,  394,  406,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  392,    0,    0,    0,    0,    0,  407,    0,
    0,  405,  623,    0,    0,    0,    0,    0,  404,    0,
 1264,    0,    0,    0,    0,   88,   87,  409,   89,  156,
  157,  158,    0,  155,    0,    0,  175,    0, 1262,    0,
  151,  148,  163,  161,  170,    0,  164,  165,  166,  167,
    0,  168,  169,    0,    0,  171,  172,  173,  174,    0,
    0,  177,  142,  162,    0,    0,   63,    0,    0,    0,
    0,  141,  147,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,  144,  149,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  146,    0,    0,    0,    0,  352,    0,    0,
    0,  353,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  160,    0,  354,  355,  356,    0,    0,  357,
    0,    0,    0,    0,    0,    0,    0,    0,  641,  642,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  623,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  156,  157,
  158,   88,   87,    0,   89,    0,    0,    0,    0,  155,
    0,    0,  175,    0,    0,    0,  151,  148,  163,  161,
  170,    0,  164,  165,  166,  167,  146,  168,  169,    0,
    0,  171,  172,  173,  174,    0,    0,  177,  142,  162,
    0,    0,    0,    0,    0,    0,    0,  141,  147,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  143,  144,  149,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  274,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  146,    0,    0,  160,    0,
  354,  355,  356,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  641,  642,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
   87,    0,   89,  274,  156,  157,  158,  155,    0,    0,
  175,    0,    0,    0,  151,  148,  163,  161,  170,    0,
  164,  165,  166,  167,    0,  168,  169,    0,    0,  171,
  172,  173,  174,  146,    0,  177,  142,  162,    0,    0,
    0,    0,    0,    0,    0,  141,  147,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  143,  144,  149,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  274,    0,    0,    0,    0,  160,    0,  354,  355,
  356,  146,    0,   88,   87,    0,   89,    0,    0,    0,
    0,  155,    0,    0,  175,    0,    0,    0,  151,  148,
  163,  161,  170,    0,  164,  165,  166,  167,    0,  168,
  169,    0,    0,  171,  172,  173,  174,    0,    0,  177,
  142,  162,    0,    0,    0,    0,    0,    0,    0,  141,
  147,    0,  156,  157,  158,    0,    0,    0,    0,  274,
    0,    0,    0,    0,    0,  143,  144,  149,    0,  806,
    0,    0,   88,   87,    0,   89,    0,    0,    0,    0,
  155,    0,    0,  175,    0,    0,    0,  151,  148,  163,
  161,  170,    0,  164,  165,  166,  167,    0,  168,  169,
  160,  146,  171,  172,  173,  174,    0,    0,  177,  142,
  162,    0,    0,    0,  805,    0,    0,    0,  141,  147,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  143,  144,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  156,  157,  158,  274,
   88,   87,    0,   89,    0,    0,    0,    0,  155,  160,
  159,  175,    0,    0,    0,  151,  148,  163,  161,  170,
    0,  164,  165,  166,  167,    0,  168,  169,    0,    0,
  171,  172,  173,  174,    0,    0,  177,  142,  162,    0,
    0,    0,    0,    0,  146,    0,  141,  147,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  143,  144,  149,  156,  157,  158,   88,   87,
    0,   89,    0,    0,    0,    0,  155,    0,    0,  175,
    0,    0,    0,  151,  148,  163,  161,  170,    0,  164,
  165,  166,  167,    0,  168,  169,    0,  160,  171,  172,
  173,  174,  274,    0,  177,  142,  162,    0,    0,    0,
    0,    0,    0,    0,  760,  147,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  143,  144,  149,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  156,  157,  158,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  160,    0,    0,   88,   87,
    0,   89,    0,    0,    0,    0,  155,    0,    0,  175,
    0,    0,    0,  151,  148,  163,  161,  170,    0,  164,
  165,  166,  167,  146,  168,  169,    0,    0,  171,  172,
  173,  174,    0,    0,  177,  142,  162,    0,    0,    0,
    0,    0,    0,    0,  141,  147,    0,    0,    0,    0,
    0,  156,  157,  158,    0,    0,    0,    0,    0,    0,
  143,  144,  149,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  146,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  653,    0,    0,    0,    0,
    0,   88,   87,    0,   89,    0,    0,    0,    0,  155,
    0,    0,  175,    0,    0,    0,  151,  148,  163,  161,
  170,    0,  164,  165,  166,  167,    0,  168,  169,    0,
    0,  171,  172,  173,  174,  146,    0,  177,  142,  162,
    0,    0,    0,    0,    0,    0,    0,  141,  147,    0,
    0,  156,  157,  158,  297,  198,    0,    0,    0,    0,
  199,    0,  200,  143,  144,  149,    0,    0,  201,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  195,  284,    0,  279,  280,
  281,  282,  283,  990,    0,    0,    0,  287,  459,    0,
  196,    0,    0,    0,    0,    0,    0,  285,    0,    0,
    0,  295,  146,  286,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  288,  289,  290,  291,  292,
  293,  294,  298,    0,    0,    0,    0,    0,  296,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  156,  157,  158,    0,    0,    0,
  489,  175,  490,    0,    0,  151,  148,  163,  161,  170,
  723,  164,  165,  166,  167,  146,  168,  169,    0,    0,
  171,  172,  173,  174,    0,    0,  177,  142,  162,    0,
    0,    0,    0,    0,    0,    0,  141,  147,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  143,  144,  149,  380,  175,  381,    0,    0,
  151,  148,  163,  161,  170,    0,  164,  165,  166,  167,
    0,  168,  169,    0,    0,  171,  172,  173,  174,    0,
    0,    0,  142,  162,    0,    0,    0,  160,    0,    0,
    0,  141,  147,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  143,  144,  149,
    0,    0,    0,  175,    0,    0,    0,  151,  148,  163,
  161,  170,    0,  164,  165,  166,  167,    0,  168,  169,
    0,    0,  171,  172,  173,  174,    0,    0,    0,  142,
  162,    0,  160,    0,    0,    0,    0,    0,  141,  147,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  143,  144,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  175,    0,    0,    0,  151,  148,  163,  161,  170,  160,
  164,  165,  166,  167,    0,  168,  169,    0,    0,  171,
  172,  173,  174,    0,    0,    0,  142,  162,    0,    0,
    0,    0,    0,    0,    0,  141,  147,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  143,  144,  149,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  175,    0,    0,    0,  151,  148,  163,
  161,  170,    0,  164,  165,  166,  167,    0,  168,  169,
    0,    0,  171,  172,  173,  174,  160,    0,    0,  142,
  162,    0,    0,    0,    0,    0,    0,    0,  141,  147,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  143,  144,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  160
};

YYSTATIC YYCONST short YYFARDATA YYPACT[] = {
-1000, 1500,-1000,  517,  496,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,  494,  442,  437,  435,-1000,-1000,-1000,   18,
   18, -455,   59,   59,-1000,-1000,-1000,  415,-1000, -129,
  547,-1000,  895, 1710,   12,  894,   18, -365, -367,-1000,
 -171,  952,   12,  952,-1000,-1000,-1000,  114, 2316,  547,
  547,  547,  547,-1000,-1000,  133,-1000,-1000,-1000, -159,
 1035,-1000,-1000,  753,   12,   12,-1000,-1000, 1445,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,   18, -148,-1000,-1000,
-1000,-1000,  933, -133, 3030, 1182,-1000,-1000,-1000,-1000,
 3320,-1000,   18,-1000, 1147,-1000, 1268, 1670,   12, 1186,
 1177, 1176, 1159, 1151, 1143, 1669, 1472,   14,-1000,   18,
  519,  746,-1000,-1000,  149, 1182,  547, 3030,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000, 1470,  134, 1265,  132, -239, -242, -247,
 -248,  933,-1000, -117,  933, 1011,  563,-1000,-1000,  -72,
-1000, 3702,  104, 1098,-1000,-1000,-1000,-1000,-1000, 3505,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
  479,-1000,-1000,-1000,-1000,-1000, 1182, 1667,  599, 1182,
 1182, 1182,-1000, 2356,  100,-1000,-1000, 1658, 1026, 2942,
-1000, 3702,-1000,-1000,-1000,   78,   78,-1000, 1654,-1000,
-1000,   54, 1467, 1466, 1699, 1474,-1000,-1000,   18,-1000,
   18,   83,-1000,-1000,-1000,-1000, 1153,-1000,-1000,-1000,
-1000,-1000,  888,   18, 3301,-1000,   69,   21,-1000,-1000,
  378,   18,   59,  341,   12,  378, 1011, 3450, 3030,  -82,
   78, 2942, 1653,-1000,  514,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
  112,  670, 1001,  477,-1000,   79,-1000,  299,  933,-1000,
-1000, 3030,-1000,-1000,   93,  381,   78,  547,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000, 1652, 1651, 2198,
  848,  288, 1264, 1637,  100, 1465,  -65,-1000,   18,  -65,
-1000,   59,-1000,   18,-1000,   18,-1000,   18,-1000,-1000,
-1000,-1000,  846,-1000,   18,   18,-1000, 1182,-1000,-1000,
-1000, -389,-1000,-1000,-1000,-1000,-1000,  746,  537,  111,
-1000,-1000, 1182,  981,-1000, 1253,  533, 1633,-1000,  103,
  547,  295,-1000,-1000,-1000, 1628, 1627, 3702,  547,  547,
  547,  547,-1000,  933,-1000,-1000, 3702,  475,-1000, 1182,
-1000,  -68,-1000,  381,  806,  845,  843,  547,  547, 2769,
-1000,-1000,-1000,-1000,-1000,-1000,   18, 1253, 1069,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,  137,-1000,-1000,-1000,
 1626, 1016,-1000,  730, 1464,-1000,-1000, 2621,-1000,-1000,
   18,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
  414,  397,  351,-1000,-1000,-1000,-1000,-1000,   18,   18,
  336, 3198,-1000,-1000, -209, -212,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,  -60, 1625,-1000,   18, 1145,    0,   78,
  820,   18,-1000,   21,   74,   74,   74,   74, 3030,  514,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000, 1620, 1618, 1462,-1000,-1000,-1000, 2769,-1000,-1000,
-1000,-1000, 1253, 1617,   12, 3702,-1000,  378, 1283,-1000,
 -140, -141,-1000,-1000, -357,-1000,-1000,   12,  275,  353,
   12,-1000,-1000, 1014,-1000,-1000,   12,-1000,   12,-1000,
 1005, 1004,-1000,-1000,  547, -169, -368, 1616,-1000,-1000,
-1000,-1000,  547, -373,-1000,-1000, -351,-1000,-1000,-1000,
 1250,-1000,  796,  547, 3702, 1182, 3639,   18,  117, 1385,
-1000,-1000,-1000,-1000,-1000,-1000,-1000, 1615,-1000,-1000,
-1000,-1000,-1000,-1000, 1614,-1000,-1000, 1147,  117, 1461,
-1000, 1458,  824, 1456, 1455, 1454, 1452, 1451,-1000,  346,
 1144,-1000,   99, 1182,-1000,-1000,-1000, -162,  547,  117,
  328,  121, 3098,-1000,-1000, 1245, 1182,-1000,  639,-1000,
-1000,  -50, 3030, 3030,  942, 1240,  381, 1182, 1182, 1182,
 1182,-1000, 2465,-1000, 1182,-1000,  547,  547,  547,  722,
 1182,   -5, 1182,   86, 1450,-1000,  148,-1000,-1000,-1000,
-1000,-1000,-1000,   18,-1000, 1253,-1000,-1000, 1011,   -9,
 1073,-1000,-1000, 1182, 1449, 1189,-1000,-1000,-1000,-1000,
-1000,-1000,  -10,   78,  542, 3030, 2873,  318,  537, 1448,
 1237,-1000,-1000, 3639,  -60,  823,   18,   42, 3702,   18,
 1182,  822,-1000,-1000,-1000,  378,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,   18,   59,-1000,  -16, 1182,  117, 1446,
  640, 1440, 1231, 1214,-1000,  100,   18,   18, 1439, 1139,
-1000,-1000, 1253, 1613, 1434, 1611, 1425, 1422, 1610, 1604,
 1182,  547,-1000,  547,   18,  144,  547,   12, 3030,  547,
  663,  854,  156, -177, 1419,   87, 1974,  141, 1933,   18,
-1000, 1252,-1000,  884,-1000,  884,  884,  884,  884,  884,
 -163,-1000,   18,   18,  547,-1000,-1000,-1000,-1000,-1000,
-1000, 1182, 1417, 1194,  989,-1000,-1000,  286, 1191, 1002,
  340,   88,-1000,  -46,   18, 1416, 1414,-1000, 3702, 1603,
 1098, 1098, 1098,  547,  547,-1000,  940,  662,  148,-1000,
-1000,-1000,-1000,-1000, 1413,  283,  826,  998,   42, 1602,
 1601, 3562,-1000,-1000, 1647,  838,   47,  251,   42, 3702,
   18, 1182, -326,  547, 1182,-1000,-1000, 3702,-1000,-1000,
 1182,-1000,  -60,  156, 1412, -249,-1000,-1000, 1182, 2769,
  819,  852, -143, -151, 1407, 1406,  547, 1208,-1000,  -60,
-1000,  378,  378,-1000,-1000,-1000,-1000,  275,-1000,-1000,
-1000,-1000,-1000,-1000,-1000, 1098, 1182, 1405,   18, 1182,
 1402,-1000,  547,   42, 1600,  808,  805,  802,  801,-1000,
  117, 1747,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000, 1130, 1128, 1595,  852,  100, 1397,
  906,   12, 1594, -401,  -63,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,  411,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000, 1590, 1590,
-1000, 1590, 1883,-1000,-1000, -415,-1000, -405,-1000,-1000,
 -421,-1000,-1000,-1000, 1396,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,  100,-1000,-1000,-1000,-1000,-1000,   68,  325,
 1182,-1000,  117, 1261,  274,-1000, 3098,  319,  970,-1000,
-1000,-1000,-1000,-1000,  381,  -60, 1098, 1182,-1000,  547,
 1181, 3030,-1000,-1000,-1000,  370,-1000,-1000,-1000, 1141,
 1104, 1087, 1082, 1055, 1051, 1049, 1048, 1039, 1007,  999,
  983,  965,  436,  950,  949,   12,  707, 1073,  -60,  -60,
   18,  932,-1000,-1000,-1000, 1011, 1011, 1011, 1011,-1000,
-1000,-1000,-1000,-1000,-1000, 1011, 1011, 1011,-1000,-1000,
-1000,-1000,-1000, -435, 2769,  797,-1000, 1011, 1182, 1385,
-1000,  100,-1000,  100,  -18,-1000,-1000, 2010,  100,   18,
-1000,-1000, 1182,-1000, 1395,-1000,-1000, 1096,-1000,-1000,
 -291, 1071, 1933,-1000,-1000,-1000,-1000, 1253,-1000, -255,
 -259,   18,-1000,-1000,-1000,-1000,  350,  153,  117,  875,
  859,-1000,-1000,-1000,-1000,-1000,-1000,-1000, -425,-1000,
-1000,   31,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,  230,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
   18,-1000,-1000,-1000,-1000, 1587, 1253, 1586,-1000,-1000,
-1000,-1000,-1000,  309, 1383, 1181,-1000,  148, 1380, 1187,
-1000, 2374,-1000,-1000,-1000,  -53,   18, 1353,   18, 2047,
   18,  -15,   18,  243,   18,   59,   18,   18,   18,   18,
   18,   18,   18,   59,   18,   18,   18,   18,   18,   18,
   18,  947,  936,  907,  851,   18,   18, -157,   18, 1379,
 1253,-1000,-1000, 1585, 1584, 1378, 1377,  787,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,   78,  -22,-1000, 1172,
-1000,-1000,   42,-1000,-1000, 1253,-1000, 1583, 1578, 1577,
 1575, 1572, 1571,  -43, 1564, 1563, 1562, 1560, 1558, 1557,
-1000,-1000,-1000,  275,-1000, 1543, 1371, 1328,-1000,-1000,
-1000,-1000, 1370,-1000,  617,   18,-1000, 1248,   18,   18,
  957,  117,  781,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
   58,   18,  200,  421,-1000,-1000,-1000,-1000,-1000, 3030,
  444,-1000,-1000,-1000,  658, 1369, 1366,  764,   56, 1364,
 1363,  761, 1362,  752, 1361, 1360,  747, 1358, 1341,  741,
 1340,  738, 1339,  736, 1338,  732, 1330,  721, 1329,  706,
 1327,  701, 1318,  699, 1317,  678,   59,   18,   18,   18,
   18,   18,   18,   18, 1316,  665, 1315,  634,-1000,  272,
  -60,  -60,-1000,-1000,  931, 3702,   42,  -60, 1046, 1542,
 1537, 1536, 1535, 1092,  -60,-1000,-1000,-1000,-1000,   18,
  633,  117,  629,  603,   18, 1253,-1000,-1000, 1313, 1085,
 1083, 1078, 1312,-1000,  394,-1000,  997,  594,   36,-1000,
-1000,-1000, 1534, 1309,-1000,-1000, 1533,-1000, 1532,-1000,
-1000, 1529,-1000,-1000, 1527,-1000, 1526,-1000, 1522,-1000,
 1521,-1000, 1518,-1000, 1513,-1000, 1512,-1000, 1511,-1000,
 1502, 1304,  593, 1303,  579, 1302,  570, 1300,  561,-1000,
 1494,-1000, 1492,-1000, 1298, 1297,-1000, 2769, 1046, 1296,
 1491,-1000,  855,  275, 1292,  376,-1000, 1216,-1000, 1970,
 1291,-1000,   18,   18,   18,-1000,-1000, 2047,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000, 1490,-1000, 1488,-1000, 1487,
-1000, 1486,-1000,-1000,-1000,-1000,  -39, 1476,  852,  -60,
-1000,-1000,-1000,  117,-1000,  906,-1000, 1288, 1287, 1285,
-1000,  189, 1249, 2254,  798,  582,  365,  571,  549,  512,
  333,  484,  424,  389,-1000,-1000,-1000,-1000,  361,  136,
   42,  -60,-1000, 1282, 1426, 1228,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,   26,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,  302,  307,  267,  254,
-1000,-1000,-1000, 1475, 1281,-1000,-1000,-1000,-1000,-1000,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
 1427,  117,-1000,-1000,-1000,-1000,-1000,  -60, -436,   18,
 1200, 1280, -196, 1275,-1000,-1000,   78,-1000, 3702, 2769,
  -41,   42, 1046, 1386,  -60, 1274,-1000
};

YYSTATIC YYCONST short YYFARDATA YYPGO[] = {
    0,   66,   70,   17, 1907,   47,   43,    3, 1906,    0,
 1902, 1901, 1900,  226,  234, 1899, 1898,    2, 1897,   49,
   41,    1,   40,   35,   28,    6, 1896,   46,    4,   58,
 1891,   33,   42,   12,   25,   10,   23, 1890,   44, 1889,
   14,   26, 1888, 1887,    5,    7,    9,   11, 1881, 1880,
 1879, 1878,   30,   32,   45, 1877, 1874, 1873, 1872,   16,
 1871, 1870,   15, 1869,   31, 1868,   13,   39,   36,   27,
    8,   18,  435,   60, 1233,   38,  248, 1867, 1860, 1859,
 1858, 1856, 1855,   19,   34, 1854, 1305, 1853, 1839,   29,
  662,  140, 1838,   59, 1230, 1837, 1836, 1835, 1834, 1832,
 1831, 1830, 1829, 1828, 1827, 1826, 1825, 1816, 1815, 1029,
 1814,   68,   56, 1813,   65,  126,   55,   48, 1812, 1804,
   86, 1803, 1802, 1801, 1800, 1799, 1798,   54, 1797, 1796,
 1795,   61,  186,   82, 1794,   22,  276, 1793, 1792, 1789,
 1787, 1786, 1785, 1784, 1783, 1782, 1781, 1780, 1779,  886,
 1778, 1777, 1771, 1770, 1765, 1764, 1763, 1762,   62, 1761,
 1760,  114, 1757, 1756, 1754,  127, 1753, 1752, 1751, 1749,
 1743, 1742, 1740,   64, 1735,   71, 1739,   67, 1738,  407,
 1737, 1736, 1721, 1712, 1711, 1514
};
YYSTATIC YYCONST yyr_t YYFARDATA YYR1[]={

   0, 109, 109, 110, 110, 110, 110, 110, 110, 110,
 110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
 110, 110, 110, 110, 110, 110, 110, 110, 110, 136,
 136,  36,  36, 133, 133, 133,   2,   2,   1,   1,
   1,   9,  24,  24,  23,  23,  23, 134, 134, 134,
 134, 134, 135, 135, 135, 135, 135, 135, 135, 135,
 135,  93,  93,  93,  93,  94,  94,  94,  94,  10,
  11,  73,  72,  72,  59,  61,  61,  61,  62,  62,
  62,  65,  65, 132, 132, 132,  60,  60,  60,  60,
  60,  60, 130, 130, 130, 119,  12,  12,  12,  12,
  12,  12, 118, 137, 113, 138, 139, 111,  77,  77,
  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,
  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,
  77,  77,  77,  77,  77,  77, 140, 140, 141, 141,
 112, 112, 142, 142,  56,  56,  57,  57,  69,  69,
  18,  18,  18,  18,  18,  19,  19,  68,  68,  67,
  67,  58,  21,  21,  22, 143, 143, 143, 143, 143,
 143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
 143, 143, 143, 143, 116,  79,  79,  79,  79,  79,
  79,  79,  79,  79,  79,  79,  79,  79,  79,  79,
  79,   4,   4,  35,  35,  16,  16,  75,  75,  75,
  75,  75,  75,  75,   7,   7,   7,   7,   8,   8,
   8,   8,   8,   8,   8,  76,  74,  74,  74,  74,
  74,  74, 144, 144,  81,  81,  81, 145, 145, 150,
 150, 150, 150, 150, 150, 150, 150, 146,  82,  82,
  82, 147, 147, 151, 151, 151, 151, 151, 151, 151,
 152,  38,  38,  34,  34, 153, 114,  78,  78,  78,
  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,
  78,  78,  78,  78,  78,  78,  78,  78,  78,  78,
  83,  83,  83,  83,  83,  83,  83,  83,  83,  83,
  83,  83,  83,  83,  83,  83,  83,   3,   3,   3,
  13,  13,  13,  13,  13,  80,  80,  80,  80,  80,
  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,
 154, 115, 115, 155, 155, 155, 155, 155, 155, 155,
 155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
 155, 155, 155, 155, 155, 155, 155, 158, 159, 156,
 161, 161, 160, 160, 160, 163, 162, 162, 162, 162,
 166, 166, 166, 169, 164, 167, 168, 165, 165, 165,
 117, 170, 170, 172, 172, 172, 171, 171, 173, 173,
  14,  14, 174, 174, 174, 174, 174, 174, 174, 174,
 174, 174, 174, 174, 174, 174, 174,  41,  41,  41,
  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,
  41,  41,  41,  41,  41,  41, 175,  31,  31,  32,
  32,  39,  39,  39,  40,  40,  40,  40,  40,  40,
  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,
  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,
  42,  42,  42,  43,  43,  43,  47,  47,  46,  46,
  45,  45,  44,  44,  48,  48,  49,  49,  49,  50,
  50,  50,  50,  51,  51, 149,  95,  96,  97,  98,
  99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
 157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
 157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
 157, 157, 157,   6,   6,   6,   6,   6,  53,  53,
  54,  54,  55,  55,  25,  25,  26,  26,  27,  27,
  27,  70,  70,  70,  70,  70,  70,  70,  70,  70,
  70,   5,   5,  71,  71,  71,  71,  33,  33,  33,
  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,
  33,  33,  20,  20,  15,  15,  15,  15,  15,  15,
  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,
  15,  15,  15,  28,  28,  28,  28,  28,  28,  28,
  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,
  28,  28,  28,  28,  28,  28,  28,  52,  52,  52,
  52,  52,  52,  52,  52,  52,  52,  52,  52,  52,
  52,  52,  52,  52,  52,  30,  30,  29,  29,  29,
  29,  29, 131, 131, 131, 131, 131, 131,  64,  64,
  64,  63,  63,  87,  87,  84,  84,  85,  17,  17,
  37,  37,  37,  37,  37,  37,  37,  37,  86,  86,
  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,
  86,  86,  86, 176, 176, 120, 120, 120, 120, 120,
 120, 120, 120, 120, 120, 120, 121, 121,  88,  88,
  89,  89, 177, 122,  90,  90,  90,  90,  90,  90,
  90,  90,  90,  90, 123, 123, 178, 178, 178,  66,
  66, 179, 179, 179, 179, 179, 179, 180, 182, 181,
 124, 124, 125, 125, 183, 183, 183, 183, 126, 148,
  91,  91,  91,  91,  91,  91,  91,  91,  91,  91,
 127, 127, 184, 184, 184, 184, 184, 184, 184, 128,
 128,  92,  92,  92, 129, 129, 185, 185, 185, 185 };
YYSTATIC YYCONST yyr_t YYFARDATA YYR2[]={

   0,   0,   2,   4,   4,   3,   1,   1,   1,   1,
   1,   1,   4,   4,   4,   4,   1,   1,   1,   2,
   2,   3,   2,   2,   1,   1,   1,   4,   1,   0,
   2,   1,   3,   2,   4,   6,   1,   1,   1,   1,
   3,   1,   1,   1,   1,   4,   4,   4,   4,   4,
   4,   4,   2,   3,   2,   2,   2,   1,   1,   2,
   1,   2,   4,   6,   3,   5,   7,   9,   3,   4,
   7,   1,   1,   1,   2,   0,   2,   2,   0,   6,
   2,   1,   1,   1,   1,   1,   1,   1,   1,   3,
   2,   3,   1,   2,   3,   7,   0,   2,   2,   2,
   2,   2,   3,   3,   2,   1,   4,   3,   0,   2,
   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,
   3,   3,   2,   2,   2,   5,   0,   2,   0,   2,
   0,   2,   3,   1,   0,   1,   1,   3,   0,   3,
   1,   1,   1,   1,   1,   0,   2,   4,   3,   0,
   2,   3,   0,   1,   5,   3,   4,   4,   4,   1,
   1,   1,   1,   1,   2,   2,   4,  13,  22,   1,
   1,   5,   3,   4,   7,   0,   2,   2,   2,   2,
   2,   2,   2,   5,   2,   2,   2,   2,   2,   2,
   5,   0,   2,   0,   2,   0,   3,   9,   9,   7,
   7,   1,   1,   1,   2,   2,   1,   4,   0,   1,
   1,   2,   2,   2,   2,   4,   2,   5,   3,   2,
   2,   1,   4,   3,   0,   2,   2,   0,   2,   2,
   2,   2,   2,   1,   1,   1,   1,   9,   0,   2,
   2,   0,   2,   2,   2,   2,   1,   1,   1,   1,
   1,   0,   4,   1,   3,   1,  13,   0,   2,   2,
   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
   2,   2,   2,   2,   2,   2,   5,   8,   6,   5,
   0,   2,   2,   2,   2,   2,   2,   2,   2,   2,
   2,   2,   4,   4,   4,   4,   5,   1,   1,   1,
   0,   4,   4,   4,   4,   0,   2,   2,   2,   2,
   2,   2,   2,   2,   2,   2,   2,   2,   2,   5,
   1,   0,   2,   2,   1,   2,   4,   5,   1,   1,
   1,   1,   2,   1,   1,   1,   1,   1,   4,   6,
   4,   4,  11,   1,   5,   3,   5,   3,   1,   2,
   2,   1,   2,   4,   4,   1,   2,   2,   2,   2,
   2,   2,   2,   1,   2,   1,   1,   1,   4,   4,
   2,   4,   2,   0,   1,   1,   3,   1,   3,   1,
   0,   3,   5,   4,   3,   5,   5,   5,   5,   5,
   5,   2,   2,   2,   2,   2,   2,   4,   4,   4,
   4,   4,   4,   4,   4,   5,   5,   5,   5,   4,
   4,   4,   4,   4,   4,   3,   2,   0,   1,   1,
   2,   1,   1,   1,   1,   4,   4,   5,   4,   4,
   4,   7,   7,   7,   7,   7,   7,   7,   7,   7,
   7,   8,   8,   8,   8,   7,   7,   7,   7,   7,
   0,   2,   2,   0,   2,   2,   0,   2,   0,   2,
   0,   2,   0,   2,   0,   2,   0,   2,   2,   0,
   2,   3,   2,   0,   2,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,
   1,   2,   2,   2,   2,   2,   2,   3,   2,   2,
   2,   5,   3,   2,   2,   2,   2,   2,   5,   4,
   6,   2,   4,   0,   3,   3,   1,   1,   0,   3,
   0,   1,   1,   3,   0,   1,   1,   3,   1,   3,
   4,   4,   4,   4,   5,   1,   1,   1,   1,   1,
   1,   1,   3,   1,   3,   4,   1,   0,  10,   6,
   5,   6,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   2,   2,   2,   2,   1,   1,
   1,   1,   2,   3,   4,   6,   5,   1,   1,   1,
   1,   1,   1,   1,   2,   2,   1,   2,   2,   4,
   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,
   1,   1,   0,   5,   0,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,
   1,   1,   1,   1,   1,   3,   2,   2,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   2,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   2,   1,   3,   2,   3,   4,   2,
   2,   2,   5,   5,   7,   4,   3,   2,   3,   2,
   1,   1,   2,   3,   2,   1,   2,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,
   1,   1,   1,   1,   1,   1,   3,   0,   1,   1,
   3,   2,   6,   7,   3,   3,   3,   6,   0,   1,
   3,   5,   6,   4,   4,   1,   3,   3,   1,   1,
   1,   1,   4,   1,   6,   6,   6,   4,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   3,   2,   5,   4,   7,
   6,   7,   6,   9,   8,   3,   8,   4,   0,   2,
   0,   1,   3,   3,   0,   2,   2,   2,   3,   2,
   2,   2,   2,   2,   0,   2,   3,   1,   1,   1,
   1,   3,   8,   2,   3,   1,   1,   3,   3,   3,
   4,   6,   0,   2,   3,   1,   3,   1,   4,   3,
   0,   2,   2,   2,   3,   3,   3,   3,   3,   3,
   0,   2,   2,   3,   3,   4,   2,   1,   1,   3,
   5,   0,   2,   2,   0,   2,   4,   3,   1,   1 };
YYSTATIC YYCONST short YYFARDATA YYCHK[]={

-1000,-109,-110,-111,-113,-114,-116,-117,-118,-119,
-120,-121,-122,-124,-126,-128,-130,-131,-132, 525,
 526, 460, 528, 529,-133,-134,-135, 532, 533,-139,
 409,-152, 411,-170,-137, 455,-176, 463, 408, 470,
 471, 430, -87, 431, -93, -94, 273, 449, 530, 534,
 535, 536, 537, 538, 539, 540,  59,-138, 410, 412,
 454, 447, 448, 450, -10, -11, 123, 123,-115, 123,
 123, 123, 123,  -9, 264,  -9, 527, -88, -24, 265,
 264, -24, 123,-140, 314,  -1,  -2, 261, 260, 263,
 -78, -16,  91,-171, 123,-174, 278,  38,-175, 286,
 287, 284, 283, 282, 281, 288, -31, -32, 267,  91,
  -9, -90, 469, 469, -92,  -1, 469, -86, 432, 433,
 434, 435, 436, 437, 438, 439, 440, 441, 442, 443,
 444, 445, 446, -31, -86, 263, -28, -70, -74, -93,
 -94, 306, 297, 322, 323,-149,  33, 307, 276, 324,
 -52, 275,  91,  -5, -76, 268, 413, 414, 415, 358,
 357, 278, 298, 277, 281, 282, 283, 284, 286, 287,
 279, 290, 291, 292, 293, 271,  -1, 296,  -1,  -1,
  -1,  -1, 262, -77,-172, 318, 379,  61, -73,  40,
 -75,  -7, -76, 269, 272, 325, 340,  -8, 295, 300,
 302, 308, -31, -31,-112,-109, 125,-155, 416,-156,
 418,-154, 420, 421,-117,-157,  -2,-131,-120,-133,
-132,-135, 472, 458, 508,-158, 507,-160, 419, -95,
 -96, -97, -98, -99,-108,-100,-101,-102,-103,-104,
-105,-106,-107,-159,-163, 395, 396, 397, 398, 399,
 400, 401, 402, 403, 404, 405, 406, 407, 123, 417,
-123,-125,-127,-129,  -9,  -1, 461,-136, -70, -76,
-141, 315, -71, -70,  91, -28,-149,  46,  -7, 328,
 329, 330, 331, 332, 326, 347, 353, 337, 365, 366,
 367, 368, 369, 370, 371, 351, 378, 294, 372, -79,
  -9,-173,-174,  42,  40, -31,  40, -14,  91,  40,
 -14,  40, -14,  40, -14,  40, -14,  40, -14,  40,
  41, 267,  -9, 263,  58,  44, 262,  -1, 354, 355,
 356, 473, 379, 475, 476, 477, 478, -90, -91,  -1,
 329, 330,  -1, -71,  41, -36,  61, 288, 262,  44,
 390,  91,  38,  42, 359, 360, 361,  60, 390, 390,
 390, 390, -70, 306, -70, -75,  -7,  33,  -9,  -1,
 280, 279, 289, -28,  -1, -76,  42, 471,  47, -28,
 270, 272, 281, 282, 283, 284,  40, -36,  -1, 329,
 330, 322, 346, 334, 335, 337, 338, 339, 340, 341,
 342, 343, 344, 345, 362, 355, 336, 352, 326, 371,
 294,  -2,  40,  61, -72, -71, -74, -28,  -7,  -7,
  40, 301, 303, 304, 305,  41,  41, 125,-143,-114,
-111,-144,-146,-116,-117,-131,-120,-132, 452, 453,
-148, 508,-133,-135, 507, 321, 422, 427, 472, 408,
 125,  -9,  -9,  40, 451,  58,  91,  -9, -71, 357,
 364,  91,-161,-162,-164,-166,-167,-168, 311,-169,
 309, 313, 312,  -9,  -2,  -9, -24,  40, -23, -24,
 266, 286, 287, -31,  -9,  -2, -75, -28, -76, 270,
 272, -71, -36, 341,-175,  -7, -72,  40,-115,-158,
  -2,  -9, 125,-178, 462,-131,-179,-180, 467, 468,
-181,-132,-135, 464, 125,-183,-177,-179,-182, 338,
 462, 465, 125,-184, 460, 408, 463, 296,-132,-135,
 125,-185, 460, 463,-132,-135, -89, 420, 125,-136,
-142, -71,  -1, 471,  -7,  -1, -13,  40,  40, -28,
 328, 329, 330, 331, 377, 371, 326, 479, 365, 366,
 367, 368, 375, 376, 294,  93, 125,  44,  40,  -2,
  41, -23,  -9, -23, -24,  -9,  -9,  -9,  93,  -9,
  -9, 474,  -1,  -1, 330, 329, 327, 336, 390,  40,
  61,  43, 123,  40,  40, 263,  -1,  93, -30, -29,
 275,  -9,  40,  40, -54, -55, -28,  -1,  -1,  -1,
  -1, -70, -28,  -9,  -1, 280,  93,  93,  93,  -1,
  -1, -71,  -1,  91,  -9, -69,  60, 329, 330, 331,
 365, 366, 367,  40,  61, -36, 123,  40,  41, -71,
  -3, 373, 374,  -1,  -9,-115, 123, 123, 123,  -9,
  -9, 123, -71, 357, 364, 364, -81, -82, -91, -25,
 -26, -27, 275, -13,  40,  -9,  58, 274,  -7,  91,
  -1,  -9,-161,-165,-158, 310,-165,-165,-165, -71,
-158,  -2,  -9,  40,  40,  41, -71,  -1,  40, -31,
 -28,  -6,  -2,  -9, 125, 316, 316, 466, -31, -66,
  -9,  42, -36,  61, -31,  61, -31, -31,  61,  61,
  -1, 469,  -9, 469,  40,  -1, 469,-177,  44,  93,
  -1, -28, -28,  91,  -9, -36, -83,  -1,  40,  40,
-173, -36,  41,  41,  93,  41,  41,  41,  41,  41,
 -12, 263,  44,  58, 390, 329, 330, 331, 365, 366,
 367,  -1, -84, -85, -36, 123, 262, -64, -63, -71,
 306,  44,  93,  44, 275, -71, -71,  62,  44,  42,
  -5,  -5,  -5,  93, 274,  41, -68, -19, -18,  43,
  45, 306, 323, 373,  -9, -59, -61, -73, 274, -53,
 -22,  60,  41, 125,-112,-145,-147,-127, 274,  -7,
  91,  -1, -71, -71,  -1, 371, 326,  -7, 371, 326,
  -1,  41,  44, -28, -25,  93,  -9,  -3,  -1, -28,
  -9,  93,  -2,  -9,  -9, -24, 274, -36,  41,  40,
  41,  44,  44,  -2,  -9,  -9,  41,  58,  40,  41,
  40,  41,  41,  40,  40,  -5,  -1,  -9, 317,  -1,
 -31, -71,  93, -38, 479, 504, 505, 506,  -9,  41,
 390, -83,  41, 387, 341, 342, 343, 344, 388, 389,
 301, 303, 304, 305, 391, 394, 294,  -4, 317, -34,
 -33,-153, 480, 482, 483, 484, 485, 276, 277, 281,
 282, 283, 284, 286, 287, 257, 279, 290, 291, 292,
 293, 486, 487, 488, 490, 491, 492, 493, 494, 495,
 496, 334, 497, 280, 289, 336, 498, 341, 489, 357,
 390, 502, 271, 123,  -9,  41, -14, -14, -14, -14,
 -14, -14, 317, 283, 284, 456, 457, 459,  -9,  -9,
  -1,  41,  44,  61, -59, 125,  44,  61, 263, 263,
 -29,  -9,  41,  41, -28,  40,  -5,  -1,  62, -58,
  -1,  40, -19,  41, 125, -62, -40,-135, -41, 298,
 364, 297, 286, 287, 284, 283, 282, 281, 293, 292,
 291, 290, 279, 278, 277,-175,  61,  -3,  40,  40,
  91, -54, 125, 125,-150, 423, 424, 425, 426,-120,
-132,-133,-135, 125,-151, 428, 429, 426,-132,-120,
-133,-135, 125,  -3, -28,  -9, -93, 450,  -1, -28,
 -27, -38,  41, 390, -71,  93, -35,  61, 316, 316,
  41,  41,  -1,  41, -25,  -6,  -6, -66,  41,  -9,
  41,  -3,  40,  93,  93,  93,  93, -36,  41,  58,
  58,  40, -35,  -2,  41,  42,  91, -32,  40, 481,
 501, 277, 281, 282, 283, 284, 280, -20,  40, -20,
 -20, -15, 510, 483, 484, 276, 277, 281, 282, 283,
 284, 286, 287, 279, 290, 291, 292, 293,  42, 486,
 487, 488, 490, 491, 494, 495, 497, 280, 289, 257,
 511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
 521, 522, 523, 496, 488, 500,  41,  -2, 263, 263,
  44, -84, -37, -17,  -9, 283, -36, -70, 319, 320,
 125, -64, 123,  61, -25,  -1, -67,  44, -56, -57,
 -71, -65,-135, 358, 363,  40,  91,  40,  91,  40,
  91,  40,  91,  40,  91,  40,  91,  40,  91,  40,
  91,  40,  91,  40,  91,  40,  91,  40,  91,  40,
  91, 284, 283, 282, 281,  40,  91,  40,  91, -31,
 -36, 123,  40, -53, -22, -25, -25,  -9,  62, -75,
 -75, -75, -75, -75, -75, -75, 509, -71,  93,  -1,
  -2,  -2, 274, -39, -41, -36, 299, 286, 287, 284,
 283, 282, 281, 279, 293, 292, 291, 290, 278, 277,
  -2,  -9,  41,  58, -89, -69, -34, -83, 392, 393,
 392, 393,  -9,  93,  -9,  43, 125, -36,  91,  91,
 503,  44,  91, 524,  38, 281, 282, 283, 284, 280,
  -9,  40,  40, -62, 123,  41, -67, -68,  41,  44,
 -60, -52, 364, 297, 346, 299, 263,  -9, 306, -70,
 299,  -9, -40,  -9, -23,  -9,  -9, -23, -24,  -9,
 -24,  -9,  -9,  -9,  -9,  -9,  -9,  -9, -24,  -9,
  -9,  -9,  -9,  -9,  -9,  -9,  40,  91,  40,  91,
  40,  91,  40,  91,  -9,  -9, -17,  -9,  41, -59,
  40,  40,  41,  41,  93,  -7, 274,  40,  -3, 284,
 283, 282, 281, -66,  40,  41,  41,  41,  93,  43,
  -9,  44,  -9,  -9,  61, -36,  93, 263,  -9, 281,
 282, 283,  -9, 125, -62, -71,  -1,  91, 306, -70,
  41,  41,  93, 263,  41,  41,  93,  41,  93,  41,
  41,  93,  41,  41,  93,  41,  93,  41,  93,  41,
  93,  41,  93,  41,  93,  41,  93,  41,  93,  41,
  93, -24,  -9,  -9,  -9,  -9,  -9,  -9,  -9,  41,
  93,  41,  93, 125, -25, -25,  62, -28,  -3, -25,
 -21, -22,  60,  58, -25,  -9,  93, -36,  93,  93,
  -9,  41,  58,  58,  58,  41, 125,  61,  93, 263,
  40,  41,  40,  40,  40,  40,  40,  40,  40,  40,
  40,  40,  40,  40,  41,  93,  41,  93,  41,  93,
  41,  93,  40,  40,  41,  41, -71, -21,  41,  40,
 -66,  41,  93,  44,  41, -33,  41,  -9,  -9,  -9,
 -40, -49, -50, -51, -42, -43, -47, -46, -45, -44,
 -47, -46, -45, -44,  40,  40,  40,  40, -45, -48,
 274,  40, -35, -25, -80, -36,  41,  41,  41,  41,
 299, 263,  41, 299, 306, -70,  41, -40,  41, -23,
  -9,  41, -23, -24,  41, -24,  41,  -9,  41,  -9,
  41,  -9,  41,  41,  41,  41, -47, -46, -45, -44,
  41,  41, -17,  -3, -25,  41, 123, 324, 379, 380,
 381, 308, 382, 383, 384, 385, 333, 348, 349, 350,
 294,  44, 263,  41,  41,  41,  41,  40,  41,  40,
 -36, -25, 509,  -9,  41,  41, 357,  41,  -7, -28,
 -71, 274,  -3, -21,  40, -25,  41 };
YYSTATIC YYCONST short YYFARDATA YYDEF[]={

   1,  -2,   2,   0,   0, 331,   6,   7,   8,   9,
  10,  11,   0,   0,   0,   0,  16,  17,  18,   0,
   0, 768,   0,   0,  24,  25,  26,   0,  28, 136,
   0, 267, 205,   0, 427,   0,   0, 774, 105, 831,
  92,   0, 427,   0,  83,  84,  85,   0,   0,   0,
   0,   0,   0,  57,  58,   0,  60, 108, 260, 383,
   0, 753, 754, 218, 427, 427, 140,   1,   0, 784,
 802, 820, 834,  19,  41,  20,   0,   0,  22,  42,
  43,  23,  29, 138,   0, 104,  38,  39,  36,  37,
 218, 185,   0, 380,   0, 387,   0,   0, 427, 390,
 390, 390, 390, 390, 390,   0,   0, 428, 429,   0,
 756,   0, 774, 810,   0,  93,   0,   0, 738, 739,
 740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
 750, 751, 752,   0,   0,  33,   0,   0,   0,   0,
   0,   0, 664,   0,   0, 218,   0, 680, 681,   0,
 685,   0,   0, 545, 231, 547, 548, 549, 550,   0,
 485, 687, 688, 689, 690, 691, 692, 693, 694, 695,
   0, 700, 701, 702, 703, 704, 551,   0,  52,  54,
  55,  56,  59,   0, 382, 384, 385,   0,  61,   0,
  71,   0, 211, 212, 213, 218, 218, 216,   0, 219,
 220,   0,   0,   0,   0,   0,   5, 332,   0, 334,
   0,   0, 338, 339, 340, 341,   0, 343, 344, 345,
 346, 347,   0,   0,   0, 353,   0,   0, 330, 500,
   0,   0,   0,   0, 427,   0, 218,   0,   0,   0,
 218,   0,   0, 331,   0, 486, 487, 488, 489, 490,
 491, 492, 493, 494, 495, 496, 497, 498, 358, 365,
   0,   0,   0,   0,  21, 770, 769,   0,  29, 546,
 107,   0, 137, 553,   0, 556, 218,   0, 310, 268,
 269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
 279, 280, 281, 282, 283, 284, 285,   0,   0,   0,
   0,   0, 389,   0,   0,   0,   0, 401,   0,   0,
 402,   0, 403,   0, 404,   0, 405,   0, 406, 426,
 102, 430,   0, 755,   0,   0, 765, 773, 775, 776,
 777,   0, 779, 780, 781, 782, 783,   0,   0, 829,
 832, 833,  94, 714, 715, 716,   0,   0,  31,   0,
   0, 707, 669, 670, 671,   0,   0, 530,   0,   0,
   0,   0, 663,   0, 666, 226,   0,   0, 677, 679,
 682,   0, 684, 686,   0,   0,   0,   0,   0,   0,
 229, 230, 696, 697, 698, 699,   0,  53, 148, 109,
 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
 120, 121, 122, 123, 124, 125,   0, 132, 133, 134,
   0,   0, 103,   0,   0,  72,  73,   0, 214, 215,
   0, 221, 222, 223, 224,  64,  68,   3, 141, 331,
   0,   0,   0, 169, 170, 171, 172, 173,   0,   0,
   0,   0, 179, 180,   0,   0, 234, 248, 810, 105,
   4, 333, 335,  -2,   0, 342,   0,   0,   0, 218,
   0,   0, 359, 361,   0,   0,   0,   0,   0,   0,
 375, 376, 373, 501, 502, 503, 504, 499, 505, 506,
  44,   0,   0,   0, 508, 509, 510,   0, 513, 514,
 515, 516, 517,   0, 427,   0, 521, 523,   0, 362,
   0,   0,  12, 785,   0, 787, 788, 427,   0,   0,
 427, 795, 796,   0,  13, 803, 427, 805, 427, 807,
   0,   0,  14, 821,   0,   0,   0,   0, 827, 828,
  15, 835,   0,   0, 838, 839, 767, 771,  27,  30,
 139, 143,   0,   0,   0,  40,   0,   0, 290,   0,
 186, 187, 188, 189, 190, 191, 192,   0, 194, 195,
 196, 197, 198, 199,   0, 206, 386,   0,   0,   0,
 394,   0,   0,   0,   0,   0,   0,   0,  96, 758,
   0, 778, 800, 808, 811, 812, 813,   0,   0,   0,
   0,   0, 718, 723, 724,  34,  47, 667,   0, 705,
 708, 709,   0,   0,   0, 531, 532,  48,  49,  50,
  51, 665,   0, 676, 678, 683,   0,   0,   0,   0,
 552,   0,  -2, 707,   0, 106, 155, 126, 127, 128,
 129, 130, 131,   0, 381,  62,  75,  69, 218,   0,
 528, 307, 308,  -2,   0,   0, 140, 237, 251, 174,
 175, 820,   0, 218,   0,   0,   0, 218,   0,   0,
 535, 536, 538,   0,  -2,   0,   0,   0,   0,   0,
 355,   0, 360, 366, 377,   0, 367, 368, 369, 374,
 370, 371, 372,   0,   0, 507,   0,  -2,   0,   0,
   0,   0, 526, 527, 357,   0,   0,   0,   0,   0,
 789, 790, 793,   0,   0,   0,   0,   0,   0,   0,
 822,   0, 826,   0,   0,   0,   0, 427,   0, 554,
   0,   0, 261,   0,   0, 290,   0, 201, 557,   0,
 388,   0, 393, 390, 391, 390, 390, 390, 390, 390,
   0, 757,   0,   0,   0, 814, 815, 816, 817, 818,
 819, 830,   0, 725,   0,  75,  32,   0, 719,   0,
   0,   0, 668, 707, 711,   0,   0, 675,   0, 670,
 541, 542, 543,   0,   0, 225,   0,   0, 155, 150,
 151, 152, 153, 154,   0,   0,  78,  65,   0,   0,
   0, 530, 217, 165,   0,   0,   0,   0,   0,   0,
   0, 182,   0,   0,  -2, 235, 236,   0, 249, 250,
 809, 336, 310, 261,   0, 348, 350, 351, 309,   0,
   0, 203,   0,   0,   0,   0,   0,   0, 519,  -2,
 522, 523, 523, 363, 364, 786, 791,   0, 799, 794,
 797, 804, 806, 772, 798, 823, 824,   0,   0, 837,
   0, 142, 555,   0,   0,   0,   0,   0,   0, 286,
   0,   0, 289, 291, 292, 293, 294, 295, 296, 297,
 298, 299, 300, 301,   0,   0,   0, 203,   0,   0,
 263,   0,   0,   0, 562, 563, 564, 565, 566, 567,
 568, 569, 570, 571, 572, 573,   0, 578, 579, 580,
 581, 587, 588, 589, 590, 591, 592, 593, 612, 612,
 596, 612, 614, 600, 602,   0, 604,   0, 606, 608,
   0, 610, 611, 265,   0, 392, 395, 396, 397, 398,
 399, 400,   0,  97,  98,  99, 100, 101, 760, 762,
 801, 712,   0,   0,   0, 717, 718,   0,  37,  35,
 706, 710, 672, 673, 533,  -2, 544, 227, 149,   0,
 159, 144, 156, 135,  63,  74,  76,  77, 434,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0, 427,   0, 528,  -2,  -2,
   0,   0, 166, 167, 238, 218, 218, 218, 218, 243,
 244, 245, 246, 168, 252, 218, 218, 218, 256, 257,
 258, 259, 176,   0,   0,   0, 183, 218, 232,   0,
 537, 539, 337,   0,   0, 354, 356,   0,   0,   0,
  45,  46, 511, 518,   0, 524, 525,   0, 825, 836,
 770, 148, 557, 311, 312, 313, 314, 290, 288,   0,
   0,   0, 184, 202, 193, 582,   0,   0,   0,   0,
   0, 607, 574, 575, 576, 577, 601, 594,   0, 595,
 597, 598, 615, 616, 617, 618, 619, 620, 621, 622,
 623, 624, 625,   0, 630, 631, 632, 633, 634, 638,
 639, 640, 641, 642, 643, 644, 645, 646, 648, 649,
 650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
 660, 661, 662, 603, 605, 609, 200,  95, 759, 761,
   0, 726, 727, 730, 731,   0, 733,   0, 728, 729,
 713, 720,  78,   0,   0, 159, 158, 155,   0, 145,
 146,   0,  80,  81,  82,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
  66,  75,  70,   0,   0,   0,   0,   0, 529, 239,
 240, 241, 242, 253, 254, 255, 218,   0, 181,   0,
 540, 349,   0, 204, 431, 432, 433,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 378, 379, 520,   0, 766,   0,   0,   0, 302, 303,
 304, 305,   0, 583,   0,   0, 264,   0,   0,   0,
   0,   0,   0, 636, 637, 626, 627, 628, 629, 647,
 764,   0,   0,   0,  78, 674, 157, 160, 161,   0,
   0,  86,  87,  88,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0,   0,   0,   0,   0, 425,   0,
  -2,  -2, 209, 210,   0,   0,   0,  -2, 162,   0,
   0,   0,   0,   0,  -2, 262, 287, 306, 584,   0,
   0,   0,   0,   0,   0, 599, 635, 763,   0,   0,
   0,   0,   0, 721,   0, 147,   0,   0,   0,  90,
 435, 436,   0,   0, 438, 439,   0, 440,   0, 407,
 409,   0, 408, 410,   0, 411,   0, 412,   0, 413,
   0, 414,   0, 419,   0, 420,   0, 421,   0, 422,
   0,   0,   0,   0,   0,   0,   0,   0,   0, 423,
   0, 424,   0,  67,   0,   0, 164,   0, 162,   0,
   0, 163,   0,   0,   0,   0, 586,   0, 560, 557,
   0, 732,   0,   0,   0, 737, 722,   0,  91,  89,
 476, 437, 479, 483, 460, 463, 466, 468, 470, 472,
 466, 468, 470, 472, 415,   0, 416,   0, 417,   0,
 418,   0, 470, 474, 207, 208,   0,   0, 203,  -2,
 792, 315, 585,   0, 559, 561, 613,   0,   0,   0,
  79,   0,   0,   0,   0,   0,   0,   0,   0,   0,
   0,   0,   0,   0, 466, 468, 470, 472,   0,   0,
   0,  -2, 247,   0,   0,   0, 734, 735, 736, 457,
 477, 478, 458, 480,   0, 482, 459, 484, 441, 461,
 462, 442, 464, 465, 443, 467, 444, 469, 445, 471,
 446, 473, 447, 448, 449, 450,   0,   0,   0,   0,
 455, 456, 475,   0,   0, 352, 266, 316, 317, 318,
 319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
   0,   0, 481, 451, 452, 453, 454,  -2,   0,   0,
   0,   0,   0,   0, 558, 177, 218, 329,   0,   0,
   0,   0, 162,   0,  -2,   0, 178 };
#ifdef YYRECOVER
YYSTATIC YYCONST short yyrecover[] = {
-1000
};
#endif

/* SCCSWHAT( "@(#)yypars.c	3.1 88/11/16 22:00:49	" ) */
#line 3 "O:\\tfs\\cgm\\src\\Tools\\devdiv\\amd64\\yypars.c"
#if ! defined(YYAPI_PACKAGE)
/*
**  YYAPI_TOKENNAME		: name used for return value of yylex	
**	YYAPI_TOKENTYPE		: type of the token
**	YYAPI_TOKENEME(t)	: the value of the token that the parser should see
**	YYAPI_TOKENNONE		: the representation when there is no token
**	YYAPI_VALUENAME		: the name of the value of the token
**	YYAPI_VALUETYPE		: the type of the value of the token (if null, then the value is derivable from the token itself)
**	YYAPI_VALUEOF(v)	: how to get the value of the token.
*/
#define	YYAPI_TOKENNAME		yychar
#define	YYAPI_TOKENTYPE		int
#define	YYAPI_TOKENEME(t)	(t)
#define	YYAPI_TOKENNONE		-1
#define	YYAPI_TOKENSTR(t)	(sprintf_s(yytokbuf, _countof(yytokbuf), "%d", t), yytokbuf)
#define	YYAPI_VALUENAME		yylval
#define	YYAPI_VALUETYPE		YYSTYPE
#define	YYAPI_VALUEOF(v)	(v)
#endif
#if ! defined(YYAPI_CALLAFTERYYLEX)
#define	YYAPI_CALLAFTERYYLEX
#endif

# define YYFLAG -1000
# define YYERROR goto yyerrlab
# define YYACCEPT return(0)
# define YYABORT return(1)

#ifdef YYDEBUG				/* RRR - 10/9/85 */
char yytokbuf[20];
# ifndef YYDBFLG
#  define YYDBFLG (yydebug)
# endif
# define yyprintf(a, b, c, d) if (YYDBFLG) YYPRINT(a, b, c, d)
#else
# define yyprintf(a, b, c, d)
#endif

#ifndef YYPRINT
#define	YYPRINT	printf
#endif

/*	parser for yacc output	*/

#ifdef YYDUMP
int yydump = 1; /* 1 for dumping */
void yydumpinfo(void);
#endif
#ifdef YYDEBUG
YYSTATIC int yydebug = 0; /* 1 for debugging */
#endif
YYSTATIC YYSTYPE yyv[YYMAXDEPTH];	/* where the values are stored */
YYSTATIC short	yys[YYMAXDEPTH];	/* the parse stack */

#if ! defined(YYRECURSIVE)
YYSTATIC YYAPI_TOKENTYPE	YYAPI_TOKENNAME = YYAPI_TOKENNONE;
#if defined(YYAPI_VALUETYPE)
// YYSTATIC YYAPI_VALUETYPE	YYAPI_VALUENAME;	 FIX 
#endif
YYSTATIC int yynerrs = 0;			/* number of errors */
YYSTATIC short yyerrflag = 0;		/* error recovery flag */
#endif

#ifdef YYRECOVER
/*
**  yyscpy : copy f onto t and return a ptr to the null terminator at the
**  end of t.
*/
YYSTATIC	char	*yyscpy(register char*t, register char*f)
	{
	while(*t = *f++)
		t++;
	return(t);	/*  ptr to the null char  */
	}
#endif

#ifndef YYNEAR
#define YYNEAR
#endif
#ifndef YYPASCAL
#define YYPASCAL
#endif
#ifndef YYLOCAL
#define YYLOCAL
#endif
#if ! defined YYPARSER
#define YYPARSER yyparse
#endif
#if ! defined YYLEX
#define YYLEX yylex
#endif

#if defined(YYRECURSIVE)

	YYSTATIC YYAPI_TOKENTYPE	YYAPI_TOKENNAME = YYAPI_TOKENNONE;
  #if defined(YYAPI_VALUETYPE)
	YYSTATIC YYAPI_VALUETYPE	YYAPI_VALUENAME;  
  #endif
	YYSTATIC int yynerrs = 0;			/* number of errors */
	YYSTATIC short yyerrflag = 0;		/* error recovery flag */

	YYSTATIC short	yyn;
	YYSTATIC short	yystate = 0;
#ifdef _PREFAST_
#pragma warning(push)
#pragma warning(disable: 6200) // Index '-1' is out of valid index range...for non-stack buffer...
#endif
    YYSTATIC short	*yyps= &yys[-1];
	YYSTATIC YYSTYPE	*yypv= &yyv[-1];
#ifdef _PREFAST_
#pragma warning(pop)
#endif
    YYSTATIC short	yyj;
	YYSTATIC short	yym;

#endif

#pragma warning(disable:102)
YYLOCAL YYNEAR YYPASCAL YYPARSER()
{
#if ! defined(YYRECURSIVE)

	register	short	yyn;
	short		yystate, *yyps;
	YYSTYPE		*yypv;
	short		yyj, yym;

	YYAPI_TOKENNAME = YYAPI_TOKENNONE;
	yystate = 0;

#ifdef _PREFAST_
#pragma warning(push)
#pragma warning(disable:6200) // Index '-1' is out of valid index range...for non-stack buffer...
#endif
    yyps= &yys[-1];
    yypv= &yyv[-1];
#ifdef _PREFAST_
#pragma warning(pop)
#endif

#endif

#ifdef YYDUMP
	yydumpinfo();
#endif
 yystack:	 /* put a state and value onto the stack */

#ifdef YYDEBUG
	if(YYAPI_TOKENNAME == YYAPI_TOKENNONE) {
		yyprintf( "state %d, token # '%d'\n", yystate, -1, 0 );
		}
	else {
		yyprintf( "state %d, token # '%s'\n", yystate, YYAPI_TOKENSTR(YYAPI_TOKENNAME), 0 );
		}
#endif
	if( ++yyps > &yys[YYMAXDEPTH] ) {
		yyerror( "yacc stack overflow" );
		return(1);
	}
	*yyps = yystate;
	++yypv;

	*yypv = yyval;

yynewstate:

	yyn = YYPACT[yystate];

	if( yyn <= YYFLAG ) {	/*  simple state, no lookahead  */
		goto yydefault;
	}
	if( YYAPI_TOKENNAME == YYAPI_TOKENNONE ) {	/*  need a lookahead */
		YYAPI_TOKENNAME = YYLEX();
		YYAPI_CALLAFTERYYLEX(YYAPI_TOKENNAME);
	}
	if( ((yyn += YYAPI_TOKENEME(YYAPI_TOKENNAME)) < 0) || (yyn >= YYLAST) ) {
		goto yydefault;
	}
	if( YYCHK[ yyn = YYACT[ yyn ] ] == YYAPI_TOKENEME(YYAPI_TOKENNAME) ) {		/* valid shift */
		yyval = YYAPI_VALUEOF(YYAPI_VALUENAME);
		yystate = yyn;
 		yyprintf( "SHIFT: saw token '%s', now in state %4d\n", YYAPI_TOKENSTR(YYAPI_TOKENNAME), yystate, 0 );
		YYAPI_TOKENNAME = YYAPI_TOKENNONE;
		if( yyerrflag > 0 ) {
			--yyerrflag;
		}
		goto yystack;
	}

 yydefault:
	/* default state action */

	if( (yyn = YYDEF[yystate]) == -2 ) {
		register	YYCONST short	*yyxi;

		if( YYAPI_TOKENNAME == YYAPI_TOKENNONE ) {
			YYAPI_TOKENNAME = YYLEX();
			YYAPI_CALLAFTERYYLEX(YYAPI_TOKENNAME);
 			yyprintf("LOOKAHEAD: token '%s'\n", YYAPI_TOKENSTR(YYAPI_TOKENNAME), 0, 0);
		}
/*
**  search exception table, we find a -1 followed by the current state.
**  if we find one, we'll look through terminal,state pairs. if we find
**  a terminal which matches the current one, we have a match.
**  the exception table is when we have a reduce on a terminal.
*/

#if YYOPTTIME
		yyxi = yyexca + yyexcaind[yystate];
		while(( *yyxi != YYAPI_TOKENEME(YYAPI_TOKENNAME) ) && ( *yyxi >= 0 )){
			yyxi += 2;
		}
#else
		for(yyxi = yyexca;
			(*yyxi != (-1)) || (yyxi[1] != yystate);
			yyxi += 2
		) {
			; /* VOID */
			}

		while( *(yyxi += 2) >= 0 ){
			if( *yyxi == YYAPI_TOKENEME(YYAPI_TOKENNAME) ) {
				break;
				}
		}
#endif
		if( (yyn = yyxi[1]) < 0 ) {
			return(0);   /* accept */
			}
		}

	if( yyn == 0 ){ /* error */
		/* error ... attempt to resume parsing */

		switch( yyerrflag ){

		case 0:		/* brand new error */
#ifdef YYRECOVER
			{
			register	int		i,j;

			for(i = 0;
				(yyrecover[i] != -1000) && (yystate > yyrecover[i]);
				i += 3
			) {
				;
			}
			if(yystate == yyrecover[i]) {
				yyprintf("recovered, from state %d to state %d on token # %d\n",
						yystate,yyrecover[i+2],yyrecover[i+1]
						);
				j = yyrecover[i + 1];
				if(j < 0) {
				/*
				**  here we have one of the injection set, so we're not quite
				**  sure that the next valid thing will be a shift. so we'll
				**  count it as an error and continue.
				**  actually we're not absolutely sure that the next token
				**  we were supposed to get is the one when j > 0. for example,
				**  for(+) {;} error recovery with yyerrflag always set, stops
				**  after inserting one ; before the +. at the point of the +,
				**  we're pretty sure the guy wants a 'for' loop. without
				**  setting the flag, when we're almost absolutely sure, we'll
				**  give him one, since the only thing we can shift on this
				**  error is after finding an expression followed by a +
				*/
					yyerrflag++;
					j = -j;
					}
				if(yyerrflag <= 1) {	/*  only on first insertion  */
					yyrecerr(YYAPI_TOKENNAME, j);	/*  what was, what should be first */
				}
				yyval = yyeval(j);
				yystate = yyrecover[i + 2];
				goto yystack;
				}
			}
#endif
		yyerror("syntax error");

		yyerrlab:
			++yynerrs;

		case 1:
		case 2: /* incompletely recovered error ... try again */

			yyerrflag = 3;

			/* find a state where "error" is a legal shift action */

			while ( yyps >= yys ) {
			   yyn = YYPACT[*yyps] + YYERRCODE;
			   if( yyn>= 0 && yyn < YYLAST && YYCHK[YYACT[yyn]] == YYERRCODE ){
			      yystate = YYACT[yyn];  /* simulate a shift of "error" */
 				  yyprintf( "SHIFT 'error': now in state %4d\n", yystate, 0, 0 );
			      goto yystack;
			      }
			   yyn = YYPACT[*yyps];

			   /* the current yyps has no shift onn "error", pop stack */

 			   yyprintf( "error recovery pops state %4d, uncovers %4d\n", *yyps, yyps[-1], 0 );
			   --yyps;
			   --yypv;
			   }

			/* there is no state on the stack with an error shift ... abort */

	yyabort:
			return(1);


		case 3:  /* no shift yet; clobber input char */

 			yyprintf( "error recovery discards token '%s'\n", YYAPI_TOKENSTR(YYAPI_TOKENNAME), 0, 0 );

			if( YYAPI_TOKENEME(YYAPI_TOKENNAME) == 0 ) goto yyabort; /* don't discard EOF, quit */
			YYAPI_TOKENNAME = YYAPI_TOKENNONE;
			goto yynewstate;   /* try again in the same state */
			}
		}

	/* reduction by production yyn */
yyreduce:
		{
		register	YYSTYPE	*yypvt;
		yypvt = yypv;
		yyps -= YYR2[yyn];
		yypv -= YYR2[yyn];
		yyval = yypv[1];
 		yyprintf("REDUCE: rule %4d, popped %2d tokens, uncovered state %4d, ",yyn, YYR2[yyn], *yyps);
		yym = yyn;
		yyn = YYR1[yyn];		/* consult goto table to find next state */
		yyj = YYPGO[yyn] + *yyps + 1;
		if( (yyj >= YYLAST) || (YYCHK[ yystate = YYACT[yyj] ] != -yyn) ) {
			yystate = YYACT[YYPGO[yyn]];
			}
 		yyprintf("goto state %4d\n", yystate, 0, 0);
#ifdef YYDUMP
		yydumpinfo();
#endif
		switch(yym){
			
case 3:
#line 189 "asmparse.y"
{ PASM->EndClass(); } break;
case 4:
#line 190 "asmparse.y"
{ PASM->EndNameSpace(); } break;
case 5:
#line 191 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                                                  {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                                     PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                                                  PASM->EndMethod(); } break;
case 12:
#line 201 "asmparse.y"
{ PASMM->EndAssembly(); } break;
case 13:
#line 202 "asmparse.y"
{ PASMM->EndAssembly(); } break;
case 14:
#line 203 "asmparse.y"
{ PASMM->EndComType(); } break;
case 15:
#line 204 "asmparse.y"
{ PASMM->EndManifestRes(); } break;
case 19:
#line 208 "asmparse.y"
{ 
#ifdef _PREFAST_
#pragma warning(push)
#pragma warning(disable:22011) // Suppress PREFast warning about integer overflow/underflow
#endif
                                                                                  PASM->m_dwSubsystem = yypvt[-0].int32;
#ifdef _PREFAST_
#pragma warning(pop)
#endif
                                                                                } break;
case 20:
#line 218 "asmparse.y"
{ PASM->m_dwComImageFlags = yypvt[-0].int32; } break;
case 21:
#line 219 "asmparse.y"
{ PASM->m_dwFileAlignment = yypvt[-0].int32; 
                                                                                  if((yypvt[-0].int32 & (yypvt[-0].int32 - 1))||(yypvt[-0].int32 < 0x200)||(yypvt[-0].int32 > 0x10000))
                                                                                    PASM->report->error("Invalid file alignment, must be power of 2 from 0x200 to 0x10000\n");} break;
case 22:
#line 222 "asmparse.y"
{ PASM->m_stBaseAddress = (ULONGLONG)(*(yypvt[-0].int64)); delete yypvt[-0].int64; 
                                                                                  if(PASM->m_stBaseAddress & 0xFFFF)
                                                                                    PASM->report->error("Invalid image base, must be 0x10000-aligned\n");} break;
case 23:
#line 225 "asmparse.y"
{ PASM->m_stSizeOfStackReserve = (size_t)(*(yypvt[-0].int64)); delete yypvt[-0].int64; } break;
case 28:
#line 230 "asmparse.y"
{ PASM->m_fIsMscorlib = TRUE; } break;
case 31:
#line 237 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 32:
#line 238 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yyval.binstr->append(yypvt[-0].binstr); delete yypvt[-0].binstr; } break;
case 33:
#line 241 "asmparse.y"
{ LPCSTRToGuid(yypvt[-0].string,&(PASM->m_guidLang)); } break;
case 34:
#line 242 "asmparse.y"
{ LPCSTRToGuid(yypvt[-2].string,&(PASM->m_guidLang)); 
                                                                                  LPCSTRToGuid(yypvt[-0].string,&(PASM->m_guidLangVendor));} break;
case 35:
#line 244 "asmparse.y"
{ LPCSTRToGuid(yypvt[-4].string,&(PASM->m_guidLang)); 
                                                                                  LPCSTRToGuid(yypvt[-2].string,&(PASM->m_guidLangVendor));
                                                                                  LPCSTRToGuid(yypvt[-2].string,&(PASM->m_guidDoc));} break;
case 36:
#line 249 "asmparse.y"
{ yyval.string = yypvt[-0].string; } break;
case 37:
#line 250 "asmparse.y"
{ yyval.string = yypvt[-0].string; } break;
case 38:
#line 253 "asmparse.y"
{ yyval.string = yypvt[-0].string; } break;
case 39:
#line 254 "asmparse.y"
{ yyval.string = yypvt[-0].string; } break;
case 40:
#line 255 "asmparse.y"
{ yyval.string = newStringWDel(yypvt[-2].string, '.', yypvt[-0].string); } break;
case 41:
#line 258 "asmparse.y"
{ yyval.int32 = yypvt[-0].int32; } break;
case 42:
#line 261 "asmparse.y"
{ yyval.int64 = yypvt[-0].int64; } break;
case 43:
#line 262 "asmparse.y"
{ yyval.int64 = neg ? new __int64(yypvt[-0].int32) : new __int64((unsigned)yypvt[-0].int32); } break;
case 44:
#line 265 "asmparse.y"
{ yyval.float64 = yypvt[-0].float64; } break;
case 45:
#line 266 "asmparse.y"
{ float f; *((__int32*) (&f)) = yypvt[-1].int32; yyval.float64 = new double(f); } break;
case 46:
#line 267 "asmparse.y"
{ yyval.float64 = (double*) yypvt[-1].int64; } break;
case 47:
#line 271 "asmparse.y"
{ PASM->AddTypeDef(yypvt[-2].binstr,yypvt[-0].string); } break;
case 48:
#line 272 "asmparse.y"
{ PASM->AddTypeDef(yypvt[-2].token,yypvt[-0].string); } break;
case 49:
#line 273 "asmparse.y"
{ PASM->AddTypeDef(yypvt[-2].token,yypvt[-0].string); } break;
case 50:
#line 274 "asmparse.y"
{ yypvt[-2].cad->tkOwner = 0; PASM->AddTypeDef(yypvt[-2].cad,yypvt[-0].string); } break;
case 51:
#line 275 "asmparse.y"
{ PASM->AddTypeDef(yypvt[-2].cad,yypvt[-0].string); } break;
case 52:
#line 280 "asmparse.y"
{ DefineVar(yypvt[-0].string, NULL); } break;
case 53:
#line 281 "asmparse.y"
{ DefineVar(yypvt[-1].string, yypvt[-0].binstr); } break;
case 54:
#line 282 "asmparse.y"
{ UndefVar(yypvt[-0].string); } break;
case 55:
#line 283 "asmparse.y"
{ SkipToken = !IsVarDefined(yypvt[-0].string);
                                                                                  IfEndif++;
                                                                                } break;
case 56:
#line 286 "asmparse.y"
{ SkipToken = IsVarDefined(yypvt[-0].string);
                                                                                  IfEndif++;
                                                                                } break;
case 57:
#line 289 "asmparse.y"
{ if(IfEndif == 1) SkipToken = !SkipToken;} break;
case 58:
#line 290 "asmparse.y"
{ if(IfEndif == 0)
                                                                                    PASM->report->error("Unmatched #endif\n");
                                                                                  else IfEndif--;
                                                                                } break;
case 59:
#line 294 "asmparse.y"
{ _ASSERTE(!"yylex should have dealt with this"); } break;
case 60:
#line 295 "asmparse.y"
{ } break;
case 61:
#line 299 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yypvt[-0].token, NULL); } break;
case 62:
#line 300 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yypvt[-2].token, yypvt[-0].binstr); } break;
case 63:
#line 301 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yypvt[-4].token, yypvt[-1].binstr); } break;
case 64:
#line 302 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yypvt[-2].int32, yypvt[-1].binstr); } break;
case 65:
#line 305 "asmparse.y"
{ yyval.cad = new CustomDescr(yypvt[-2].token, yypvt[-0].token, NULL); } break;
case 66:
#line 306 "asmparse.y"
{ yyval.cad = new CustomDescr(yypvt[-4].token, yypvt[-2].token, yypvt[-0].binstr); } break;
case 67:
#line 308 "asmparse.y"
{ yyval.cad = new CustomDescr(yypvt[-6].token, yypvt[-4].token, yypvt[-1].binstr); } break;
case 68:
#line 309 "asmparse.y"
{ yyval.cad = new CustomDescr(PASM->m_tkCurrentCVOwner, yypvt[-2].int32, yypvt[-1].binstr); } break;
case 69:
#line 312 "asmparse.y"
{ yyval.int32 = yypvt[-2].token; bParsingByteArray = TRUE; } break;
case 70:
#line 316 "asmparse.y"
{ PASM->m_pCustomDescrList = NULL;
                                                                                  PASM->m_tkCurrentCVOwner = yypvt[-4].token;
                                                                                  yyval.int32 = yypvt[-2].token; bParsingByteArray = TRUE; } break;
case 71:
#line 321 "asmparse.y"
{ yyval.token = yypvt[-0].token; } break;
case 72:
#line 324 "asmparse.y"
{ yyval.token = yypvt[-0].token; } break;
case 73:
#line 325 "asmparse.y"
{ yyval.token = yypvt[-0].token; } break;
case 74:
#line 329 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                                                  yyval.binstr->appendInt16(nCustomBlobNVPairs);
                                                                                  yyval.binstr->append(yypvt[-0].binstr);
                                                                                  nCustomBlobNVPairs = 0; } break;
case 75:
#line 335 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt16(VAL16(0x0001)); } break;
case 76:
#line 336 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr;
                                                                                  yyval.binstr->appendFrom(yypvt[-0].binstr, (*(yypvt[-0].binstr->ptr()) == ELEMENT_TYPE_SZARRAY) ? 2 : 1); } break;
case 77:
#line 338 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; } break;
case 78:
#line 341 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 79:
#line 343 "asmparse.y"
{ yyval.binstr = yypvt[-5].binstr; yyval.binstr->appendInt8(yypvt[-4].int32);
                                                                                  yyval.binstr->append(yypvt[-3].binstr); 
                                                                                  AppendStringWithLength(yyval.binstr,yypvt[-2].string);
                                                                                  yyval.binstr->appendFrom(yypvt[-0].binstr, (*(yypvt[-0].binstr->ptr()) == ELEMENT_TYPE_SZARRAY) ? 2 : 1);
                                                                                  nCustomBlobNVPairs++; } break;
case 80:
#line 348 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; } break;
case 81:
#line 351 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_FIELD; } break;
case 82:
#line 352 "asmparse.y"
{ yyval.int32 = SERIALIZATION_TYPE_PROPERTY; } break;
case 83:
#line 355 "asmparse.y"
{ if(yypvt[-0].cad->tkOwner && !yypvt[-0].cad->tkInterfacePair) 
                                                                                    PASM->DefineCV(yypvt[-0].cad);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(yypvt[-0].cad); } break;
case 84:
#line 359 "asmparse.y"
{ PASM->DefineCV(yypvt[-0].cad); } break;
case 85:
#line 360 "asmparse.y"
{ CustomDescr* pNew = new CustomDescr(yypvt[-0].tdd->m_pCA);
                                                                                  if(pNew->tkOwner == 0) pNew->tkOwner = PASM->m_tkCurrentCVOwner;
                                                                                  if(pNew->tkOwner) 
                                                                                    PASM->DefineCV(pNew);
                                                                                  else if(PASM->m_pCustomDescrList)
                                                                                    PASM->m_pCustomDescrList->PUSH(pNew); } break;
case 86:
#line 368 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 87:
#line 369 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); } break;
case 88:
#line 370 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TAGGED_OBJECT); } break;
case 89:
#line 371 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,yypvt[-0].string); } break;
case 90:
#line 373 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yypvt[-0].token)); } break;
case 91:
#line 375 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 92:
#line 380 "asmparse.y"
{ PASMM->SetModuleName(NULL); PASM->m_tkCurrentCVOwner=1; } break;
case 93:
#line 381 "asmparse.y"
{ PASMM->SetModuleName(yypvt[-0].string); PASM->m_tkCurrentCVOwner=1; } break;
case 94:
#line 382 "asmparse.y"
{ BinStr* pbs = new BinStr();
                                                                                  unsigned L = (unsigned)strlen(yypvt[-0].string);
                                                                                  memcpy((char*)(pbs->getBuff(L)),yypvt[-0].string,L);
                                                                                  PASM->EmitImport(pbs); delete pbs;} break;
case 95:
#line 389 "asmparse.y"
{ /*PASM->SetDataSection(); PASM->EmitDataLabel($7);*/
                                                                                  PASM->m_VTFList.PUSH(new VTFEntry((USHORT)yypvt[-4].int32, (USHORT)yypvt[-2].int32, yypvt[-0].string)); } break;
case 96:
#line 393 "asmparse.y"
{ yyval.int32 = 0; } break;
case 97:
#line 394 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | COR_VTABLE_32BIT; } break;
case 98:
#line 395 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | COR_VTABLE_64BIT; } break;
case 99:
#line 396 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | COR_VTABLE_FROM_UNMANAGED; } break;
case 100:
#line 397 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | COR_VTABLE_CALL_MOST_DERIVED; } break;
case 101:
#line 398 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN; } break;
case 102:
#line 401 "asmparse.y"
{ PASM->m_pVTable = yypvt[-1].binstr; } break;
case 103:
#line 404 "asmparse.y"
{ bParsingByteArray = TRUE; } break;
case 104:
#line 408 "asmparse.y"
{ PASM->StartNameSpace(yypvt[-0].string); } break;
case 105:
#line 411 "asmparse.y"
{ newclass = TRUE; } break;
case 106:
#line 414 "asmparse.y"
{ if(yypvt[-0].typarlist) FixupConstraints();
                                                                                  PASM->StartClass(yypvt[-1].string, yypvt[-2].classAttr, yypvt[-0].typarlist); 
                                                                                  TyParFixupList.RESET(false);
                                                                                  newclass = FALSE;
                                                                                } break;
case 107:
#line 420 "asmparse.y"
{ PASM->AddClass(); } break;
case 108:
#line 423 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) 0; } break;
case 109:
#line 424 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdVisibilityMask) | tdPublic); } break;
case 110:
#line 425 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdVisibilityMask) | tdNotPublic); } break;
case 111:
#line 426 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | 0x80000000 | tdSealed); } break;
case 112:
#line 427 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | 0x40000000); } break;
case 113:
#line 428 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdInterface | tdAbstract); } break;
case 114:
#line 429 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdSealed); } break;
case 115:
#line 430 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdAbstract); } break;
case 116:
#line 431 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdLayoutMask) | tdAutoLayout); } break;
case 117:
#line 432 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdLayoutMask) | tdSequentialLayout); } break;
case 118:
#line 433 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdLayoutMask) | tdExplicitLayout); } break;
case 119:
#line 434 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdStringFormatMask) | tdAnsiClass); } break;
case 120:
#line 435 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdStringFormatMask) | tdUnicodeClass); } break;
case 121:
#line 436 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdStringFormatMask) | tdAutoClass); } break;
case 122:
#line 437 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-1].classAttr & ~tdStringFormatMask) | tdUTF8Class); } break;
case 123:
#line 438 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdImport); } break;
case 124:
#line 439 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdSerializable); } break;
case 125:
#line 440 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdWindowsRuntime); } break;
case 126:
#line 441 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-2].classAttr & ~tdVisibilityMask) | tdNestedPublic); } break;
case 127:
#line 442 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-2].classAttr & ~tdVisibilityMask) | tdNestedPrivate); } break;
case 128:
#line 443 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-2].classAttr & ~tdVisibilityMask) | tdNestedFamily); } break;
case 129:
#line 444 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-2].classAttr & ~tdVisibilityMask) | tdNestedAssembly); } break;
case 130:
#line 445 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-2].classAttr & ~tdVisibilityMask) | tdNestedFamANDAssem); } break;
case 131:
#line 446 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) ((yypvt[-2].classAttr & ~tdVisibilityMask) | tdNestedFamORAssem); } break;
case 132:
#line 447 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdBeforeFieldInit); } break;
case 133:
#line 448 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr | tdSpecialName); } break;
case 134:
#line 449 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].classAttr); } break;
case 135:
#line 450 "asmparse.y"
{ yyval.classAttr = (CorRegTypeAttr) (yypvt[-1].int32); } break;
case 137:
#line 454 "asmparse.y"
{ PASM->m_crExtends = yypvt[-0].token; } break;
case 142:
#line 465 "asmparse.y"
{ PASM->AddToImplList(yypvt[-0].token); } break;
case 143:
#line 466 "asmparse.y"
{ PASM->AddToImplList(yypvt[-0].token); } break;
case 144:
#line 470 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 145:
#line 471 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 146:
#line 474 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yypvt[-0].token); } break;
case 147:
#line 475 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yyval.binstr->appendInt32(yypvt[-0].token); } break;
case 148:
#line 478 "asmparse.y"
{ yyval.typarlist = NULL; PASM->m_TyParList = NULL;} break;
case 149:
#line 479 "asmparse.y"
{ yyval.typarlist = yypvt[-1].typarlist;   PASM->m_TyParList = yypvt[-1].typarlist;} break;
case 150:
#line 482 "asmparse.y"
{ yyval.int32 = gpCovariant; } break;
case 151:
#line 483 "asmparse.y"
{ yyval.int32 = gpContravariant; } break;
case 152:
#line 484 "asmparse.y"
{ yyval.int32 = gpReferenceTypeConstraint; } break;
case 153:
#line 485 "asmparse.y"
{ yyval.int32 = gpNotNullableValueTypeConstraint; } break;
case 154:
#line 486 "asmparse.y"
{ yyval.int32 = gpDefaultConstructorConstraint; } break;
case 155:
#line 489 "asmparse.y"
{ yyval.int32 = 0; } break;
case 156:
#line 490 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | yypvt[-0].int32; } break;
case 157:
#line 493 "asmparse.y"
{yyval.typarlist = new TyParList(yypvt[-3].int32, yypvt[-2].binstr, yypvt[-1].string, yypvt[-0].typarlist);} break;
case 158:
#line 494 "asmparse.y"
{yyval.typarlist = new TyParList(yypvt[-2].int32, NULL, yypvt[-1].string, yypvt[-0].typarlist);} break;
case 159:
#line 497 "asmparse.y"
{ yyval.typarlist = NULL; } break;
case 160:
#line 498 "asmparse.y"
{ yyval.typarlist = yypvt[-0].typarlist; } break;
case 161:
#line 501 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; } break;
case 162:
#line 504 "asmparse.y"
{ yyval.int32= 0; } break;
case 163:
#line 505 "asmparse.y"
{ yyval.int32 = yypvt[-0].int32; } break;
case 164:
#line 508 "asmparse.y"
{ yyval.int32 = yypvt[-2].int32; } break;
case 165:
#line 512 "asmparse.y"
{ if(PASM->m_pCurMethod->m_ulLines[1] ==0)
                                                              {  PASM->m_pCurMethod->m_ulLines[1] = PASM->m_ulCurLine;
                                                                 PASM->m_pCurMethod->m_ulColumns[1]=PASM->m_ulCurColumn;}
                                                              PASM->EndMethod(); } break;
case 166:
#line 516 "asmparse.y"
{ PASM->EndClass(); } break;
case 167:
#line 517 "asmparse.y"
{ PASM->EndEvent(); } break;
case 168:
#line 518 "asmparse.y"
{ PASM->EndProp(); } break;
case 174:
#line 524 "asmparse.y"
{ PASM->m_pCurClass->m_ulSize = yypvt[-0].int32; } break;
case 175:
#line 525 "asmparse.y"
{ PASM->m_pCurClass->m_ulPack = yypvt[-0].int32; } break;
case 176:
#line 526 "asmparse.y"
{ PASMM->EndComType(); } break;
case 177:
#line 528 "asmparse.y"
{ BinStr *sig1 = parser->MakeSig(yypvt[-7].int32, yypvt[-6].binstr, yypvt[-1].binstr); 
                                                                  BinStr *sig2 = new BinStr(); sig2->append(sig1); 
                                                                  PASM->AddMethodImpl(yypvt[-11].token,yypvt[-9].string,sig1,yypvt[-5].token,yypvt[-3].string,sig2);
                                                                  PASM->ResetArgNameList(); 
                                                                } break;
case 178:
#line 534 "asmparse.y"
{ PASM->AddMethodImpl(yypvt[-17].token,yypvt[-15].string,
                                                                      (yypvt[-14].int32==0 ? parser->MakeSig(yypvt[-19].int32,yypvt[-18].binstr,yypvt[-12].binstr) :
                                                                      parser->MakeSig(yypvt[-19].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yypvt[-18].binstr,yypvt[-12].binstr,yypvt[-14].int32)),
                                                                      yypvt[-6].token,yypvt[-4].string,
                                                                      (yypvt[-3].int32==0 ? parser->MakeSig(yypvt[-8].int32,yypvt[-7].binstr,yypvt[-1].binstr) :
                                                                      parser->MakeSig(yypvt[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yypvt[-7].binstr,yypvt[-1].binstr,yypvt[-3].int32))); 
                                                                   PASM->ResetArgNameList();
                                                                 } break;
case 181:
#line 544 "asmparse.y"
{ if((yypvt[-1].int32 > 0) && (yypvt[-1].int32 <= (int)PASM->m_pCurClass->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[yypvt[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            } break;
case 182:
#line 549 "asmparse.y"
{ int n = PASM->m_pCurClass->FindTyPar(yypvt[-0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurClass->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yypvt[-0].string);
                                                            } break;
case 183:
#line 555 "asmparse.y"
{ yypvt[-0].cad->tkInterfacePair = yypvt[-1].token;     
                                                                        if(PASM->m_pCustomDescrList)
                                                                            PASM->m_pCustomDescrList->PUSH(yypvt[-0].cad);
                                                                      } break;
case 184:
#line 563 "asmparse.y"
{ yypvt[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD);
                                                              PASM->AddField(yypvt[-2].string, yypvt[-3].binstr, yypvt[-4].fieldAttr, yypvt[-1].string, yypvt[-0].binstr, yypvt[-5].int32); } break;
case 185:
#line 567 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) 0; } break;
case 186:
#line 568 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yypvt[-1].fieldAttr | fdStatic); } break;
case 187:
#line 569 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yypvt[-1].fieldAttr & ~mdMemberAccessMask) | fdPublic); } break;
case 188:
#line 570 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yypvt[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivate); } break;
case 189:
#line 571 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yypvt[-1].fieldAttr & ~mdMemberAccessMask) | fdFamily); } break;
case 190:
#line 572 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yypvt[-1].fieldAttr | fdInitOnly); } break;
case 191:
#line 573 "asmparse.y"
{ yyval.fieldAttr = yypvt[-1].fieldAttr; } break;
case 192:
#line 574 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yypvt[-1].fieldAttr | fdSpecialName); } break;
case 193:
#line 587 "asmparse.y"
{ PASM->m_pMarshal = yypvt[-1].binstr; } break;
case 194:
#line 588 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yypvt[-1].fieldAttr & ~mdMemberAccessMask) | fdAssembly); } break;
case 195:
#line 589 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yypvt[-1].fieldAttr & ~mdMemberAccessMask) | fdFamANDAssem); } break;
case 196:
#line 590 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yypvt[-1].fieldAttr & ~mdMemberAccessMask) | fdFamORAssem); } break;
case 197:
#line 591 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) ((yypvt[-1].fieldAttr & ~mdMemberAccessMask) | fdPrivateScope); } break;
case 198:
#line 592 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yypvt[-1].fieldAttr | fdLiteral); } break;
case 199:
#line 593 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yypvt[-1].fieldAttr | fdNotSerialized); } break;
case 200:
#line 594 "asmparse.y"
{ yyval.fieldAttr = (CorFieldAttr) (yypvt[-1].int32); } break;
case 201:
#line 597 "asmparse.y"
{ yyval.string = 0; } break;
case 202:
#line 598 "asmparse.y"
{ yyval.string = yypvt[-0].string; } break;
case 203:
#line 601 "asmparse.y"
{ yyval.binstr = NULL; } break;
case 204:
#line 602 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 205:
#line 605 "asmparse.y"
{ yyval.int32 = 0xFFFFFFFF; } break;
case 206:
#line 606 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32; } break;
case 207:
#line 611 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yypvt[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yypvt[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n"); 
                                                                 yyval.token = PASM->MakeMemberRef(yypvt[-6].token, yypvt[-4].string, parser->MakeSig(yypvt[-8].int32|iCallConv, yypvt[-7].binstr, yypvt[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yypvt[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n"); 
                                                                 mr = PASM->MakeMemberRef(yypvt[-6].token, yypvt[-4].string, 
                                                                   parser->MakeSig(yypvt[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yypvt[-7].binstr, yypvt[-1].binstr, corCountArgs(yypvt[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr, 
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yypvt[-3].binstr));
                                                               }
                                                             } break;
case 208:
#line 628 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yypvt[-8].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n"); 
                                                               yyval.token = PASM->MakeMemberRef(yypvt[-6].token, yypvt[-4].string, 
                                                                 parser->MakeSig(yypvt[-8].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yypvt[-7].binstr, yypvt[-1].binstr, yypvt[-3].int32));
                                                             } break;
case 209:
#line 634 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if (yypvt[-3].binstr == NULL)
                                                               {
                                                                 if((iCallConv)&&((yypvt[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n"); 
                                                                 yyval.token = PASM->MakeMemberRef(mdTokenNil, yypvt[-4].string, parser->MakeSig(yypvt[-6].int32|iCallConv, yypvt[-5].binstr, yypvt[-1].binstr));
                                                               }
                                                               else
                                                               {
                                                                 mdToken mr;
                                                                 if((iCallConv)&&((yypvt[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n"); 
                                                                 mr = PASM->MakeMemberRef(mdTokenNil, yypvt[-4].string, parser->MakeSig(yypvt[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yypvt[-5].binstr, yypvt[-1].binstr, corCountArgs(yypvt[-3].binstr)));
                                                                 yyval.token = PASM->MakeMethodSpec(mr, 
                                                                   parser->MakeSig(IMAGE_CEE_CS_CALLCONV_INSTANTIATION, 0, yypvt[-3].binstr));
                                                               }
                                                             } break;
case 210:
#line 650 "asmparse.y"
{ PASM->ResetArgNameList();
                                                               if((iCallConv)&&((yypvt[-6].int32 & iCallConv) != iCallConv)) parser->warn("'instance' added to method's calling convention\n"); 
                                                               yyval.token = PASM->MakeMemberRef(mdTokenNil, yypvt[-4].string, parser->MakeSig(yypvt[-6].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC|iCallConv, yypvt[-5].binstr, yypvt[-1].binstr, yypvt[-3].int32));
                                                             } break;
case 211:
#line 654 "asmparse.y"
{ yyval.token = yypvt[-0].token; } break;
case 212:
#line 655 "asmparse.y"
{ yyval.token = yypvt[-0].tdd->m_tkTypeSpec; } break;
case 213:
#line 656 "asmparse.y"
{ yyval.token = yypvt[-0].tdd->m_tkTypeSpec; } break;
case 214:
#line 659 "asmparse.y"
{ yyval.int32 = (yypvt[-0].int32 | IMAGE_CEE_CS_CALLCONV_HASTHIS); } break;
case 215:
#line 660 "asmparse.y"
{ yyval.int32 = (yypvt[-0].int32 | IMAGE_CEE_CS_CALLCONV_EXPLICITTHIS); } break;
case 216:
#line 661 "asmparse.y"
{ yyval.int32 = yypvt[-0].int32; } break;
case 217:
#line 662 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32; } break;
case 218:
#line 665 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; } break;
case 219:
#line 666 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_DEFAULT; } break;
case 220:
#line 667 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_VARARG; } break;
case 221:
#line 668 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_C; } break;
case 222:
#line 669 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_STDCALL; } break;
case 223:
#line 670 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_THISCALL; } break;
case 224:
#line 671 "asmparse.y"
{ yyval.int32 = IMAGE_CEE_CS_CALLCONV_FASTCALL; } break;
case 225:
#line 674 "asmparse.y"
{ yyval.token = yypvt[-1].int32; } break;
case 226:
#line 677 "asmparse.y"
{ yyval.token = yypvt[-0].token; 
                                                               PASM->delArgNameList(PASM->m_firstArgName);
                                                               PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                               PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                               PASM->SetMemberRefFixup(yypvt[-0].token,iOpcodeLen); } break;
case 227:
#line 683 "asmparse.y"
{ yypvt[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD); 
                                                               yyval.token = PASM->MakeMemberRef(yypvt[-2].token, yypvt[-0].string, yypvt[-3].binstr); 
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); } break;
case 228:
#line 687 "asmparse.y"
{ yypvt[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD); 
                                                               yyval.token = PASM->MakeMemberRef(NULL, yypvt[-0].string, yypvt[-1].binstr); 
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); } break;
case 229:
#line 690 "asmparse.y"
{ yyval.token = yypvt[-0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); } break;
case 230:
#line 692 "asmparse.y"
{ yyval.token = yypvt[-0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); } break;
case 231:
#line 694 "asmparse.y"
{ yyval.token = yypvt[-0].token; 
                                                               PASM->SetMemberRefFixup(yyval.token,iOpcodeLen); } break;
case 232:
#line 699 "asmparse.y"
{ PASM->ResetEvent(yypvt[-0].string, yypvt[-1].token, yypvt[-2].eventAttr); } break;
case 233:
#line 700 "asmparse.y"
{ PASM->ResetEvent(yypvt[-0].string, mdTypeRefNil, yypvt[-1].eventAttr); } break;
case 234:
#line 704 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) 0; } break;
case 235:
#line 705 "asmparse.y"
{ yyval.eventAttr = yypvt[-1].eventAttr; } break;
case 236:
#line 706 "asmparse.y"
{ yyval.eventAttr = (CorEventAttr) (yypvt[-1].eventAttr | evSpecialName); } break;
case 239:
#line 713 "asmparse.y"
{ PASM->SetEventMethod(0, yypvt[-0].token); } break;
case 240:
#line 714 "asmparse.y"
{ PASM->SetEventMethod(1, yypvt[-0].token); } break;
case 241:
#line 715 "asmparse.y"
{ PASM->SetEventMethod(2, yypvt[-0].token); } break;
case 242:
#line 716 "asmparse.y"
{ PASM->SetEventMethod(3, yypvt[-0].token); } break;
case 247:
#line 725 "asmparse.y"
{ PASM->ResetProp(yypvt[-4].string, 
                                                              parser->MakeSig((IMAGE_CEE_CS_CALLCONV_PROPERTY |
                                                              (yypvt[-6].int32 & IMAGE_CEE_CS_CALLCONV_HASTHIS)),yypvt[-5].binstr,yypvt[-2].binstr), yypvt[-7].propAttr, yypvt[-0].binstr);} break;
case 248:
#line 730 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) 0; } break;
case 249:
#line 731 "asmparse.y"
{ yyval.propAttr = yypvt[-1].propAttr; } break;
case 250:
#line 732 "asmparse.y"
{ yyval.propAttr = (CorPropertyAttr) (yypvt[-1].propAttr | prSpecialName); } break;
case 253:
#line 740 "asmparse.y"
{ PASM->SetPropMethod(0, yypvt[-0].token); } break;
case 254:
#line 741 "asmparse.y"
{ PASM->SetPropMethod(1, yypvt[-0].token); } break;
case 255:
#line 742 "asmparse.y"
{ PASM->SetPropMethod(2, yypvt[-0].token); } break;
case 260:
#line 750 "asmparse.y"
{ PASM->ResetForNextMethod(); 
                                                              uMethodBeginLine = PASM->m_ulCurLine;
                                                              uMethodBeginColumn=PASM->m_ulCurColumn;
                                                            } break;
case 261:
#line 756 "asmparse.y"
{ yyval.binstr = NULL; } break;
case 262:
#line 757 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; } break;
case 263:
#line 760 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 264:
#line 761 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; } break;
case 265:
#line 764 "asmparse.y"
{ bParsingByteArray = TRUE; } break;
case 266:
#line 768 "asmparse.y"
{ BinStr* sig;
                                                              if (yypvt[-5].typarlist == NULL) sig = parser->MakeSig(yypvt[-10].int32, yypvt[-8].binstr, yypvt[-3].binstr);
                                                              else {
                                                               FixupTyPars(yypvt[-8].binstr);
                                                               sig = parser->MakeSig(yypvt[-10].int32 | IMAGE_CEE_CS_CALLCONV_GENERIC, yypvt[-8].binstr, yypvt[-3].binstr, yypvt[-5].typarlist->Count());
                                                               FixupConstraints();
                                                              }
                                                              PASM->StartMethod(yypvt[-6].string, sig, yypvt[-11].methAttr, yypvt[-7].binstr, yypvt[-9].int32, yypvt[-5].typarlist);
                                                              TyParFixupList.RESET(false);
                                                              PASM->SetImplAttr((USHORT)yypvt[-1].implAttr);  
                                                              PASM->m_pCurMethod->m_ulLines[0] = uMethodBeginLine;
                                                              PASM->m_pCurMethod->m_ulColumns[0]=uMethodBeginColumn; 
                                                            } break;
case 267:
#line 783 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) 0; } break;
case 268:
#line 784 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdStatic); } break;
case 269:
#line 785 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yypvt[-1].methAttr & ~mdMemberAccessMask) | mdPublic); } break;
case 270:
#line 786 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yypvt[-1].methAttr & ~mdMemberAccessMask) | mdPrivate); } break;
case 271:
#line 787 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yypvt[-1].methAttr & ~mdMemberAccessMask) | mdFamily); } break;
case 272:
#line 788 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdFinal); } break;
case 273:
#line 789 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdSpecialName); } break;
case 274:
#line 790 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdVirtual); } break;
case 275:
#line 791 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdCheckAccessOnOverride); } break;
case 276:
#line 792 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdAbstract); } break;
case 277:
#line 793 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yypvt[-1].methAttr & ~mdMemberAccessMask) | mdAssem); } break;
case 278:
#line 794 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yypvt[-1].methAttr & ~mdMemberAccessMask) | mdFamANDAssem); } break;
case 279:
#line 795 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yypvt[-1].methAttr & ~mdMemberAccessMask) | mdFamORAssem); } break;
case 280:
#line 796 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) ((yypvt[-1].methAttr & ~mdMemberAccessMask) | mdPrivateScope); } break;
case 281:
#line 797 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdHideBySig); } break;
case 282:
#line 798 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdNewSlot); } break;
case 283:
#line 799 "asmparse.y"
{ yyval.methAttr = yypvt[-1].methAttr; } break;
case 284:
#line 800 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdUnmanagedExport); } break;
case 285:
#line 801 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].methAttr | mdRequireSecObject); } break;
case 286:
#line 802 "asmparse.y"
{ yyval.methAttr = (CorMethodAttr) (yypvt[-1].int32); } break;
case 287:
#line 804 "asmparse.y"
{ PASM->SetPinvoke(yypvt[-4].binstr,0,yypvt[-2].binstr,yypvt[-1].pinvAttr); 
                                                              yyval.methAttr = (CorMethodAttr) (yypvt[-7].methAttr | mdPinvokeImpl); } break;
case 288:
#line 807 "asmparse.y"
{ PASM->SetPinvoke(yypvt[-2].binstr,0,NULL,yypvt[-1].pinvAttr); 
                                                              yyval.methAttr = (CorMethodAttr) (yypvt[-5].methAttr | mdPinvokeImpl); } break;
case 289:
#line 810 "asmparse.y"
{ PASM->SetPinvoke(new BinStr(),0,NULL,yypvt[-1].pinvAttr); 
                                                              yyval.methAttr = (CorMethodAttr) (yypvt[-4].methAttr | mdPinvokeImpl); } break;
case 290:
#line 814 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) 0; } break;
case 291:
#line 815 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmNoMangle); } break;
case 292:
#line 816 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCharSetAnsi); } break;
case 293:
#line 817 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCharSetUnicode); } break;
case 294:
#line 818 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCharSetAuto); } break;
case 295:
#line 819 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCharSetUTF8); } break;
case 296:
#line 820 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmSupportsLastError); } break;
case 297:
#line 821 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCallConvWinapi); } break;
case 298:
#line 822 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCallConvCdecl); } break;
case 299:
#line 823 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCallConvStdcall); } break;
case 300:
#line 824 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCallConvThiscall); } break;
case 301:
#line 825 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].pinvAttr | pmCallConvFastcall); } break;
case 302:
#line 826 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-3].pinvAttr | pmBestFitEnabled); } break;
case 303:
#line 827 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-3].pinvAttr | pmBestFitDisabled); } break;
case 304:
#line 828 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-3].pinvAttr | pmThrowOnUnmappableCharEnabled); } break;
case 305:
#line 829 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-3].pinvAttr | pmThrowOnUnmappableCharDisabled); } break;
case 306:
#line 830 "asmparse.y"
{ yyval.pinvAttr = (CorPinvokeMap) (yypvt[-1].int32); } break;
case 307:
#line 833 "asmparse.y"
{ yyval.string = newString(COR_CTOR_METHOD_NAME); } break;
case 308:
#line 834 "asmparse.y"
{ yyval.string = newString(COR_CCTOR_METHOD_NAME); } break;
case 309:
#line 835 "asmparse.y"
{ yyval.string = yypvt[-0].string; } break;
case 310:
#line 838 "asmparse.y"
{ yyval.int32 = 0; } break;
case 311:
#line 839 "asmparse.y"
{ yyval.int32 = yypvt[-3].int32 | pdIn; } break;
case 312:
#line 840 "asmparse.y"
{ yyval.int32 = yypvt[-3].int32 | pdOut; } break;
case 313:
#line 841 "asmparse.y"
{ yyval.int32 = yypvt[-3].int32 | pdOptional; } break;
case 314:
#line 842 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 + 1; } break;
case 315:
#line 845 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (miIL | miManaged); } break;
case 316:
#line 846 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yypvt[-1].implAttr & 0xFFF4) | miNative); } break;
case 317:
#line 847 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yypvt[-1].implAttr & 0xFFF4) | miIL); } break;
case 318:
#line 848 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yypvt[-1].implAttr & 0xFFF4) | miOPTIL); } break;
case 319:
#line 849 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yypvt[-1].implAttr & 0xFFFB) | miManaged); } break;
case 320:
#line 850 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) ((yypvt[-1].implAttr & 0xFFFB) | miUnmanaged); } break;
case 321:
#line 851 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miForwardRef); } break;
case 322:
#line 852 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miPreserveSig); } break;
case 323:
#line 853 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miRuntime); } break;
case 324:
#line 854 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miInternalCall); } break;
case 325:
#line 855 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miSynchronized); } break;
case 326:
#line 856 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miNoInlining); } break;
case 327:
#line 857 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miAggressiveInlining); } break;
case 328:
#line 858 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].implAttr | miNoOptimization); } break;
case 329:
#line 859 "asmparse.y"
{ yyval.implAttr = (CorMethodImpl) (yypvt[-1].int32); } break;
case 330:
#line 862 "asmparse.y"
{ PASM->delArgNameList(PASM->m_firstArgName); PASM->m_firstArgName = NULL;PASM->m_lastArgName = NULL; 
                                                            } break;
case 333:
#line 870 "asmparse.y"
{ PASM->EmitByte(yypvt[-0].int32); } break;
case 334:
#line 871 "asmparse.y"
{ delete PASM->m_SEHD; PASM->m_SEHD = PASM->m_SEHDstack.POP(); } break;
case 335:
#line 872 "asmparse.y"
{ PASM->EmitMaxStack(yypvt[-0].int32); } break;
case 336:
#line 873 "asmparse.y"
{ PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yypvt[-1].binstr)); 
                                                            } break;
case 337:
#line 875 "asmparse.y"
{ PASM->EmitZeroInit(); 
                                                              PASM->EmitLocals(parser->MakeSig(IMAGE_CEE_CS_CALLCONV_LOCAL_SIG, 0, yypvt[-1].binstr)); 
                                                            } break;
case 338:
#line 878 "asmparse.y"
{ PASM->EmitEntryPoint(); } break;
case 339:
#line 879 "asmparse.y"
{ PASM->EmitZeroInit(); } break;
case 342:
#line 882 "asmparse.y"
{ PASM->AddLabel(PASM->m_CurPC,yypvt[-1].string); /*PASM->EmitLabel($1);*/ } break;
case 348:
#line 888 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yypvt[-1].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = NULL;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = yypvt[-1].int32 + 0x8000;
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            } break;
case 349:
#line 898 "asmparse.y"
{ if(PASM->m_pCurMethod->m_dwExportOrdinal == 0xFFFFFFFF)
                                                              {
                                                                PASM->m_pCurMethod->m_dwExportOrdinal = yypvt[-3].int32;
                                                                PASM->m_pCurMethod->m_szExportAlias = yypvt[-0].string;
                                                                if(PASM->m_pCurMethod->m_wVTEntry == 0) PASM->m_pCurMethod->m_wVTEntry = 1;
                                                                if(PASM->m_pCurMethod->m_wVTSlot  == 0) PASM->m_pCurMethod->m_wVTSlot = yypvt[-3].int32 + 0x8000;
                                                              }
                                                              else
                                                                PASM->report->warn("Duplicate .export directive, ignored\n");
                                                            } break;
case 350:
#line 908 "asmparse.y"
{ PASM->m_pCurMethod->m_wVTEntry = (WORD)yypvt[-2].int32;
                                                              PASM->m_pCurMethod->m_wVTSlot = (WORD)yypvt[-0].int32; } break;
case 351:
#line 911 "asmparse.y"
{ PASM->AddMethodImpl(yypvt[-2].token,yypvt[-0].string,NULL,NULL,NULL,NULL); } break;
case 352:
#line 914 "asmparse.y"
{ PASM->AddMethodImpl(yypvt[-6].token,yypvt[-4].string,
                                                              (yypvt[-3].int32==0 ? parser->MakeSig(yypvt[-8].int32,yypvt[-7].binstr,yypvt[-1].binstr) :
                                                              parser->MakeSig(yypvt[-8].int32| IMAGE_CEE_CS_CALLCONV_GENERIC,yypvt[-7].binstr,yypvt[-1].binstr,yypvt[-3].int32))
                                                              ,NULL,NULL,NULL); 
                                                              PASM->ResetArgNameList();
                                                            } break;
case 354:
#line 921 "asmparse.y"
{ if((yypvt[-1].int32 > 0) && (yypvt[-1].int32 <= (int)PASM->m_pCurMethod->m_NumTyPars))
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[yypvt[-1].int32-1].CAList();
                                                              else
                                                                PASM->report->error("Type parameter index out of range\n");
                                                            } break;
case 355:
#line 926 "asmparse.y"
{ int n = PASM->m_pCurMethod->FindTyPar(yypvt[-0].string);
                                                              if(n >= 0)
                                                                PASM->m_pCustomDescrList = PASM->m_pCurMethod->m_TyPars[n].CAList();
                                                              else
                                                                PASM->report->error("Type parameter '%s' undefined\n",yypvt[-0].string);
                                                            } break;
case 356:
#line 933 "asmparse.y"
{ if( yypvt[-2].int32 ) {
                                                                ARG_NAME_LIST* pAN=PASM->findArg(PASM->m_pCurMethod->m_firstArgName, yypvt[-2].int32 - 1);
                                                                if(pAN)
                                                                {
                                                                    PASM->m_pCustomDescrList = &(pAN->CustDList);
                                                                    pAN->pValue = yypvt[-0].binstr;
                                                                }
                                                                else
                                                                {
                                                                    PASM->m_pCustomDescrList = NULL;
                                                                    if(yypvt[-0].binstr) delete yypvt[-0].binstr;
                                                                }
                                                              } else {
                                                                PASM->m_pCustomDescrList = &(PASM->m_pCurMethod->m_RetCustDList);
                                                                PASM->m_pCurMethod->m_pRetValue = yypvt[-0].binstr;
                                                              }
                                                              PASM->m_tkCurrentCVOwner = 0;
                                                            } break;
case 357:
#line 953 "asmparse.y"
{ PASM->m_pCurMethod->CloseScope(); } break;
case 358:
#line 956 "asmparse.y"
{ PASM->m_pCurMethod->OpenScope(); } break;
case 362:
#line 967 "asmparse.y"
{ PASM->m_SEHD->tryTo = PASM->m_CurPC; } break;
case 363:
#line 968 "asmparse.y"
{ PASM->SetTryLabels(yypvt[-2].string, yypvt[-0].string); } break;
case 364:
#line 969 "asmparse.y"
{ if(PASM->m_SEHD) {PASM->m_SEHD->tryFrom = yypvt[-2].int32;
                                                              PASM->m_SEHD->tryTo = yypvt[-0].int32;} } break;
case 365:
#line 973 "asmparse.y"
{ PASM->NewSEHDescriptor();
                                                              PASM->m_SEHD->tryFrom = PASM->m_CurPC; } break;
case 366:
#line 978 "asmparse.y"
{ PASM->EmitTry(); } break;
case 367:
#line 979 "asmparse.y"
{ PASM->EmitTry(); } break;
case 368:
#line 980 "asmparse.y"
{ PASM->EmitTry(); } break;
case 369:
#line 981 "asmparse.y"
{ PASM->EmitTry(); } break;
case 370:
#line 985 "asmparse.y"
{ PASM->m_SEHD->sehHandler = PASM->m_CurPC; } break;
case 371:
#line 986 "asmparse.y"
{ PASM->SetFilterLabel(yypvt[-0].string); 
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; } break;
case 372:
#line 988 "asmparse.y"
{ PASM->m_SEHD->sehFilter = yypvt[-0].int32; 
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; } break;
case 373:
#line 992 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FILTER;
                                                               PASM->m_SEHD->sehFilter = PASM->m_CurPC; } break;
case 374:
#line 996 "asmparse.y"
{  PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_NONE;
                                                               PASM->SetCatchClass(yypvt[-0].token); 
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; } break;
case 375:
#line 1001 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FINALLY;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; } break;
case 376:
#line 1005 "asmparse.y"
{ PASM->m_SEHD->sehClause = COR_ILEXCEPTION_CLAUSE_FAULT;
                                                               PASM->m_SEHD->sehHandler = PASM->m_CurPC; } break;
case 377:
#line 1009 "asmparse.y"
{ PASM->m_SEHD->sehHandlerTo = PASM->m_CurPC; } break;
case 378:
#line 1010 "asmparse.y"
{ PASM->SetHandlerLabels(yypvt[-2].string, yypvt[-0].string); } break;
case 379:
#line 1011 "asmparse.y"
{ PASM->m_SEHD->sehHandler = yypvt[-2].int32;
                                                               PASM->m_SEHD->sehHandlerTo = yypvt[-0].int32; } break;
case 381:
#line 1019 "asmparse.y"
{ PASM->EmitDataLabel(yypvt[-1].string); } break;
case 383:
#line 1023 "asmparse.y"
{ PASM->SetDataSection(); } break;
case 384:
#line 1024 "asmparse.y"
{ PASM->SetTLSSection(); } break;
case 385:
#line 1025 "asmparse.y"
{ PASM->SetILSection(); } break;
case 390:
#line 1036 "asmparse.y"
{ yyval.int32 = 1; } break;
case 391:
#line 1037 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32;
                                                               if(yypvt[-1].int32 <= 0) { PASM->report->error("Illegal item count: %d\n",yypvt[-1].int32);
                                                                  if(!PASM->OnErrGo) yyval.int32 = 1; }} break;
case 392:
#line 1042 "asmparse.y"
{ PASM->EmitDataString(yypvt[-1].binstr); } break;
case 393:
#line 1043 "asmparse.y"
{ PASM->EmitDD(yypvt[-1].string); } break;
case 394:
#line 1044 "asmparse.y"
{ PASM->EmitData(yypvt[-1].binstr->ptr(),yypvt[-1].binstr->length()); } break;
case 395:
#line 1046 "asmparse.y"
{ float f = (float) (*yypvt[-2].float64); float* p = new (nothrow) float[yypvt[-0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i < yypvt[-0].int32; i++) p[i] = f;
                                                                 PASM->EmitData(p, sizeof(float)*yypvt[-0].int32); delete yypvt[-2].float64; delete [] p; 
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(float)*yypvt[-0].int32); } break;
case 396:
#line 1053 "asmparse.y"
{ double* p = new (nothrow) double[yypvt[-0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yypvt[-0].int32; i++) p[i] = *(yypvt[-2].float64);
                                                                 PASM->EmitData(p, sizeof(double)*yypvt[-0].int32); delete yypvt[-2].float64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(double)*yypvt[-0].int32); } break;
case 397:
#line 1060 "asmparse.y"
{ __int64* p = new (nothrow) __int64[yypvt[-0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yypvt[-0].int32; i++) p[i] = *(yypvt[-2].int64);
                                                                 PASM->EmitData(p, sizeof(__int64)*yypvt[-0].int32); delete yypvt[-2].int64; delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int64)*yypvt[-0].int32); } break;
case 398:
#line 1067 "asmparse.y"
{ __int32* p = new (nothrow) __int32[yypvt[-0].int32];
                                                               if(p != NULL) {
                                                                 for(int i=0; i<yypvt[-0].int32; i++) p[i] = yypvt[-2].int32;
                                                                 PASM->EmitData(p, sizeof(__int32)*yypvt[-0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int32)*yypvt[-0].int32); } break;
case 399:
#line 1074 "asmparse.y"
{ __int16 i = (__int16) yypvt[-2].int32; FAIL_UNLESS(i == yypvt[-2].int32, ("Value %d too big\n", yypvt[-2].int32));
                                                               __int16* p = new (nothrow) __int16[yypvt[-0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yypvt[-0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int16)*yypvt[-0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int16)*yypvt[-0].int32); } break;
case 400:
#line 1082 "asmparse.y"
{ __int8 i = (__int8) yypvt[-2].int32; FAIL_UNLESS(i == yypvt[-2].int32, ("Value %d too big\n", yypvt[-2].int32));
                                                               __int8* p = new (nothrow) __int8[yypvt[-0].int32];
                                                               if(p != NULL) {
                                                                 for(int j=0; j<yypvt[-0].int32; j++) p[j] = i;
                                                                 PASM->EmitData(p, sizeof(__int8)*yypvt[-0].int32); delete [] p;
                                                               } else PASM->report->error("Out of memory emitting data block %d bytes\n",
                                                                     sizeof(__int8)*yypvt[-0].int32); } break;
case 401:
#line 1089 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(float)*yypvt[-0].int32); } break;
case 402:
#line 1090 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(double)*yypvt[-0].int32); } break;
case 403:
#line 1091 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int64)*yypvt[-0].int32); } break;
case 404:
#line 1092 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int32)*yypvt[-0].int32); } break;
case 405:
#line 1093 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int16)*yypvt[-0].int32); } break;
case 406:
#line 1094 "asmparse.y"
{ PASM->EmitData(NULL, sizeof(__int8)*yypvt[-0].int32); } break;
case 407:
#line 1098 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4);
                                                               float f = (float)(*yypvt[-1].float64);
                                                               yyval.binstr->appendInt32(*((__int32*)&f)); delete yypvt[-1].float64; } break;
case 408:
#line 1101 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8); 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-1].float64); delete yypvt[-1].float64; } break;
case 409:
#line 1103 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4); 
                                                               yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 410:
#line 1105 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8); 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-1].int64); delete yypvt[-1].int64; } break;
case 411:
#line 1107 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8); 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-1].int64); delete yypvt[-1].int64; } break;
case 412:
#line 1109 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4); 
                                                               yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 413:
#line 1111 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2); 
                                                               yyval.binstr->appendInt16(yypvt[-1].int32); } break;
case 414:
#line 1113 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1); 
                                                               yyval.binstr->appendInt8(yypvt[-1].int32); } break;
case 415:
#line 1115 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-1].int64); delete yypvt[-1].int64; } break;
case 416:
#line 1117 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); 
                                                               yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 417:
#line 1119 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); 
                                                               yyval.binstr->appendInt16(yypvt[-1].int32); } break;
case 418:
#line 1121 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); 
                                                               yyval.binstr->appendInt8(yypvt[-1].int32); } break;
case 419:
#line 1123 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-1].int64); delete yypvt[-1].int64; } break;
case 420:
#line 1125 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); 
                                                               yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 421:
#line 1127 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); 
                                                               yyval.binstr->appendInt16(yypvt[-1].int32); } break;
case 422:
#line 1129 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); 
                                                               yyval.binstr->appendInt8(yypvt[-1].int32); } break;
case 423:
#line 1131 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR); 
                                                               yyval.binstr->appendInt16(yypvt[-1].int32); } break;
case 424:
#line 1133 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN); 
                                                               yyval.binstr->appendInt8(yypvt[-1].int32);} break;
case 425:
#line 1135 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->append(yypvt[-1].binstr); delete yypvt[-1].binstr;} break;
case 426:
#line 1139 "asmparse.y"
{ bParsingByteArray = TRUE; } break;
case 427:
#line 1142 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 428:
#line 1143 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 429:
#line 1146 "asmparse.y"
{ __int8 i = (__int8) yypvt[-0].int32; yyval.binstr = new BinStr(); yyval.binstr->appendInt8(i); } break;
case 430:
#line 1147 "asmparse.y"
{ __int8 i = (__int8) yypvt[-0].int32; yyval.binstr = yypvt[-1].binstr; yyval.binstr->appendInt8(i); } break;
case 431:
#line 1151 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 432:
#line 1152 "asmparse.y"
{ yyval.binstr = BinStrToUnicode(yypvt[-0].binstr,true); yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);} break;
case 433:
#line 1153 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CLASS); 
                                                               yyval.binstr->appendInt32(0); } break;
case 434:
#line 1158 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 435:
#line 1159 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); yyval.binstr->appendInt8(0xFF); } break;
case 436:
#line 1160 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); 
                                                               AppendStringWithLength(yyval.binstr,yypvt[-1].string); delete [] yypvt[-1].string;} break;
case 437:
#line 1162 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); 
                                                               AppendStringWithLength(yyval.binstr,yypvt[-1].string); delete [] yypvt[-1].string;} break;
case 438:
#line 1164 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); 
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yypvt[-1].token));} break;
case 439:
#line 1166 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(SERIALIZATION_TYPE_TYPE); yyval.binstr->appendInt8(0xFF); } break;
case 440:
#line 1167 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);} break;
case 441:
#line 1169 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 442:
#line 1173 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_R8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 443:
#line 1177 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 444:
#line 1181 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 445:
#line 1185 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 446:
#line 1189 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_I1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 447:
#line 1193 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 448:
#line 1197 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 449:
#line 1201 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 450:
#line 1205 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 451:
#line 1209 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U8);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 452:
#line 1213 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U4);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 453:
#line 1217 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U2);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 454:
#line 1221 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_U1);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 455:
#line 1225 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_CHAR);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 456:
#line 1229 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_BOOLEAN);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 457:
#line 1233 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_STRING);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 458:
#line 1237 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TYPE);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 459:
#line 1241 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt32(yypvt[-4].int32);
                                                               yyval.binstr->insertInt8(SERIALIZATION_TYPE_TAGGED_OBJECT);
                                                               yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 460:
#line 1247 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 461:
#line 1248 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr;
                                                               float f = (float) (*yypvt[-0].float64); yyval.binstr->appendInt32(*((__int32*)&f)); delete yypvt[-0].float64; } break;
case 462:
#line 1250 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                               yyval.binstr->appendInt32(yypvt[-0].int32); } break;
case 463:
#line 1254 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 464:
#line 1255 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-0].float64); delete yypvt[-0].float64; } break;
case 465:
#line 1257 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-0].int64); delete yypvt[-0].int64; } break;
case 466:
#line 1261 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 467:
#line 1262 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                               yyval.binstr->appendInt64((__int64 *)yypvt[-0].int64); delete yypvt[-0].int64; } break;
case 468:
#line 1266 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 469:
#line 1267 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->appendInt32(yypvt[-0].int32);} break;
case 470:
#line 1270 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 471:
#line 1271 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->appendInt16(yypvt[-0].int32);} break;
case 472:
#line 1274 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 473:
#line 1275 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->appendInt8(yypvt[-0].int32); } break;
case 474:
#line 1278 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 475:
#line 1279 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                               yyval.binstr->appendInt8(yypvt[-0].int32);} break;
case 476:
#line 1283 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 477:
#line 1284 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->appendInt8(0xFF); } break;
case 478:
#line 1285 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                               AppendStringWithLength(yyval.binstr,yypvt[-0].string); delete [] yypvt[-0].string;} break;
case 479:
#line 1289 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 480:
#line 1290 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->appendInt8(0xFF); } break;
case 481:
#line 1291 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; 
                                                               AppendStringWithLength(yyval.binstr,yypvt[-0].string); delete [] yypvt[-0].string;} break;
case 482:
#line 1293 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; 
                                                               AppendStringWithLength(yyval.binstr,PASM->ReflectionNotation(yypvt[-0].token));} break;
case 483:
#line 1297 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 484:
#line 1298 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->append(yypvt[-0].binstr); delete yypvt[-0].binstr; } break;
case 485:
#line 1302 "asmparse.y"
{ parser->m_ANSFirst.PUSH(PASM->m_firstArgName);
                                                               parser->m_ANSLast.PUSH(PASM->m_lastArgName);   
                                                               PASM->m_firstArgName = NULL;
                                                               PASM->m_lastArgName = NULL; } break;
case 486:
#line 1308 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 487:
#line 1311 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 488:
#line 1314 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 489:
#line 1317 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 490:
#line 1320 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 491:
#line 1323 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 492:
#line 1326 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); 
                                                               if((!PASM->OnErrGo)&&
                                                               ((yypvt[-0].opcode == CEE_NEWOBJ)||
                                                                (yypvt[-0].opcode == CEE_CALLVIRT))) 
                                                                  iCallConv = IMAGE_CEE_CS_CALLCONV_HASTHIS;
                                                             } break;
case 493:
#line 1334 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 494:
#line 1337 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 495:
#line 1340 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 496:
#line 1343 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 497:
#line 1346 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); iOpcodeLen = PASM->OpcodeLen(yyval.instr); } break;
case 498:
#line 1349 "asmparse.y"
{ yyval.instr = SetupInstr(yypvt[-0].opcode); } break;
case 499:
#line 1352 "asmparse.y"
{ yyval.instr = yypvt[-1].instr; bParsingByteArray = TRUE; } break;
case 500:
#line 1356 "asmparse.y"
{ PASM->EmitOpcode(yypvt[-0].instr); } break;
case 501:
#line 1357 "asmparse.y"
{ PASM->EmitInstrVar(yypvt[-1].instr, yypvt[-0].int32); } break;
case 502:
#line 1358 "asmparse.y"
{ PASM->EmitInstrVarByName(yypvt[-1].instr, yypvt[-0].string); } break;
case 503:
#line 1359 "asmparse.y"
{ PASM->EmitInstrI(yypvt[-1].instr, yypvt[-0].int32); } break;
case 504:
#line 1360 "asmparse.y"
{ PASM->EmitInstrI8(yypvt[-1].instr, yypvt[-0].int64); } break;
case 505:
#line 1361 "asmparse.y"
{ PASM->EmitInstrR(yypvt[-1].instr, yypvt[-0].float64); delete (yypvt[-0].float64);} break;
case 506:
#line 1362 "asmparse.y"
{ double f = (double) (*yypvt[-0].int64); PASM->EmitInstrR(yypvt[-1].instr, &f); } break;
case 507:
#line 1363 "asmparse.y"
{ unsigned L = yypvt[-1].binstr->length();
                                                               FAIL_UNLESS(L >= sizeof(float), ("%d hexbytes, must be at least %d\n",
                                                                           L,sizeof(float))); 
                                                               if(L < sizeof(float)) {YYERROR; } 
                                                               else {
                                                                   double f = (L >= sizeof(double)) ? *((double *)(yypvt[-1].binstr->ptr()))
                                                                                    : (double)(*(float *)(yypvt[-1].binstr->ptr())); 
                                                                   PASM->EmitInstrR(yypvt[-2].instr,&f); }
                                                               delete yypvt[-1].binstr; } break;
case 508:
#line 1372 "asmparse.y"
{ PASM->EmitInstrBrOffset(yypvt[-1].instr, yypvt[-0].int32); } break;
case 509:
#line 1373 "asmparse.y"
{ PASM->EmitInstrBrTarget(yypvt[-1].instr, yypvt[-0].string); } break;
case 510:
#line 1375 "asmparse.y"
{ PASM->SetMemberRefFixup(yypvt[-0].token,PASM->OpcodeLen(yypvt[-1].instr));
                                                               PASM->EmitInstrI(yypvt[-1].instr,yypvt[-0].token);
                                                               PASM->m_tkCurrentCVOwner = yypvt[-0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iCallConv = 0;
                                                             } break;
case 511:
#line 1382 "asmparse.y"
{ yypvt[-3].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD); 
                                                               mdToken mr = PASM->MakeMemberRef(yypvt[-2].token, yypvt[-0].string, yypvt[-3].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yypvt[-4].instr));
                                                               PASM->EmitInstrI(yypvt[-4].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             } break;
case 512:
#line 1390 "asmparse.y"
{ yypvt[-1].binstr->insertInt8(IMAGE_CEE_CS_CALLCONV_FIELD); 
                                                               mdToken mr = PASM->MakeMemberRef(mdTokenNil, yypvt[-0].string, yypvt[-1].binstr);
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yypvt[-2].instr));
                                                               PASM->EmitInstrI(yypvt[-2].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             } break;
case 513:
#line 1397 "asmparse.y"
{ mdToken mr = yypvt[-0].token;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yypvt[-1].instr));
                                                               PASM->EmitInstrI(yypvt[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             } break;
case 514:
#line 1403 "asmparse.y"
{ mdToken mr = yypvt[-0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yypvt[-1].instr));
                                                               PASM->EmitInstrI(yypvt[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             } break;
case 515:
#line 1409 "asmparse.y"
{ mdToken mr = yypvt[-0].tdd->m_tkTypeSpec;
                                                               PASM->SetMemberRefFixup(mr, PASM->OpcodeLen(yypvt[-1].instr));
                                                               PASM->EmitInstrI(yypvt[-1].instr,mr);
                                                               PASM->m_tkCurrentCVOwner = mr;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             } break;
case 516:
#line 1415 "asmparse.y"
{ PASM->EmitInstrI(yypvt[-1].instr, yypvt[-0].token); 
                                                               PASM->m_tkCurrentCVOwner = yypvt[-0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                             } break;
case 517:
#line 1419 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yypvt[-1].instr, yypvt[-0].binstr,TRUE); } break;
case 518:
#line 1421 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yypvt[-4].instr, yypvt[-1].binstr,FALSE); } break;
case 519:
#line 1423 "asmparse.y"
{ PASM->EmitInstrStringLiteral(yypvt[-3].instr, yypvt[-1].binstr,FALSE,TRUE); } break;
case 520:
#line 1425 "asmparse.y"
{ PASM->EmitInstrSig(yypvt[-5].instr, parser->MakeSig(yypvt[-4].int32, yypvt[-3].binstr, yypvt[-1].binstr)); 
                                                               PASM->ResetArgNameList();
                                                             } break;
case 521:
#line 1429 "asmparse.y"
{ PASM->EmitInstrI(yypvt[-1].instr,yypvt[-0].token);
                                                               PASM->m_tkCurrentCVOwner = yypvt[-0].token;
                                                               PASM->m_pCustomDescrList = NULL;
                                                               iOpcodeLen = 0;
                                                             } break;
case 522:
#line 1434 "asmparse.y"
{ PASM->EmitInstrSwitch(yypvt[-3].instr, yypvt[-1].labels); } break;
case 523:
#line 1437 "asmparse.y"
{ yyval.labels = 0; } break;
case 524:
#line 1438 "asmparse.y"
{ yyval.labels = new Labels(yypvt[-2].string, yypvt[-0].labels, TRUE); } break;
case 525:
#line 1439 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yypvt[-2].int32, yypvt[-0].labels, FALSE); } break;
case 526:
#line 1440 "asmparse.y"
{ yyval.labels = new Labels(yypvt[-0].string, NULL, TRUE); } break;
case 527:
#line 1441 "asmparse.y"
{ yyval.labels = new Labels((char *)(UINT_PTR)yypvt[-0].int32, NULL, FALSE); } break;
case 528:
#line 1445 "asmparse.y"
{ yyval.binstr = NULL; } break;
case 529:
#line 1446 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; } break;
case 530:
#line 1449 "asmparse.y"
{ yyval.binstr = NULL; } break;
case 531:
#line 1450 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 532:
#line 1453 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 533:
#line 1454 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yyval.binstr->append(yypvt[-0].binstr); delete yypvt[-0].binstr; } break;
case 534:
#line 1458 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 535:
#line 1459 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr;} break;
case 536:
#line 1462 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 537:
#line 1463 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yyval.binstr->append(yypvt[-0].binstr); delete yypvt[-0].binstr; } break;
case 538:
#line 1466 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_SENTINEL); } break;
case 539:
#line 1467 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yypvt[-1].binstr); PASM->addArgName(NULL, yypvt[-1].binstr, yypvt[-0].binstr, yypvt[-2].int32); } break;
case 540:
#line 1468 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yypvt[-2].binstr); PASM->addArgName(yypvt[-0].string, yypvt[-2].binstr, yypvt[-1].binstr, yypvt[-3].int32);} break;
case 541:
#line 1472 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetAsmRef(yypvt[-2].string), yypvt[-0].string, NULL); delete[] yypvt[-2].string;} break;
case 542:
#line 1473 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(yypvt[-2].token, yypvt[-0].string, NULL); } break;
case 543:
#line 1474 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(mdTokenNil, yypvt[-0].string, NULL); } break;
case 544:
#line 1475 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(PASM->GetModRef(yypvt[-2].string),yypvt[-0].string, NULL); delete[] yypvt[-2].string;} break;
case 545:
#line 1476 "asmparse.y"
{ yyval.token = PASM->ResolveClassRef(1,yypvt[-0].string,NULL); } break;
case 546:
#line 1477 "asmparse.y"
{ yyval.token = yypvt[-0].token; } break;
case 547:
#line 1478 "asmparse.y"
{ yyval.token = yypvt[-0].tdd->m_tkTypeSpec; } break;
case 548:
#line 1479 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) yyval.token = PASM->m_pCurClass->m_cl;
                                                                else { yyval.token = 0; PASM->report->error(".this outside class scope\n"); } 
                                                              } break;
case 549:
#line 1482 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  yyval.token = PASM->m_pCurClass->m_crExtends;
                                                                  if(RidFromToken(yyval.token) == 0)
                                                                    PASM->report->error(".base undefined\n");
                                                                } else { yyval.token = 0; PASM->report->error(".base outside class scope\n"); } 
                                                              } break;
case 550:
#line 1488 "asmparse.y"
{ if(PASM->m_pCurClass != NULL) {
                                                                  if(PASM->m_pCurClass->m_pEncloser != NULL) yyval.token = PASM->m_pCurClass->m_pEncloser->m_cl;
                                                                  else { yyval.token = 0; PASM->report->error(".nester undefined\n"); }
                                                                } else { yyval.token = 0; PASM->report->error(".nester outside class scope\n"); } 
                                                              } break;
case 551:
#line 1495 "asmparse.y"
{ yyval.string = yypvt[-0].string; } break;
case 552:
#line 1496 "asmparse.y"
{ yyval.string = newStringWDel(yypvt[-2].string, NESTING_SEP, yypvt[-0].string); } break;
case 553:
#line 1499 "asmparse.y"
{ yyval.token = yypvt[-0].token;} break;
case 554:
#line 1500 "asmparse.y"
{ yyval.token = PASM->GetAsmRef(yypvt[-1].string); delete[] yypvt[-1].string;} break;
case 555:
#line 1501 "asmparse.y"
{ yyval.token = PASM->GetModRef(yypvt[-1].string); delete[] yypvt[-1].string;} break;
case 556:
#line 1502 "asmparse.y"
{ yyval.token = PASM->ResolveTypeSpec(yypvt[-0].binstr); } break;
case 557:
#line 1506 "asmparse.y"
{ yyval.binstr = new BinStr(); } break;
case 558:
#line 1508 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,yypvt[-7].binstr->length()); yyval.binstr->append(yypvt[-7].binstr);
                                                                corEmitInt(yyval.binstr,yypvt[-5].binstr->length()); yyval.binstr->append(yypvt[-5].binstr);
                                                                corEmitInt(yyval.binstr,yypvt[-3].binstr->length()); yyval.binstr->append(yypvt[-3].binstr);
                                                                corEmitInt(yyval.binstr,yypvt[-1].binstr->length()); yyval.binstr->append(yypvt[-1].binstr); 
                                                                PASM->report->warn("Deprecated 4-string form of custom marshaler, first two strings ignored\n");} break;
case 559:
#line 1515 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CUSTOMMARSHALER);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yypvt[-3].binstr->length()); yyval.binstr->append(yypvt[-3].binstr);
                                                                corEmitInt(yyval.binstr,yypvt[-1].binstr->length()); yyval.binstr->append(yypvt[-1].binstr); } break;
case 560:
#line 1520 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDSYSSTRING);
                                                                corEmitInt(yyval.binstr,yypvt[-1].int32); } break;
case 561:
#line 1523 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FIXEDARRAY);
                                                                corEmitInt(yyval.binstr,yypvt[-2].int32); yyval.binstr->append(yypvt[-0].binstr); } break;
case 562:
#line 1525 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANT); 
                                                                PASM->report->warn("Deprecated native type 'variant'\n"); } break;
case 563:
#line 1527 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_CURRENCY); } break;
case 564:
#line 1528 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SYSCHAR); 
                                                                PASM->report->warn("Deprecated native type 'syschar'\n"); } break;
case 565:
#line 1530 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VOID); 
                                                                PASM->report->warn("Deprecated native type 'void'\n"); } break;
case 566:
#line 1532 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BOOLEAN); } break;
case 567:
#line 1533 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I1); } break;
case 568:
#line 1534 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I2); } break;
case 569:
#line 1535 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I4); } break;
case 570:
#line 1536 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_I8); } break;
case 571:
#line 1537 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R4); } break;
case 572:
#line 1538 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_R8); } break;
case 573:
#line 1539 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ERROR); } break;
case 574:
#line 1540 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); } break;
case 575:
#line 1541 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); } break;
case 576:
#line 1542 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); } break;
case 577:
#line 1543 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); } break;
case 578:
#line 1544 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U1); } break;
case 579:
#line 1545 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U2); } break;
case 580:
#line 1546 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U4); } break;
case 581:
#line 1547 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_U8); } break;
case 582:
#line 1548 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt8(NATIVE_TYPE_PTR); 
                                                                PASM->report->warn("Deprecated native type '*'\n"); } break;
case 583:
#line 1550 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX);
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY); } break;
case 584:
#line 1552 "asmparse.y"
{ yyval.binstr = yypvt[-3].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX); 
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,0);
                                                                corEmitInt(yyval.binstr,yypvt[-1].int32); 
                                                                corEmitInt(yyval.binstr,0); } break;
case 585:
#line 1557 "asmparse.y"
{ yyval.binstr = yypvt[-5].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX); 
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yypvt[-1].int32);
                                                                corEmitInt(yyval.binstr,yypvt[-3].int32);
                                                                corEmitInt(yyval.binstr,ntaSizeParamIndexSpecified); } break;
case 586:
#line 1562 "asmparse.y"
{ yyval.binstr = yypvt[-4].binstr; if(yyval.binstr->length()==0) yyval.binstr->appendInt8(NATIVE_TYPE_MAX); 
                                                                yyval.binstr->insertInt8(NATIVE_TYPE_ARRAY);
                                                                corEmitInt(yyval.binstr,yypvt[-1].int32); } break;
case 587:
#line 1565 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DECIMAL); 
                                                                PASM->report->warn("Deprecated native type 'decimal'\n"); } break;
case 588:
#line 1567 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_DATE); 
                                                                PASM->report->warn("Deprecated native type 'date'\n"); } break;
case 589:
#line 1569 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BSTR); } break;
case 590:
#line 1570 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTR); } break;
case 591:
#line 1571 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPWSTR); } break;
case 592:
#line 1572 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPTSTR); } break;
case 593:
#line 1573 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_OBJECTREF); 
                                                                PASM->report->warn("Deprecated native type 'objectref'\n"); } break;
case 594:
#line 1575 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IUNKNOWN);
                                                                if(yypvt[-0].int32 != -1) corEmitInt(yyval.binstr,yypvt[-0].int32); } break;
case 595:
#line 1577 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_IDISPATCH); 
                                                                if(yypvt[-0].int32 != -1) corEmitInt(yyval.binstr,yypvt[-0].int32); } break;
case 596:
#line 1579 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_STRUCT); } break;
case 597:
#line 1580 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INTF);
                                                                if(yypvt[-0].int32 != -1) corEmitInt(yyval.binstr,yypvt[-0].int32); } break;
case 598:
#line 1582 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY); 
                                                                corEmitInt(yyval.binstr,yypvt[-0].int32); 
                                                                corEmitInt(yyval.binstr,0);} break;
case 599:
#line 1585 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_SAFEARRAY); 
                                                                corEmitInt(yyval.binstr,yypvt[-2].int32); 
                                                                corEmitInt(yyval.binstr,yypvt[-0].binstr->length()); yyval.binstr->append(yypvt[-0].binstr); } break;
case 600:
#line 1589 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_INT); } break;
case 601:
#line 1590 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); } break;
case 602:
#line 1591 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_UINT); } break;
case 603:
#line 1592 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_NESTEDSTRUCT); 
                                                                PASM->report->warn("Deprecated native type 'nested struct'\n"); } break;
case 604:
#line 1594 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_BYVALSTR); } break;
case 605:
#line 1595 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ANSIBSTR); } break;
case 606:
#line 1596 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_TBSTR); } break;
case 607:
#line 1597 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_VARIANTBOOL); } break;
case 608:
#line 1598 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_FUNC); } break;
case 609:
#line 1599 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_ASANY); } break;
case 610:
#line 1600 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(NATIVE_TYPE_LPSTRUCT); } break;
case 611:
#line 1601 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yypvt[-0].tdd->m_pbsTypeSpec); } break;
case 612:
#line 1604 "asmparse.y"
{ yyval.int32 = -1; } break;
case 613:
#line 1605 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32; } break;
case 614:
#line 1608 "asmparse.y"
{ yyval.int32 = VT_EMPTY; } break;
case 615:
#line 1609 "asmparse.y"
{ yyval.int32 = VT_NULL; } break;
case 616:
#line 1610 "asmparse.y"
{ yyval.int32 = VT_VARIANT; } break;
case 617:
#line 1611 "asmparse.y"
{ yyval.int32 = VT_CY; } break;
case 618:
#line 1612 "asmparse.y"
{ yyval.int32 = VT_VOID; } break;
case 619:
#line 1613 "asmparse.y"
{ yyval.int32 = VT_BOOL; } break;
case 620:
#line 1614 "asmparse.y"
{ yyval.int32 = VT_I1; } break;
case 621:
#line 1615 "asmparse.y"
{ yyval.int32 = VT_I2; } break;
case 622:
#line 1616 "asmparse.y"
{ yyval.int32 = VT_I4; } break;
case 623:
#line 1617 "asmparse.y"
{ yyval.int32 = VT_I8; } break;
case 624:
#line 1618 "asmparse.y"
{ yyval.int32 = VT_R4; } break;
case 625:
#line 1619 "asmparse.y"
{ yyval.int32 = VT_R8; } break;
case 626:
#line 1620 "asmparse.y"
{ yyval.int32 = VT_UI1; } break;
case 627:
#line 1621 "asmparse.y"
{ yyval.int32 = VT_UI2; } break;
case 628:
#line 1622 "asmparse.y"
{ yyval.int32 = VT_UI4; } break;
case 629:
#line 1623 "asmparse.y"
{ yyval.int32 = VT_UI8; } break;
case 630:
#line 1624 "asmparse.y"
{ yyval.int32 = VT_UI1; } break;
case 631:
#line 1625 "asmparse.y"
{ yyval.int32 = VT_UI2; } break;
case 632:
#line 1626 "asmparse.y"
{ yyval.int32 = VT_UI4; } break;
case 633:
#line 1627 "asmparse.y"
{ yyval.int32 = VT_UI8; } break;
case 634:
#line 1628 "asmparse.y"
{ yyval.int32 = VT_PTR; } break;
case 635:
#line 1629 "asmparse.y"
{ yyval.int32 = yypvt[-2].int32 | VT_ARRAY; } break;
case 636:
#line 1630 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | VT_VECTOR; } break;
case 637:
#line 1631 "asmparse.y"
{ yyval.int32 = yypvt[-1].int32 | VT_BYREF; } break;
case 638:
#line 1632 "asmparse.y"
{ yyval.int32 = VT_DECIMAL; } break;
case 639:
#line 1633 "asmparse.y"
{ yyval.int32 = VT_DATE; } break;
case 640:
#line 1634 "asmparse.y"
{ yyval.int32 = VT_BSTR; } break;
case 641:
#line 1635 "asmparse.y"
{ yyval.int32 = VT_LPSTR; } break;
case 642:
#line 1636 "asmparse.y"
{ yyval.int32 = VT_LPWSTR; } break;
case 643:
#line 1637 "asmparse.y"
{ yyval.int32 = VT_UNKNOWN; } break;
case 644:
#line 1638 "asmparse.y"
{ yyval.int32 = VT_DISPATCH; } break;
case 645:
#line 1639 "asmparse.y"
{ yyval.int32 = VT_SAFEARRAY; } break;
case 646:
#line 1640 "asmparse.y"
{ yyval.int32 = VT_INT; } break;
case 647:
#line 1641 "asmparse.y"
{ yyval.int32 = VT_UINT; } break;
case 648:
#line 1642 "asmparse.y"
{ yyval.int32 = VT_UINT; } break;
case 649:
#line 1643 "asmparse.y"
{ yyval.int32 = VT_ERROR; } break;
case 650:
#line 1644 "asmparse.y"
{ yyval.int32 = VT_HRESULT; } break;
case 651:
#line 1645 "asmparse.y"
{ yyval.int32 = VT_CARRAY; } break;
case 652:
#line 1646 "asmparse.y"
{ yyval.int32 = VT_USERDEFINED; } break;
case 653:
#line 1647 "asmparse.y"
{ yyval.int32 = VT_RECORD; } break;
case 654:
#line 1648 "asmparse.y"
{ yyval.int32 = VT_FILETIME; } break;
case 655:
#line 1649 "asmparse.y"
{ yyval.int32 = VT_BLOB; } break;
case 656:
#line 1650 "asmparse.y"
{ yyval.int32 = VT_STREAM; } break;
case 657:
#line 1651 "asmparse.y"
{ yyval.int32 = VT_STORAGE; } break;
case 658:
#line 1652 "asmparse.y"
{ yyval.int32 = VT_STREAMED_OBJECT; } break;
case 659:
#line 1653 "asmparse.y"
{ yyval.int32 = VT_STORED_OBJECT; } break;
case 660:
#line 1654 "asmparse.y"
{ yyval.int32 = VT_BLOB_OBJECT; } break;
case 661:
#line 1655 "asmparse.y"
{ yyval.int32 = VT_CF; } break;
case 662:
#line 1656 "asmparse.y"
{ yyval.int32 = VT_CLSID; } break;
case 663:
#line 1660 "asmparse.y"
{ if(yypvt[-0].token == PASM->m_tkSysString)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); }
                                                                else if(yypvt[-0].token == PASM->m_tkSysObject)
                                                                {     yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); }
                                                                else  
                                                                 yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CLASS, yypvt[-0].token); } break;
case 664:
#line 1666 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_OBJECT); } break;
case 665:
#line 1667 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yypvt[-0].token); } break;
case 666:
#line 1668 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_VALUETYPE, yypvt[-0].token); } break;
case 667:
#line 1669 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SZARRAY); } break;
case 668:
#line 1670 "asmparse.y"
{ yyval.binstr = parser->MakeTypeArray(ELEMENT_TYPE_ARRAY, yypvt[-3].binstr, yypvt[-1].binstr); } break;
case 669:
#line 1671 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_BYREF); } break;
case 670:
#line 1672 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PTR); } break;
case 671:
#line 1673 "asmparse.y"
{ yyval.binstr = yypvt[-1].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_PINNED); } break;
case 672:
#line 1674 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_REQD, yypvt[-1].token);
                                                                yyval.binstr->append(yypvt[-4].binstr); } break;
case 673:
#line 1676 "asmparse.y"
{ yyval.binstr = parser->MakeTypeClass(ELEMENT_TYPE_CMOD_OPT, yypvt[-1].token);
                                                                yyval.binstr->append(yypvt[-4].binstr); } break;
case 674:
#line 1679 "asmparse.y"
{ yyval.binstr = parser->MakeSig(yypvt[-5].int32, yypvt[-4].binstr, yypvt[-1].binstr);
                                                                yyval.binstr->insertInt8(ELEMENT_TYPE_FNPTR); 
                                                                PASM->delArgNameList(PASM->m_firstArgName);
                                                                PASM->m_firstArgName = parser->m_ANSFirst.POP();
                                                                PASM->m_lastArgName = parser->m_ANSLast.POP();
                                                              } break;
case 675:
#line 1685 "asmparse.y"
{ if(yypvt[-1].binstr == NULL) yyval.binstr = yypvt[-3].binstr;
                                                                else {
                                                                  yyval.binstr = new BinStr(); 
                                                                  yyval.binstr->appendInt8(ELEMENT_TYPE_GENERICINST); 
                                                                  yyval.binstr->append(yypvt[-3].binstr);
                                                                  corEmitInt(yyval.binstr, corCountArgs(yypvt[-1].binstr));
                                                                  yyval.binstr->append(yypvt[-1].binstr); delete yypvt[-3].binstr; delete yypvt[-1].binstr; }} break;
case 676:
#line 1692 "asmparse.y"
{ //if(PASM->m_pCurMethod)  {
                                                                //  if(($3 < 0)||((DWORD)$3 >= PASM->m_pCurMethod->m_NumTyPars))
                                                                //    PASM->report->error("Invalid method type parameter '%d'\n",$3);
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_MVAR); corEmitInt(yyval.binstr, yypvt[-0].int32); 
                                                                //} else PASM->report->error("Method type parameter '%d' outside method scope\n",$3);
                                                              } break;
case 677:
#line 1698 "asmparse.y"
{ //if(PASM->m_pCurClass)  {
                                                                //  if(($2 < 0)||((DWORD)$2 >= PASM->m_pCurClass->m_NumTyPars))
                                                                //    PASM->report->error("Invalid type parameter '%d'\n",$2);
                                                                  yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VAR); corEmitInt(yyval.binstr, yypvt[-0].int32); 
                                                                //} else PASM->report->error("Type parameter '%d' outside class scope\n",$2);
                                                              } break;
case 678:
#line 1704 "asmparse.y"
{ int eltype = ELEMENT_TYPE_MVAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurMethod) n = PASM->m_pCurMethod->FindTyPar(yypvt[-0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yypvt[-0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yypvt[-0].string);
                                                                    eltype = ELEMENT_TYPE_MVARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid method type parameter '%s'\n",yypvt[-0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n); 
                                                              } break;
case 679:
#line 1719 "asmparse.y"
{ int eltype = ELEMENT_TYPE_VAR;
                                                                int n=-1;
                                                                if(PASM->m_pCurClass && !newclass) n = PASM->m_pCurClass->FindTyPar(yypvt[-0].string);
                                                                else {
                                                                  if(PASM->m_TyParList) n = PASM->m_TyParList->IndexOf(yypvt[-0].string);
                                                                  if(n == -1)
                                                                  { n = TyParFixupList.COUNT();
                                                                    TyParFixupList.PUSH(yypvt[-0].string);
                                                                    eltype = ELEMENT_TYPE_VARFIXUP;
                                                                  }
                                                                }
                                                                if(n == -1) { PASM->report->error("Invalid type parameter '%s'\n",yypvt[-0].string);
                                                                n = 0x1FFFFFFF; }
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt8(eltype); corEmitInt(yyval.binstr,n); 
                                                              } break;
case 680:
#line 1734 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_TYPEDBYREF); } break;
case 681:
#line 1735 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_VOID); } break;
case 682:
#line 1736 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I); } break;
case 683:
#line 1737 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); } break;
case 684:
#line 1738 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U); } break;
case 685:
#line 1739 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 686:
#line 1740 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; yyval.binstr->insertInt8(ELEMENT_TYPE_SENTINEL); } break;
case 687:
#line 1743 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_CHAR); } break;
case 688:
#line 1744 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_STRING); } break;
case 689:
#line 1745 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_BOOLEAN); } break;
case 690:
#line 1746 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I1); } break;
case 691:
#line 1747 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I2); } break;
case 692:
#line 1748 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I4); } break;
case 693:
#line 1749 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_I8); } break;
case 694:
#line 1750 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R4); } break;
case 695:
#line 1751 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_R8); } break;
case 696:
#line 1752 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); } break;
case 697:
#line 1753 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); } break;
case 698:
#line 1754 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); } break;
case 699:
#line 1755 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); } break;
case 700:
#line 1756 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U1); } break;
case 701:
#line 1757 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U2); } break;
case 702:
#line 1758 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U4); } break;
case 703:
#line 1759 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt8(ELEMENT_TYPE_U8); } break;
case 704:
#line 1760 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->append(yypvt[-0].tdd->m_pbsTypeSpec); } break;
case 705:
#line 1763 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; } break;
case 706:
#line 1764 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yypvt[-2].binstr->append(yypvt[-0].binstr); delete yypvt[-0].binstr; } break;
case 707:
#line 1767 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  } break;
case 708:
#line 1768 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0x7FFFFFFF); yyval.binstr->appendInt32(0x7FFFFFFF);  } break;
case 709:
#line 1769 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(0); yyval.binstr->appendInt32(yypvt[-0].int32); } break;
case 710:
#line 1770 "asmparse.y"
{ FAIL_UNLESS(yypvt[-2].int32 <= yypvt[-0].int32, ("lower bound %d must be <= upper bound %d\n", yypvt[-2].int32, yypvt[-0].int32));
                                                                if (yypvt[-2].int32 > yypvt[-0].int32) { YYERROR; };        
                                                                yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yypvt[-2].int32); yyval.binstr->appendInt32(yypvt[-0].int32-yypvt[-2].int32+1); } break;
case 711:
#line 1773 "asmparse.y"
{ yyval.binstr = new BinStr(); yyval.binstr->appendInt32(yypvt[-1].int32); yyval.binstr->appendInt32(0x7FFFFFFF); } break;
case 712:
#line 1778 "asmparse.y"
{ PASM->AddPermissionDecl(yypvt[-4].secAct, yypvt[-3].token, yypvt[-1].pair); } break;
case 713:
#line 1780 "asmparse.y"
{ PASM->AddPermissionDecl(yypvt[-5].secAct, yypvt[-4].token, yypvt[-1].binstr); } break;
case 714:
#line 1781 "asmparse.y"
{ PASM->AddPermissionDecl(yypvt[-1].secAct, yypvt[-0].token, (NVPair *)NULL); } break;
case 715:
#line 1782 "asmparse.y"
{ PASM->AddPermissionSetDecl(yypvt[-2].secAct, yypvt[-1].binstr); } break;
case 716:
#line 1784 "asmparse.y"
{ PASM->AddPermissionSetDecl(yypvt[-1].secAct,BinStrToUnicode(yypvt[-0].binstr,true));} break;
case 717:
#line 1786 "asmparse.y"
{ BinStr* ret = new BinStr();
                                                                ret->insertInt8('.');
                                                                corEmitInt(ret, nSecAttrBlobs);
                                                                ret->append(yypvt[-1].binstr);
                                                                PASM->AddPermissionSetDecl(yypvt[-4].secAct,ret);
                                                                nSecAttrBlobs = 0; } break;
case 718:
#line 1794 "asmparse.y"
{ yyval.binstr = new BinStr(); nSecAttrBlobs = 0;} break;
case 719:
#line 1795 "asmparse.y"
{ yyval.binstr = yypvt[-0].binstr; nSecAttrBlobs = 1; } break;
case 720:
#line 1796 "asmparse.y"
{ yyval.binstr = yypvt[-2].binstr; yyval.binstr->append(yypvt[-0].binstr); nSecAttrBlobs++; } break;
case 721:
#line 1800 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(PASM->ReflectionNotation(yypvt[-4].token),yypvt[-1].binstr,nCustomBlobNVPairs); 
                                                                nCustomBlobNVPairs = 0; } break;
case 722:
#line 1803 "asmparse.y"
{ yyval.binstr = PASM->EncodeSecAttr(yypvt[-4].string,yypvt[-1].binstr,nCustomBlobNVPairs); 
                                                                nCustomBlobNVPairs = 0; } break;
case 723:
#line 1807 "asmparse.y"
{ yyval.secAct = yypvt[-2].secAct; bParsingByteArray = TRUE; } break;
case 724:
#line 1809 "asmparse.y"
{ yyval.secAct = yypvt[-2].secAct; bParsingByteArray = TRUE; } break;
case 725:
#line 1812 "asmparse.y"
{ yyval.pair = yypvt[-0].pair; } break;
case 726:
#line 1813 "asmparse.y"
{ yyval.pair = yypvt[-2].pair->Concat(yypvt[-0].pair); } break;
case 727:
#line 1816 "asmparse.y"
{ yypvt[-2].binstr->appendInt8(0); yyval.pair = new NVPair(yypvt[-2].binstr, yypvt[-0].binstr); } break;
case 728:
#line 1819 "asmparse.y"
{ yyval.int32 = 1; } break;
case 729:
#line 1820 "asmparse.y"
{ yyval.int32 = 0; } break;
case 730:
#line 1823 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_BOOLEAN);
                                                                yyval.binstr->appendInt8(yypvt[-0].int32); } break;
case 731:
#line 1826 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yypvt[-0].int32); } break;
case 732:
#line 1829 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_I4);
                                                                yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 733:
#line 1832 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_STRING);
                                                                yyval.binstr->append(yypvt[-0].binstr); delete yypvt[-0].binstr;
                                                                yyval.binstr->appendInt8(0); } break;
case 734:
#line 1836 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yypvt[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(1);
                                                                yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 735:
#line 1842 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yypvt[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(2);
                                                                yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 736:
#line 1848 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yypvt[-5].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 737:
#line 1854 "asmparse.y"
{ yyval.binstr = new BinStr();
                                                                yyval.binstr->appendInt8(SERIALIZATION_TYPE_ENUM);
                                                                char* sz = PASM->ReflectionNotation(yypvt[-3].token);
                                                                strcpy_s((char *)yyval.binstr->getBuff((unsigned)strlen(sz) + 1), strlen(sz) + 1,sz);
                                                                yyval.binstr->appendInt8(4);
                                                                yyval.binstr->appendInt32(yypvt[-1].int32); } break;
case 738:
#line 1862 "asmparse.y"
{ yyval.secAct = dclRequest; } break;
case 739:
#line 1863 "asmparse.y"
{ yyval.secAct = dclDemand; } break;
case 740:
#line 1864 "asmparse.y"
{ yyval.secAct = dclAssert; } break;
case 741:
#line 1865 "asmparse.y"
{ yyval.secAct = dclDeny; } break;
case 742:
#line 1866 "asmparse.y"
{ yyval.secAct = dclPermitOnly; } break;
case 743:
#line 1867 "asmparse.y"
{ yyval.secAct = dclLinktimeCheck; } break;
case 744:
#line 1868 "asmparse.y"
{ yyval.secAct = dclInheritanceCheck; } break;
case 745:
#line 1869 "asmparse.y"
{ yyval.secAct = dclRequestMinimum; } break;
case 746:
#line 1870 "asmparse.y"
{ yyval.secAct = dclRequestOptional; } break;
case 747:
#line 1871 "asmparse.y"
{ yyval.secAct = dclRequestRefuse; } break;
case 748:
#line 1872 "asmparse.y"
{ yyval.secAct = dclPrejitGrant; } break;
case 749:
#line 1873 "asmparse.y"
{ yyval.secAct = dclPrejitDenied; } break;
case 750:
#line 1874 "asmparse.y"
{ yyval.secAct = dclNonCasDemand; } break;
case 751:
#line 1875 "asmparse.y"
{ yyval.secAct = dclNonCasLinkDemand; } break;
case 752:
#line 1876 "asmparse.y"
{ yyval.secAct = dclNonCasInheritance; } break;
case 753:
#line 1880 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = FALSE; } break;
case 754:
#line 1881 "asmparse.y"
{ PASM->ResetLineNumbers(); nCurrPC = PASM->m_CurPC; PENV->bExternSource = TRUE; PENV->bExternSourceAutoincrement = TRUE; } break;
case 755:
#line 1884 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yypvt[-1].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yypvt[-0].string);} break;
case 756:
#line 1887 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yypvt[-0].int32;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd  = static_cast<unsigned>(-1); } break;
case 757:
#line 1889 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yypvt[-3].int32; 
                                                                PENV->nExtCol=yypvt[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yypvt[-0].string);} break;
case 758:
#line 1892 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yypvt[-2].int32; 
                                                                PENV->nExtCol=yypvt[-0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);} break;
case 759:
#line 1895 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yypvt[-5].int32; 
                                                                PENV->nExtCol=yypvt[-3].int32; PENV->nExtColEnd = yypvt[-1].int32;
                                                                PASM->SetSourceFileName(yypvt[-0].string);} break;
case 760:
#line 1899 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yypvt[-4].int32; 
                                                                PENV->nExtCol=yypvt[-2].int32; PENV->nExtColEnd = yypvt[-0].int32; } break;
case 761:
#line 1902 "asmparse.y"
{ PENV->nExtLine = yypvt[-5].int32; PENV->nExtLineEnd = yypvt[-3].int32; 
                                                                PENV->nExtCol=yypvt[-1].int32; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yypvt[-0].string);} break;
case 762:
#line 1906 "asmparse.y"
{ PENV->nExtLine = yypvt[-4].int32; PENV->nExtLineEnd = yypvt[-2].int32; 
                                                                PENV->nExtCol=yypvt[-0].int32; PENV->nExtColEnd = static_cast<unsigned>(-1); } break;
case 763:
#line 1909 "asmparse.y"
{ PENV->nExtLine = yypvt[-7].int32; PENV->nExtLineEnd = yypvt[-5].int32; 
                                                                PENV->nExtCol=yypvt[-3].int32; PENV->nExtColEnd = yypvt[-1].int32;
                                                                PASM->SetSourceFileName(yypvt[-0].string);} break;
case 764:
#line 1913 "asmparse.y"
{ PENV->nExtLine = yypvt[-6].int32; PENV->nExtLineEnd = yypvt[-4].int32; 
                                                                PENV->nExtCol=yypvt[-2].int32; PENV->nExtColEnd = yypvt[-0].int32; } break;
case 765:
#line 1915 "asmparse.y"
{ PENV->nExtLine = PENV->nExtLineEnd = yypvt[-1].int32 - 1;
                                                                PENV->nExtCol = 0; PENV->nExtColEnd = static_cast<unsigned>(-1);
                                                                PASM->SetSourceFileName(yypvt[-0].binstr);} break;
case 766:
#line 1922 "asmparse.y"
{ PASMM->AddFile(yypvt[-5].string, yypvt[-6].fileAttr|yypvt[-4].fileAttr|yypvt[-0].fileAttr, yypvt[-2].binstr); } break;
case 767:
#line 1923 "asmparse.y"
{ PASMM->AddFile(yypvt[-1].string, yypvt[-2].fileAttr|yypvt[-0].fileAttr, NULL); } break;
case 768:
#line 1926 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; } break;
case 769:
#line 1927 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) (yypvt[-1].fileAttr | ffContainsNoMetaData); } break;
case 770:
#line 1930 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0; } break;
case 771:
#line 1931 "asmparse.y"
{ yyval.fileAttr = (CorFileFlags) 0x80000000; } break;
case 772:
#line 1934 "asmparse.y"
{ bParsingByteArray = TRUE; } break;
case 773:
#line 1937 "asmparse.y"
{ PASMM->StartAssembly(yypvt[-0].string, NULL, (DWORD)yypvt[-1].asmAttr, FALSE); } break;
case 774:
#line 1940 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) 0; } break;
case 775:
#line 1941 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yypvt[-1].asmAttr | afRetargetable); } break;
case 776:
#line 1942 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yypvt[-1].asmAttr | afContentType_WindowsRuntime); } break;
case 777:
#line 1943 "asmparse.y"
{ yyval.asmAttr = (CorAssemblyFlags) (yypvt[-1].asmAttr | afPA_NoPlatform); } break;
case 778:
#line 1944 "asmparse.y"
{ yyval.asmAttr = yypvt[-2].asmAttr; } break;
case 779:
#line 1945 "asmparse.y"
{ SET_PA(yyval.asmAttr,yypvt[-1].asmAttr,afPA_MSIL); } break;
case 780:
#line 1946 "asmparse.y"
{ SET_PA(yyval.asmAttr,yypvt[-1].asmAttr,afPA_x86); } break;
case 781:
#line 1947 "asmparse.y"
{ SET_PA(yyval.asmAttr,yypvt[-1].asmAttr,afPA_IA64); } break;
case 782:
#line 1948 "asmparse.y"
{ SET_PA(yyval.asmAttr,yypvt[-1].asmAttr,afPA_AMD64); } break;
case 783:
#line 1949 "asmparse.y"
{ SET_PA(yyval.asmAttr,yypvt[-1].asmAttr,afPA_ARM); } break;
case 786:
#line 1956 "asmparse.y"
{ PASMM->SetAssemblyHashAlg(yypvt[-0].int32); } break;
case 789:
#line 1961 "asmparse.y"
{ yyval.int32 = yypvt[-0].int32; } break;
case 790:
#line 1962 "asmparse.y"
{ yyval.int32 = 0xFFFF; } break;
case 791:
#line 1965 "asmparse.y"
{ PASMM->SetAssemblyPublicKey(yypvt[-1].binstr); } break;
case 792:
#line 1967 "asmparse.y"
{ PASMM->SetAssemblyVer((USHORT)yypvt[-6].int32, (USHORT)yypvt[-4].int32, (USHORT)yypvt[-2].int32, (USHORT)yypvt[-0].int32); } break;
case 793:
#line 1968 "asmparse.y"
{ yypvt[-0].binstr->appendInt8(0); PASMM->SetAssemblyLocale(yypvt[-0].binstr,TRUE); } break;
case 794:
#line 1969 "asmparse.y"
{ PASMM->SetAssemblyLocale(yypvt[-1].binstr,FALSE); } break;
case 797:
#line 1974 "asmparse.y"
{ bParsingByteArray = TRUE; } break;
case 798:
#line 1977 "asmparse.y"
{ bParsingByteArray = TRUE; } break;
case 799:
#line 1980 "asmparse.y"
{ bParsingByteArray = TRUE; } break;
case 800:
#line 1984 "asmparse.y"
{ PASMM->StartAssembly(yypvt[-0].string, NULL, yypvt[-1].asmAttr, TRUE); } break;
case 801:
#line 1986 "asmparse.y"
{ PASMM->StartAssembly(yypvt[-2].string, yypvt[-0].string, yypvt[-3].asmAttr, TRUE); } break;
case 804:
#line 1993 "asmparse.y"
{ PASMM->SetAssemblyHashBlob(yypvt[-1].binstr); } break;
case 806:
#line 1995 "asmparse.y"
{ PASMM->SetAssemblyPublicKeyToken(yypvt[-1].binstr); } break;
case 807:
#line 1996 "asmparse.y"
{ PASMM->SetAssemblyAutodetect(); } break;
case 808:
#line 1999 "asmparse.y"
{ PASMM->StartComType(yypvt[-0].string, yypvt[-1].exptAttr);} break;
case 809:
#line 2002 "asmparse.y"
{ PASMM->StartComType(yypvt[-0].string, yypvt[-1].exptAttr); } break;
case 810:
#line 2005 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) 0; } break;
case 811:
#line 2006 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-1].exptAttr | tdNotPublic); } break;
case 812:
#line 2007 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-1].exptAttr | tdPublic); } break;
case 813:
#line 2008 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-1].exptAttr | tdForwarder); } break;
case 814:
#line 2009 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-2].exptAttr | tdNestedPublic); } break;
case 815:
#line 2010 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-2].exptAttr | tdNestedPrivate); } break;
case 816:
#line 2011 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-2].exptAttr | tdNestedFamily); } break;
case 817:
#line 2012 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-2].exptAttr | tdNestedAssembly); } break;
case 818:
#line 2013 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-2].exptAttr | tdNestedFamANDAssem); } break;
case 819:
#line 2014 "asmparse.y"
{ yyval.exptAttr = (CorTypeAttr) (yypvt[-2].exptAttr | tdNestedFamORAssem); } break;
case 822:
#line 2021 "asmparse.y"
{ PASMM->SetComTypeFile(yypvt[-0].string); } break;
case 823:
#line 2022 "asmparse.y"
{ PASMM->SetComTypeComType(yypvt[-0].string); } break;
case 824:
#line 2023 "asmparse.y"
{ PASMM->SetComTypeAsmRef(yypvt[-0].string); } break;
case 825:
#line 2024 "asmparse.y"
{ if(!PASMM->SetComTypeImplementationTok(yypvt[-1].int32))
                                                                  PASM->report->error("Invalid implementation of exported type\n"); } break;
case 826:
#line 2026 "asmparse.y"
{ if(!PASMM->SetComTypeClassTok(yypvt[-0].int32))
                                                                  PASM->report->error("Invalid TypeDefID of exported type\n"); } break;
case 829:
#line 2032 "asmparse.y"
{ PASMM->StartManifestRes(yypvt[-0].string, yypvt[-0].string, yypvt[-1].manresAttr); } break;
case 830:
#line 2034 "asmparse.y"
{ PASMM->StartManifestRes(yypvt[-2].string, yypvt[-0].string, yypvt[-3].manresAttr); } break;
case 831:
#line 2037 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) 0; } break;
case 832:
#line 2038 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yypvt[-1].manresAttr | mrPublic); } break;
case 833:
#line 2039 "asmparse.y"
{ yyval.manresAttr = (CorManifestResourceFlags) (yypvt[-1].manresAttr | mrPrivate); } break;
case 836:
#line 2046 "asmparse.y"
{ PASMM->SetManifestResFile(yypvt[-2].string, (ULONG)yypvt[-0].int32); } break;
case 837:
#line 2047 "asmparse.y"
{ PASMM->SetManifestResAsmRef(yypvt[-0].string); } break;/* End of actions */
#line 329 "O:\\tfs\\cgm\\src\\Tools\\devdiv\\amd64\\yypars.c"
			}
		}
		goto yystack;  /* stack new state and value */
	}
#pragma warning(default:102)


#ifdef YYDUMP
YYLOCAL void YYNEAR YYPASCAL yydumpinfo(void)
{
	short stackindex;
	short valindex;

	//dump yys
	printf("short yys[%d] {\n", YYMAXDEPTH);
	for (stackindex = 0; stackindex < YYMAXDEPTH; stackindex++){
		if (stackindex)
			printf(", %s", stackindex % 10 ? "\0" : "\n");
		printf("%6d", yys[stackindex]);
		}
	printf("\n};\n");

	//dump yyv
	printf("YYSTYPE yyv[%d] {\n", YYMAXDEPTH);
	for (valindex = 0; valindex < YYMAXDEPTH; valindex++){
		if (valindex)
			printf(", %s", valindex % 5 ? "\0" : "\n");
		printf("%#*x", 3+sizeof(YYSTYPE), yyv[valindex]);
		}
	printf("\n};\n");
	}
#endif
