[
    {
        "name": "System.Net.HttpListener.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Tests.HttpRequestStreamTests.Read_NullBuffer_ThrowsArgumentNullException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                },
                {
                    "name": "System.Net.Tests.HttpResponseStreamTests.Write_NullBuffer_ThrowsArgumentNullException",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Reflection.Context.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Reflection.Context.Tests.CustomPropertyInfoTests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetTypesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.ProjectAssemblyTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetTypeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetCustomAttributesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetExportedTypesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetManifestResourceInfoTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.EntryPoint",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetModulesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetHashCodeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.EqualsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetSatelliteAssemblyTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.ManifestModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomAssemblyTests.GetLoadedModulesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.SetValue_HasSetter_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_NullPropertyName_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ReflectedTypeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.AttributesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetCustomAttributes_NoType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.CanReadTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_NullPropertyType_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ToStringTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetAccessorsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetConstantValueTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetHashCodeTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetOptionalCustomModifiersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetRawConstantValueTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetValue_NoGetter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.ProjectionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.SetValue_NoSetter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_WrongPropertyType_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.SetValue_HasSetterWithIndex_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetRequiredCustomModifiersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetValue_HasGetter_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.CanWriteTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.MetadataTokenTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_GetterAndSetterNull_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetCustomAttributes_WithType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.Ctor_EmptyPropertyName_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.GetIndexParametersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfoTests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributes_NoType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.MakeGenericMethodTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_WrongObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetGenericMethodDefinitionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_NotSingleParameter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.IsGenericMethodDefinitionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetMethodImplementationFlagsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetBaseDefinition",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.MethodHandleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ProjectionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_NullParameter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ReturnTypeCustomAttributes",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_ValidArguments_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.CallingConventionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ModuleTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetParametersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributesTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.IsGenericMethodTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.Invoke_NullObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributes_WithType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ReturnParameterTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetGenericArgumentsTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.ContainsGenericParametersTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertySetter_Tests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_ParameterAttributes_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_MemberAttributes_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_Null_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapAssembly_Null_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.Ctor_Null_Throws",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.PlatformNotSupportedException): Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.CustomReflectionContextTests.MapType_Interface_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_NullObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.GetCustomAttributes_NoType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.GetCustomAttributes_WithType_Test",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_NotEmptyParameter_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.ProjectionTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.GetCustomAttributesDataTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.IsDefinedTest",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_NullParameters_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_EmptyParameters_Success",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                },
                {
                    "name": "System.Reflection.Context.Tests.VirtualPropertyInfo_PropertyGetter_Tests.Invoke_WrongObject_Throws",
                    "reason": "System.PlatformNotSupportedException System.PlatformNotSupportedException : Customized reflection contexts are only supported on .NET Framework."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Xml.Xsl.XslTransformApi.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Xml.Tests.CXmlResolverTest.TC_AbsolutePath_Transform",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Xml.Tests.CTransformResolverTest.TC_AbsolutePath_Transform",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Security.Cryptography.X509Certificates.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.X509Certificates.Tests.ExtensionsTests.EnhancedKeyUsageExtension_ImmutableOids",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\nExpected: 0\\nActual:   1"
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Text.Encoding.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Text.Tests.DecoderFallbackTests.TestDecoderFallbackIndex",
                    "reason": "System.Text.DecoderFallbackException System.Text.DecoderFallbackException : Encountered a negative index during Utf8 decoding fallback "
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.IO.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.Tests.TextWriterTests.WriteLineStringBuilderTest",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.IO.TextWriter.WriteLine(System.Text.StringBuilder)'."
                },
                {
                    "name": "System.IO.Tests.TextWriterTests.WriteLineAsyncStringBuilderTest",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.Threading.Tasks.Task System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder, System.Threading.CancellationToken)'."
                },
                {
                    "name": "System.IO.Tests.TextWriterTests.WriteStringBuilderTest",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.IO.TextWriter.Write(System.Text.StringBuilder)'."
                },
                {
                    "name": "System.IO.Tests.TextWriterTests.WriteAsyncStringBuilderTest",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.Threading.Tasks.Task System.IO.TextWriter.WriteAsync(System.Text.StringBuilder, System.Threading.CancellationToken)'."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Security.Cryptography.OpenSsl.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa512Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024EncryptedPkcs8_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa576EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa2048EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa2048SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa512EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa576SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteRsa16384SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteDiminishedDPPrivatePkcs1",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyRSAPublicKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes2Rc2EncryptedDiminishedDP",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedRsa1032",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteSubjectPublicKeyInfo_DiminishedDPKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP_EmptyPassword",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteBigExponentPrivatePkcs1",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes1Rc2EncryptedRsa384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedRsa16384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteDiminishedDPPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteSubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWritePublicPkcs1",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWrite16384Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP_EmptyPasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes2Rc2EncryptedDiminishedDP_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyRSAPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.ECDsa.ExportECPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP256EncryptedPkcs8_Pbes1_RC2_MD5",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP256ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP256Explicit",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzyECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521Pkcs8_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzyECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP256EncryptedPkcs8_Pbes1_RC2_MD5",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521Pkcs8_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP256Explicit",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP256ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Net.Http.Functional.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Net.Http.Functional.Tests.PlatformHandler_DiagnosticsTest.SendAsync_ExpectedDiagnosticSourceActivityLogging",
                    "reason": "System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception."
                },
                {
                    "name": "System.Net.Http.Functional.Tests.SocketsHttpHandler_DiagnosticsTest.SendAsync_ExpectedDiagnosticSourceActivityLogging",
                    "reason": "System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException System.Diagnostics.RemoteExecutorTestBase+RemoteInvokeHandle+RemoteExecutionException : Remote process failed with an unhandled exception."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Diagnostics.DiagnosticSource.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Diagnostics.Tests.DiagnosticSourceEventSourceBridgeTests.TestShortcutKeywords",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\n          ↓ (pos 0)\\nExpected: Activity1Start\\nActual:   Event\\n          ↑ (pos 0)"
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Globalization.Calendars.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Globalization.ISOWeekTests.GetWeekOfYear",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.ToDateTime_WithInvalidDayOfWeek_Throws",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentOutOfRangeException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.GetWeeksInYear",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.GetYear",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.GetWeeksInYear_WithInvalidYear_Throws",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentOutOfRangeException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.GetYearEnd_ForYear9999_Throws",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentOutOfRangeException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.GetYearStart",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.GetYearEnd",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.ToDateTime_WithInvalidYear_Throws",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentOutOfRangeException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.ToDateTime_WithInvalidWeek_Throws",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentOutOfRangeException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Globalization.ISOWeekTests.ToDateTime",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Globalization.ISOWeek' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Runtime.Extensions.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.Tests.PathTests_Join.JoinTwoPaths",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.PathTests_Join.JoinThreePaths",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String, System.String)'."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Runtime.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Tests.TimeZoneInfoTests.TimeZoneInfo_DaylightDeltaIsNoMoreThan12Hours",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Tests.TimeZoneInfoTests.TimeZoneInfo_DoesConvertTimeForOldDatesOfTimeZonesWithExceedingMaxRange",
                    "reason": "System.ArgumentOutOfRangeException System.ArgumentOutOfRangeException : Offset must be within plus or minus 14 hours.\\nParameter name: offset"
                },
                {
                    "name": "System.Tests.TimeZoneInfoTests.GetSystemTimeZones_AllTimeZonesHaveOffsetInValidRange",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Runtime.CompilerServices.Tests.CallerArgumentExpressionAttributeTests.ArgumentToCallerArgumentExpressionSetsParameterNameProperty",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Runtime.CompilerServices.CallerArgumentExpressionAttribute' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Tests.DecimalTests.GetHashCode",
                    "reason": "Xunit.Sdk.XunitException Decimal 3 has multiple hash codes: 1074266112 (3) and -1074266097 (3.000000000000000000000000000)"
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Security.Cryptography.Pkcs.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.Decode_SkipCopyIsRespected",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.CreateNull",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.EnsureAttributesParse",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.InvalidAlgorithmId",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.NullAlgorithm",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.EnsureAttributesRoundtrip",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.ReencryptAndImport",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.BadPbeParameters",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.Pkcs8PrivateKeyInfoTests.DecryptionFailures",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.SignerInfo_AddRemoveUnsignedAttributes_JoinCounterSignaturesAttributesIntoOne",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.SignerInfo_AddUnsignedAttribute_Adds",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.EnsureExtraCertsAdded",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Unknown algorithm '1.2.840.10040.4.3'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.AddCounterSigner_DSA",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.SignerInfo_RemoveUnsignedAttributes_MultipleAttributeValues",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignerInfoTests.RemoveCounterSignature_EncodedInSingleAttribute",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Unknown algorithm '1.2.840.10040.4.3'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.EnsureExtraCertsAdded",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Unknown algorithm '1.2.840.10040.4.3'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.SignCmsUsingECDsaCertWithNotMatchingKeyThrows",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   (No exception was thrown)"
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.AddFirstSigner_DSA",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.CounterSignCmsUsingExplicitDSAKeyForFirstSignerAndECDsaForCounterSignature",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.CounterSignCmsUsingExplicitRSAKeyForFirstSignerAndDSAForCounterSignature",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.SignedCmsTests.SignCmsUsingExplicitDSAKey",
                    "reason": "System.Security.Cryptography.CryptographicException System.Security.Cryptography.CryptographicException : Could not determine signature algorithm for the signer certificate."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.ProcessResponse_Symantec_NoCerts_WithNonce",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.NegativeNonceIsMadePositive",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildFromSignerInfo",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildExpectedRequest_FromHashAndName",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.NonceLeadingZerosIgnored",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildExpectedRequest_FromData",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.NoncePaddingZerosIgnored",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildFromNullSignerInfo",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.TryDecode_WithExtensions",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildExpectedRequest_FromHashAndOid",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.ProcessResponse_FreeTsa_WithCerts_NoNonce",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.BuildWithAllOptions",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampRequestTests.EmptyNonce",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampRequest' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_Empty",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.NoEkuExtension",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertHashMismatchV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.MatchV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TimestampTooOld",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_SignedCmsOfData",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TwoEkuExtensions",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_MalformedToken",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMismatchIssuerAndSerialV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertHashMismatchV1",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TimestampTooNew",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.MatchV1",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMismatchIssuerAndSerialV1",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMismatchV1OrV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.CertMatchV1AndV2",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.TryDecode_Fails_EnvelopedCms",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.NonCriticalEkuExtension",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.ParseDocument_ExcessData",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.NoTsaEku",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenTests.ParseDocument",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampToken' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_TsaNameOptional",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_IsOrdering_Roundtrips",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_HashAlgorithmIdRequired",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.Accuracy_Bounds_ParsesAsExpected",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.NegativeAccuracyThrows",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentOutOfRangeException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.ExtensionsRoundtrips",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.AccuracyRoundtrips",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.CreateFromValue",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_AccuracyOptional",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.TryDecode_Invalid",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.CreateFromParameters",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_Timestamp_KeepsSubSeconds",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.TryDecode_LongerThanNeeded",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.BuilderCtor_PolicyIdRequired",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Pkcs.Tests.TimestampTokenInfoTests.TsaName_SameDataSecondInvocation",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Rfc3161TimestampTokenInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.IO.FileSystem.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.IO.Tests.FileInfo_GetSetTimes.TimesIncludeMillisecondPart_OSX",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 9 out of 9 items in the collection did not pass.\\n[8]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[7]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[6]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[5]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[4]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[3]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[2]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[1]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[0]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   795\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)"
                },
                {
                    "name": "System.IO.Tests.Enumeration.RemovedDirectoryTests.RemoveDirectoryBeforeHandleCreationAndReplaceWithFile",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.RemovedDirectoryTests.RemoveDirectoryBeforeHandleCreation",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.DirectoryInfo_GetSetTimes.TimesIncludeMillisecondPart_OSX",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 9 out of 9 items in the collection did not pass.\\n[8]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[7]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[6]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[5]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[4]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[3]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[2]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[1]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[0]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   802\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)"
                },
                {
                    "name": "System.IO.Tests.Directory_GetSetTimes.TimesIncludeMillisecondPart_OSX",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 9 out of 9 items in the collection did not pass.\\n[8]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[7]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[6]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[5]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[4]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[3]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[2]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[1]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[0]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   3\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)"
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.TestCountFiles",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.TestGetFilesWithExtensions",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.TestCountFileBytes",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.Enumeration.ExampleTests.GetFileNamesEnumerable",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'System.String System.IO.Path.Join(System.String, System.String)'."
                },
                {
                    "name": "System.IO.Tests.File_GetSetTimes.TimesIncludeMillisecondPart_OSX",
                    "reason": "Xunit.Sdk.AllException Assert.All() Failure: 9 out of 9 items in the collection did not pass.\\n[8]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[7]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[6]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[5]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[4]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[3]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[2]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[1]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)\\n[0]: Xunit.Sdk.EqualException: Assert.Equal() Failure\\n     Expected: 0\\n     Actual:   485\\n        at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\\n        at System.IO.Tests.BaseGetSetTimes`1.<>c__DisplayClass11_0.<TimesIncludeMillisecondPart_OSX>b__0(TimeFunction function) in /Users/anandono/Source/repos/corefx/src/System.IO.FileSystem/tests/Base/BaseGetSetTimes.cs:line 150\\n        at Xunit.Assert.All[T](IEnumerable`1 collection, Action`1 action)"
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Security.Cryptography.Csp.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa512Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa576SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024EncryptedPkcs8_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa576EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa512EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyRSAPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP_EmptyPassword",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes2Rc2EncryptedDiminishedDP_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes1Rc2EncryptedRsa384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteDiminishedDPPrivatePkcs1",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyRSAPublicKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedRsa1032",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP_EmptyPasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteSubjectPublicKeyInfo_DiminishedDPKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes2Rc2EncryptedDiminishedDP",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteDiminishedDPPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Security.Cryptography.Algorithms.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521Pkcs8_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1Pkcs8",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP256Explicit",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1SubjectPublicKeyInfo",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP256EncryptedPkcs8_Pbes1_RC2_MD5",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteNistP256ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.ECDsa.ExportECPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzyECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1ECPrivateKey",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1SubjectPublicKeyInfo",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1ECPrivateKey",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteBrainpoolKey1Pkcs8",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadWriteSect283k1Key1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDsa.Tests.ECDsaKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP256Explicit",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.Pkcs.Pkcs8PrivateKeyInfo' from assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1Pkcs8",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP521EncryptedPkcs8_Pbes2_Aes128_Sha384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzyECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1SubjectPublicKeyInfo",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP521Pkcs8_ECDH",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteSect283k1Key1ECPrivateKey",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadNistP256EncryptedPkcs8_Pbes1_RC2_MD5",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1SubjectPublicKeyInfo",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1ECPrivateKey",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteBrainpoolKey1Pkcs8",
                    "reason": "Xunit.Sdk.TrueException e is PlatformNotSupportedException || e is CryptographicException\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.ReadWriteNistP256ECPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.EcDiffieHellman.Tests.ECDhKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteSubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteBigExponentPrivatePkcs1",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteDiminishedDPPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes2Rc2EncryptedDiminishedDP",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyRSAPrivateKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteDiminishedDPPrivatePkcs1",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP_EmptyPassword",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedRsa1032",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadEncryptedDiminishedDP_EmptyPasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPublicKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes2Rc2EncryptedDiminishedDP_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadPbes1Rc2EncryptedRsa384",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.NoFuzzyRSAPublicKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.RSA.ExportRSAPrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Rsa.Tests.RSAKeyFileTests.ReadWriteSubjectPublicKeyInfo_DiminishedDPKey",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024EncryptedPkcs8_PasswordBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa512Pkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.BadPbeParameters",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentNullException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan`1<Byte>, System.Security.Cryptography.PbeParameters)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa512EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzyPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.DecryptPkcs12WithBytes",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzyEncryptedPkcs8",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoPrivKeyFromPublicOnly",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.Security.Cryptography.CryptographicException)\\nActual:   typeof(System.MissingMethodException): Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.NoFuzzySubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Byte[] System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey()'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa1024EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa576SubjectPublicKeyInfo",
                    "reason": "System.MissingMethodException System.MissingMethodException : Method not found: 'Void System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan`1<Byte>, Int32 ByRef)'."
                },
                {
                    "name": "System.Security.Cryptography.Dsa.Tests.DSAKeyFileTests.ReadWriteDsa576EncryptedPkcs8",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Collections.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "Generic.Dictionary.DictionaryConcurrentAccessDetectionTests.DictionaryConcurrentAccessDetection_ReferenceTypeKey",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                },
                {
                    "name": "Generic.Dictionary.DictionaryConcurrentAccessDetectionTests.DictionaryConcurrentAccessDetection_ValueTypeKey",
                    "reason": "Xunit.Sdk.TrueException Assert.True() Failure\\nExpected: True\\nActual:   False"
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Diagnostics.Tracing.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds",
                    "reason": "Xunit.Sdk.EqualException Assert.Equal() Failure\\nExpected: 2\\nActual:   1"
                }
            ]
        },
        "enabled": true
    },
    {
        "name": "System.Security.Cryptography.Primitives.Tests",
        "exclusions": {
            "namespaces": null,
            "classes": null,
            "methods": [
                {
                    "name": "System.Security.Cryptography.Primitives.Tests.PbeParametersTests.HashAlgorithm_NotVerified_DefaultValue",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Primitives.Tests.PbeParametersTests.HashAlgorithm_NotVerified",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Primitives.Tests.PbeParametersTests.EncryptionAlgorithm_NotVerified",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Primitives.Tests.PbeParametersTests.PositiveIterationsRequired",
                    "reason": "Xunit.Sdk.ThrowsException Assert.Throws() Failure\\nExpected: typeof(System.ArgumentOutOfRangeException)\\nActual:   typeof(System.TypeLoadException): Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                },
                {
                    "name": "System.Security.Cryptography.Primitives.Tests.PbeParametersTests.Pkcs12_NotVerifed_InCtor",
                    "reason": "System.TypeLoadException System.TypeLoadException : Could not load type 'System.Security.Cryptography.PbeParameters' from assembly 'System.Security.Cryptography.Primitives, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'."
                }
            ]
        },
        "enabled": true
    }
]